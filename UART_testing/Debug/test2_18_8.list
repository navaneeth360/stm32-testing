
test2_18_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008390  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08008530  08008530  00009530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008608  08008608  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008608  08008608  00009608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008610  08008610  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008610  08008610  00009610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008614  08008614  00009614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008618  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001870  20000060  08008678  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018d0  08008678  0000a8d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002752a  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c6f  00000000  00000000  000315ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e0  00000000  00000000  00036230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a5e  00000000  00000000  00038410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f48  00000000  00000000  00039e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e91  00000000  00000000  00063db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103f82  00000000  00000000  0008bc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fbc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009430  00000000  00000000  0018fc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0019903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008518 	.word	0x08008518

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08008518 	.word	0x08008518

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4a07      	ldr	r2, [pc, #28]	@ (8000548 <vApplicationGetIdleTaskMemory+0x2c>)
 800052c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4a06      	ldr	r2, [pc, #24]	@ (800054c <vApplicationGetIdleTaskMemory+0x30>)
 8000532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2280      	movs	r2, #128	@ 0x80
 8000538:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2000007c 	.word	0x2000007c
 800054c:	2000011c 	.word	0x2000011c

08000550 <main>:
  * @retval int
  */


int main(void)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f001 fa58 	bl	8001a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f85f 	bl	800061c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800055e:	f000 f8c5 	bl	80006ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 fbe9 	bl	8000d38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000566:	f000 f8f3 	bl	8000750 <MX_ADC1_Init>
  MX_I2C1_Init();
 800056a:	f000 f957 	bl	800081c <MX_I2C1_Init>
  MX_QUADSPI_Init();
 800056e:	f000 f993 	bl	8000898 <MX_QUADSPI_Init>
  MX_RNG_Init();
 8000572:	f000 f9bd 	bl	80008f0 <MX_RNG_Init>
  MX_RTC_Init();
 8000576:	f000 f9cf 	bl	8000918 <MX_RTC_Init>
  MX_SPI1_Init();
 800057a:	f000 f9f5 	bl	8000968 <MX_SPI1_Init>
  MX_SPI3_Init();
 800057e:	f000 fa31 	bl	80009e4 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000582:	f000 fa6d 	bl	8000a60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000586:	f000 fac5 	bl	8000b14 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800058a:	f000 fb1d 	bl	8000bc8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800058e:	f000 fb4b 	bl	8000c28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000592:	f000 fb79 	bl	8000c88 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000596:	f000 fba7 	bl	8000ce8 <MX_USB_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <main+0x74>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f006 fc62 	bl	8006e7a <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <main+0x78>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005bc:	f006 fc56 	bl	8006e6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <main+0x70>
 80005c4:	0800853c 	.word	0x0800853c
 80005c8:	20000a30 	.word	0x20000a30

080005cc <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b08c      	sub	sp, #48	@ 0x30
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	char msg3[] = "Woah, you just interrupted the UART !";
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_GPIO_EXTI_Callback+0x48>)
 80005d8:	f107 0408 	add.w	r4, r7, #8
 80005dc:	461d      	mov	r5, r3
 80005de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ea:	6020      	str	r0, [r4, #0]
 80005ec:	3404      	adds	r4, #4
 80005ee:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart1, (const uint8_t*) msg3, strlen(msg3), 100);
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fdf3 	bl	80001e0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	f107 0108 	add.w	r1, r7, #8
 8000602:	2364      	movs	r3, #100	@ 0x64
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000606:	f005 fb15 	bl	8005c34 <HAL_UART_Transmit>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800060a:	bf00      	nop
 800060c:	3730      	adds	r7, #48	@ 0x30
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}
 8000612:	bf00      	nop
 8000614:	08008558 	.word	0x08008558
 8000618:	200005b8 	.word	0x200005b8

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	@ 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2244      	movs	r2, #68	@ 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f007 fe92 	bl	8008354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000642:	f002 fe81 	bl	8003348 <HAL_PWREx_ControlVoltageScaling>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 fc80 	bl	8000f50 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000650:	f002 fe5c 	bl	800330c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800065a:	4a23      	ldr	r2, [pc, #140]	@ (80006e8 <SystemClock_Config+0xcc>)
 800065c:	f023 0318 	bic.w	r3, r3, #24
 8000660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000664:	2314      	movs	r3, #20
 8000666:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000674:	2360      	movs	r3, #96	@ 0x60
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800067c:	2301      	movs	r3, #1
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000684:	2328      	movs	r3, #40	@ 0x28
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4618      	mov	r0, r3
 800069a:	f002 ff7d 	bl	8003598 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a4:	f000 fc54 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2303      	movs	r3, #3
 80006ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	2104      	movs	r1, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fb7d 	bl	8003dc0 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006cc:	f000 fc40 	bl	8000f50 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80006d6:	2000      	movs	r0, #0
 80006d8:	f003 fc72 	bl	8003fc0 <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006dc:	f004 f866 	bl	80047ac <HAL_RCCEx_EnableMSIPLLMode>
}
 80006e0:	bf00      	nop
 80006e2:	3758      	adds	r7, #88	@ 0x58
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000

080006ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09a      	sub	sp, #104	@ 0x68
 80006f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2268      	movs	r2, #104	@ 0x68
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f007 fe2b 	bl	8008354 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG
 80006fe:	f44f 238c 	mov.w	r3, #286720	@ 0x46000
 8000702:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000704:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000708:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800070a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800070e:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000710:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000714:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000716:	2301      	movs	r3, #1
 8000718:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800071e:	2318      	movs	r3, #24
 8000720:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000722:	2307      	movs	r3, #7
 8000724:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800072e:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8000732:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fdcc 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000742:	f000 fc05 	bl	8000f50 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3768      	adds	r7, #104	@ 0x68
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <MX_ADC1_Init+0xbc>)
 8000768:	4a29      	ldr	r2, [pc, #164]	@ (8000810 <MX_ADC1_Init+0xc0>)
 800076a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800076c:	4b27      	ldr	r3, [pc, #156]	@ (800080c <MX_ADC1_Init+0xbc>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000772:	4b26      	ldr	r3, [pc, #152]	@ (800080c <MX_ADC1_Init+0xbc>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000778:	4b24      	ldr	r3, [pc, #144]	@ (800080c <MX_ADC1_Init+0xbc>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077e:	4b23      	ldr	r3, [pc, #140]	@ (800080c <MX_ADC1_Init+0xbc>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000784:	4b21      	ldr	r3, [pc, #132]	@ (800080c <MX_ADC1_Init+0xbc>)
 8000786:	2204      	movs	r2, #4
 8000788:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800078a:	4b20      	ldr	r3, [pc, #128]	@ (800080c <MX_ADC1_Init+0xbc>)
 800078c:	2200      	movs	r2, #0
 800078e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000790:	4b1e      	ldr	r3, [pc, #120]	@ (800080c <MX_ADC1_Init+0xbc>)
 8000792:	2200      	movs	r2, #0
 8000794:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_ADC1_Init+0xbc>)
 8000798:	2201      	movs	r2, #1
 800079a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079c:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <MX_ADC1_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a4:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_ADC1_Init+0xbc>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <MX_ADC1_Init+0xbc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_ADC1_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_ADC1_Init+0xbc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_ADC1_Init+0xbc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c6:	4811      	ldr	r0, [pc, #68]	@ (800080c <MX_ADC1_Init+0xbc>)
 80007c8:	f001 faf8 	bl	8001dbc <HAL_ADC_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007d2:	f000 fbbd 	bl	8000f50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_ADC1_Init+0xc4>)
 80007d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007da:	2306      	movs	r3, #6
 80007dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <MX_ADC1_Init+0xc8>)
 80007e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e6:	2304      	movs	r3, #4
 80007e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_ADC1_Init+0xbc>)
 80007f4:	f001 fc28 	bl	8002048 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007fe:	f000 fba7 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000031c 	.word	0x2000031c
 8000810:	50040000 	.word	0x50040000
 8000814:	04300002 	.word	0x04300002
 8000818:	407f0000 	.word	0x407f0000

0800081c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	@ (8000894 <MX_I2C1_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000828:	f640 6214 	movw	r2, #3604	@ 0xe14
 800082c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000836:	2201      	movs	r2, #1
 8000838:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_I2C1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <MX_I2C1_Init+0x74>)
 800085a:	f002 fafd 	bl	8002e58 <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 fb74 	bl	8000f50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	4809      	ldr	r0, [pc, #36]	@ (8000890 <MX_I2C1_Init+0x74>)
 800086c:	f002 fb8f 	bl	8002f8e <HAL_I2CEx_ConfigAnalogFilter>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000876:	f000 fb6b 	bl	8000f50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_I2C1_Init+0x74>)
 800087e:	f002 fbd1 	bl	8003024 <HAL_I2CEx_ConfigDigitalFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000888:	f000 fb62 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000384 	.word	0x20000384
 8000894:	40005400 	.word	0x40005400

08000898 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 800089e:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <MX_QUADSPI_Init+0x54>)
 80008a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 80008a4:	22ff      	movs	r2, #255	@ 0xff
 80008a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_QUADSPI_Init+0x50>)
 80008d4:	f002 fd9e 	bl	8003414 <HAL_QSPI_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80008de:	f000 fb37 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200003d8 	.word	0x200003d8
 80008ec:	a0001000 	.word	0xa0001000

080008f0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_RNG_Init+0x20>)
 80008f6:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <MX_RNG_Init+0x24>)
 80008f8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_RNG_Init+0x20>)
 80008fc:	f004 f858 	bl	80049b0 <HAL_RNG_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000906:	f000 fb23 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000424 	.word	0x20000424
 8000914:	50060800 	.word	0x50060800

08000918 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800091c:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MX_RTC_Init+0x48>)
 800091e:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <MX_RTC_Init+0x4c>)
 8000920:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_RTC_Init+0x48>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000928:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <MX_RTC_Init+0x48>)
 800092a:	227f      	movs	r2, #127	@ 0x7f
 800092c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_RTC_Init+0x48>)
 8000930:	22ff      	movs	r2, #255	@ 0xff
 8000932:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <MX_RTC_Init+0x48>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_RTC_Init+0x48>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <MX_RTC_Init+0x48>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_RTC_Init+0x48>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_RTC_Init+0x48>)
 800094e:	f004 f886 	bl	8004a5e <HAL_RTC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000958:	f000 fafa 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000434 	.word	0x20000434
 8000964:	40002800 	.word	0x40002800

08000968 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_SPI1_Init+0x74>)
 800096e:	4a1c      	ldr	r2, [pc, #112]	@ (80009e0 <MX_SPI1_Init+0x78>)
 8000970:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_SPI1_Init+0x74>)
 8000974:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000978:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_SPI1_Init+0x74>)
 8000982:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000986:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_SPI1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_SPI1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_SPI1_Init+0x74>)
 8000996:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800099a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_SPI1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_SPI1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_SPI1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_SPI1_Init+0x74>)
 80009b6:	2207      	movs	r2, #7
 80009b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_SPI1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_SPI1_Init+0x74>)
 80009c2:	2208      	movs	r2, #8
 80009c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_SPI1_Init+0x74>)
 80009c8:	f004 f968 	bl	8004c9c <HAL_SPI_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009d2:	f000 fabd 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000458 	.word	0x20000458
 80009e0:	40013000 	.word	0x40013000

080009e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_SPI3_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8000a5c <MX_SPI3_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_SPI3_Init+0x74>)
 80009f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_SPI3_Init+0x74>)
 80009fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a02:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a12:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a16:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_SPI3_Init+0x74>)
 8000a44:	f004 f92a 	bl	8004c9c <HAL_SPI_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 fa7f 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200004bc 	.word	0x200004bc
 8000a5c:	40003c00 	.word	0x40003c00

08000a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000a86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aac:	4818      	ldr	r0, [pc, #96]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000aae:	f004 fa55 	bl	8004f5c <HAL_TIM_PWM_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 fa4a 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000acc:	f004 ffd8 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ad6:	f000 fa3b 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ada:	2360      	movs	r3, #96	@ 0x60
 8000adc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	2204      	movs	r2, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000af2:	f004 fb91 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000afc:	f000 fa28 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <MX_TIM2_Init+0xb0>)
 8000b02:	f000 fc87 	bl	8001414 <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000520 	.word	0x20000520

08000b14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]
 8000b36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b38:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000b3a:	4a22      	ldr	r2, [pc, #136]	@ (8000bc4 <MX_TIM3_Init+0xb0>)
 8000b3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000b4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b5e:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000b60:	f004 f9fc 	bl	8004f5c <HAL_TIM_PWM_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b6a:	f000 f9f1 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4810      	ldr	r0, [pc, #64]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000b7e:	f004 ff7f 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b88:	f000 f9e2 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8c:	2360      	movs	r3, #96	@ 0x60
 8000b8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000ba4:	f004 fb38 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000bae:	f000 f9cf 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bb2:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <MX_TIM3_Init+0xac>)
 8000bb4:	f000 fc2e 	bl	8001414 <HAL_TIM_MspPostInit>

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000056c 	.word	0x2000056c
 8000bc4:	40000400 	.word	0x40000400

08000bc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000bce:	4a15      	ldr	r2, [pc, #84]	@ (8000c24 <MX_USART1_UART_Init+0x5c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_USART1_UART_Init+0x58>)
 8000c0c:	f004 ffc4 	bl	8005b98 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c16:	f000 f99b 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200005b8 	.word	0x200005b8
 8000c24:	40013800 	.word	0x40013800

08000c28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c2e:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <MX_USART2_UART_Init+0x5c>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c54:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c58:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c6e:	f004 ff93 	bl	8005b98 <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000c78:	f000 f96a 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000640 	.word	0x20000640
 8000c84:	40004400 	.word	0x40004400

08000c88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000c8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ce4 <MX_USART3_UART_Init+0x5c>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cb4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000cb8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cce:	f004 ff63 	bl	8005b98 <HAL_UART_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8000cd8:	f000 f93a 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200006c8 	.word	0x200006c8
 8000ce4:	40004800 	.word	0x40004800

08000ce8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <MX_USB_PCD_Init+0x48>)
 8000cee:	4a11      	ldr	r2, [pc, #68]	@ (8000d34 <MX_USB_PCD_Init+0x4c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_USB_PCD_Init+0x48>)
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <MX_USB_PCD_Init+0x48>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d1e:	f002 f9cd 	bl	80030bc <HAL_PCD_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000d28:	f000 f912 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000750 	.word	0x20000750
 8000d34:	40006800 	.word	0x40006800

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b50      	ldr	r3, [pc, #320]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	4a4f      	ldr	r2, [pc, #316]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b4a      	ldr	r3, [pc, #296]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	4a49      	ldr	r2, [pc, #292]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d72:	4b47      	ldr	r3, [pc, #284]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b44      	ldr	r3, [pc, #272]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	4a43      	ldr	r2, [pc, #268]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8a:	4b41      	ldr	r3, [pc, #260]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	4b3e      	ldr	r3, [pc, #248]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da2:	4b3b      	ldr	r3, [pc, #236]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dae:	4b38      	ldr	r3, [pc, #224]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	4a37      	ldr	r2, [pc, #220]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dba:	4b35      	ldr	r3, [pc, #212]	@ (8000e90 <MX_GPIO_Init+0x158>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MDM_PWR_EN_OUT_Pin|MDM_RST_OUT_Pin|LED2_Pin|LED3_Pin
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f24c 01c4 	movw	r1, #49348	@ 0xc0c4
 8000dcc:	4831      	ldr	r0, [pc, #196]	@ (8000e94 <MX_GPIO_Init+0x15c>)
 8000dce:	f002 f813 	bl	8002df8 <HAL_GPIO_WritePin>
                          |ST33_VCC_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|MDM_DTR_OUT_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000dd8:	482f      	ldr	r0, [pc, #188]	@ (8000e98 <MX_GPIO_Init+0x160>)
 8000dda:	f002 f80d 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDM_PWR_EN_OUT_Pin MDM_RST_OUT_Pin LED2_Pin LED3_Pin
                           ST33_VCC_CTRL_Pin */
  GPIO_InitStruct.Pin = MDM_PWR_EN_OUT_Pin|MDM_RST_OUT_Pin|LED2_Pin|LED3_Pin
 8000dde:	f24c 03c4 	movw	r3, #49348	@ 0xc0c4
 8000de2:	617b      	str	r3, [r7, #20]
                          |ST33_VCC_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4827      	ldr	r0, [pc, #156]	@ (8000e94 <MX_GPIO_Init+0x15c>)
 8000df8:	f001 fe84 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e02:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4821      	ldr	r0, [pc, #132]	@ (8000e98 <MX_GPIO_Init+0x160>)
 8000e14:	f001 fe76 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e38:	f001 fe64 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin MDM_DTR_OUT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|MDM_DTR_OUT_Pin;
 8000e3c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <MX_GPIO_Init+0x160>)
 8000e56:	f001 fe55 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MDM_RING_Pin */
  GPIO_InitStruct.Pin = MDM_RING_Pin;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MDM_RING_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <MX_GPIO_Init+0x15c>)
 8000e72:	f001 fe47 	bl	8002b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2105      	movs	r1, #5
 8000e7a:	2028      	movs	r0, #40	@ 0x28
 8000e7c:	f001 fd98 	bl	80029b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e80:	2028      	movs	r0, #40	@ 0x28
 8000e82:	f001 fdb1 	bl	80029e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400
 8000e98:	48000800 	.word	0x48000800

08000e9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e9c:	b5b0      	push	{r4, r5, r7, lr}
 8000e9e:	b092      	sub	sp, #72	@ 0x48
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char msg[] = "Hello World!\n";
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <StartDefaultTask+0x80>)
 8000ea6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eac:	c407      	stmia	r4!, {r0, r1, r2}
 8000eae:	8023      	strh	r3, [r4, #0]
	char msg2[] = "Bye bye world\n";
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <StartDefaultTask+0x84>)
 8000eb2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000eba:	8023      	strh	r3, [r4, #0]
 8000ebc:	3402      	adds	r4, #2
 8000ebe:	0c1b      	lsrs	r3, r3, #16
 8000ec0:	7023      	strb	r3, [r4, #0]
	char msg1[] = "Let's get started ! \n";
 8000ec2:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <StartDefaultTask+0x88>)
 8000ec4:	f107 040c 	add.w	r4, r7, #12
 8000ec8:	461d      	mov	r5, r3
 8000eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ece:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ed2:	6020      	str	r0, [r4, #0]
 8000ed4:	3404      	adds	r4, #4
 8000ed6:	8021      	strh	r1, [r4, #0]
	uint32_t time_out = 100;
 8000ed8:	2364      	movs	r3, #100	@ 0x64
 8000eda:	647b      	str	r3, [r7, #68]	@ 0x44
	HAL_UART_Transmit(&huart1, (const uint8_t*) msg1, strlen(msg1), time_out);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff f97d 	bl	80001e0 <strlen>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	f107 010c 	add.w	r1, r7, #12
 8000eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ef0:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <StartDefaultTask+0x8c>)
 8000ef2:	f004 fe9f 	bl	8005c34 <HAL_UART_Transmit>
  for(;;)
  {
	HAL_UART_Transmit(&huart1, (const uint8_t*) msg, strlen(msg), time_out);
 8000ef6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f970 	bl	80001e0 <strlen>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f0a:	4807      	ldr	r0, [pc, #28]	@ (8000f28 <StartDefaultTask+0x8c>)
 8000f0c:	f004 fe92 	bl	8005c34 <HAL_UART_Transmit>
    osDelay(2000);
 8000f10:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f14:	f005 fffd 	bl	8006f12 <osDelay>
	HAL_UART_Transmit(&huart1, (const uint8_t*) msg, strlen(msg), time_out);
 8000f18:	bf00      	nop
 8000f1a:	e7ec      	b.n	8000ef6 <StartDefaultTask+0x5a>
 8000f1c:	08008580 	.word	0x08008580
 8000f20:	08008590 	.word	0x08008590
 8000f24:	080085a0 	.word	0x080085a0
 8000f28:	200005b8 	.word	0x200005b8

08000f2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f3e:	f000 fd7d 	bl	8001a3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40012c00 	.word	0x40012c00

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_MspInit+0x4c>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	210f      	movs	r1, #15
 8000f96:	f06f 0001 	mvn.w	r0, #1
 8000f9a:	f001 fd09 	bl	80029b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a15      	ldr	r2, [pc, #84]	@ (8001020 <HAL_ADC_MspInit+0x74>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d123      	bne.n	8001016 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <HAL_ADC_MspInit+0x78>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <HAL_ADC_MspInit+0x78>)
 8000fd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_ADC_MspInit+0x78>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_ADC_MspInit+0x78>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <HAL_ADC_MspInit+0x78>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_ADC_MspInit+0x78>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC0     ------> ADC1_IN1
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A2_Pin|ARD_A5_Pin|ARD_A3_Pin;
 8000ffe:	230f      	movs	r3, #15
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001002:	230b      	movs	r3, #11
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <HAL_ADC_MspInit+0x7c>)
 8001012:	f001 fd77 	bl	8002b04 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	@ 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	50040000 	.word	0x50040000
 8001024:	40021000 	.word	0x40021000
 8001028:	48000800 	.word	0x48000800

0800102c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0a4      	sub	sp, #144	@ 0x90
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2268      	movs	r2, #104	@ 0x68
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f007 f981 	bl	8008354 <memset>
  if(hi2c->Instance==I2C1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a21      	ldr	r2, [pc, #132]	@ (80010dc <HAL_I2C_MspInit+0xb0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d13a      	bne.n	80010d2 <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800105c:	2340      	movs	r3, #64	@ 0x40
 800105e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4618      	mov	r0, r3
 800106a:	f003 f933 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001074:	f7ff ff6c 	bl	8000f50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107c:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001084:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001090:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001094:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001096:	2312      	movs	r3, #18
 8001098:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109c:	2301      	movs	r3, #1
 800109e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a8:	2304      	movs	r3, #4
 80010aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010b2:	4619      	mov	r1, r3
 80010b4:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <HAL_I2C_MspInit+0xb8>)
 80010b6:	f001 fd25 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010d2:	bf00      	nop
 80010d4:	3790      	adds	r7, #144	@ 0x90
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40005400 	.word	0x40005400
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000400 	.word	0x48000400

080010e8 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a26      	ldr	r2, [pc, #152]	@ (80011a0 <HAL_QSPI_MspInit+0xb8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d145      	bne.n	8001196 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800110a:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <HAL_QSPI_MspInit+0xbc>)
 800110c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800110e:	4a25      	ldr	r2, [pc, #148]	@ (80011a4 <HAL_QSPI_MspInit+0xbc>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001114:	6513      	str	r3, [r2, #80]	@ 0x50
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <HAL_QSPI_MspInit+0xbc>)
 8001118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800111a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <HAL_QSPI_MspInit+0xbc>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a1f      	ldr	r2, [pc, #124]	@ (80011a4 <HAL_QSPI_MspInit+0xbc>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <HAL_QSPI_MspInit+0xbc>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <HAL_QSPI_MspInit+0xbc>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	4a19      	ldr	r2, [pc, #100]	@ (80011a4 <HAL_QSPI_MspInit+0xbc>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_QSPI_MspInit+0xbc>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    PB11     ------> QUADSPI_BK1_NCS
    PB10     ------> QUADSPI_CLK
    PB0     ------> QUADSPI_BK1_IO1
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001152:	23c0      	movs	r3, #192	@ 0xc0
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001162:	230a      	movs	r3, #10
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001170:	f001 fcc8 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0;
 8001174:	f640 4303 	movw	r3, #3075	@ 0xc03
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001186:	230a      	movs	r3, #10
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_QSPI_MspInit+0xc0>)
 8001192:	f001 fcb7 	bl	8002b04 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	a0001000 	.word	0xa0001000
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400

080011ac <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_RNG_MspInit+0x38>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10b      	bne.n	80011d6 <HAL_RNG_MspInit+0x2a>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_RNG_MspInit+0x3c>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <HAL_RNG_MspInit+0x3c>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <HAL_RNG_MspInit+0x3c>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	50060800 	.word	0x50060800
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b09c      	sub	sp, #112	@ 0x70
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	2268      	movs	r2, #104	@ 0x68
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 f8a9 	bl	8008354 <memset>
  if(hrtc->Instance==RTC)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a0f      	ldr	r2, [pc, #60]	@ (8001244 <HAL_RTC_MspInit+0x58>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d117      	bne.n	800123c <HAL_RTC_MspInit+0x50>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800120c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001216:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4618      	mov	r0, r3
 800121e:	f003 f859 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001228:	f7ff fe92 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_RTC_MspInit+0x5c>)
 800122e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <HAL_RTC_MspInit+0x5c>)
 8001234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001238:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800123c:	bf00      	nop
 800123e:	3770      	adds	r7, #112	@ 0x70
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40002800 	.word	0x40002800
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	@ 0x38
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a4c      	ldr	r2, [pc, #304]	@ (800139c <HAL_SPI_MspInit+0x150>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d146      	bne.n	80012fc <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800126e:	4b4c      	ldr	r3, [pc, #304]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001272:	4a4b      	ldr	r2, [pc, #300]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001274:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001278:	6613      	str	r3, [r2, #96]	@ 0x60
 800127a:	4b49      	ldr	r3, [pc, #292]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b46      	ldr	r3, [pc, #280]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a45      	ldr	r2, [pc, #276]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b40      	ldr	r3, [pc, #256]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	4a3f      	ldr	r2, [pc, #252]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012aa:	4b3d      	ldr	r3, [pc, #244]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 80012b6:	f248 0320 	movw	r3, #32800	@ 0x8020
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012c8:	2305      	movs	r3, #5
 80012ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d6:	f001 fc15 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80012da:	2330      	movs	r3, #48	@ 0x30
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ea:	2305      	movs	r3, #5
 80012ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	482b      	ldr	r0, [pc, #172]	@ (80013a4 <HAL_SPI_MspInit+0x158>)
 80012f6:	f001 fc05 	bl	8002b04 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012fa:	e04a      	b.n	8001392 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a29      	ldr	r2, [pc, #164]	@ (80013a8 <HAL_SPI_MspInit+0x15c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d145      	bne.n	8001392 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001306:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	4a25      	ldr	r2, [pc, #148]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 800130c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001310:	6593      	str	r3, [r2, #88]	@ 0x58
 8001312:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	4a1f      	ldr	r2, [pc, #124]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132a:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_SPI_MspInit+0x154>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST33_MOSI_Pin|ST33_MISO_Pin|ST33_SCK_Pin;
 800134e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001360:	2306      	movs	r3, #6
 8001362:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	4810      	ldr	r0, [pc, #64]	@ (80013ac <HAL_SPI_MspInit+0x160>)
 800136c:	f001 fbca 	bl	8002b04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ST33_CS_Pin;
 8001370:	2310      	movs	r3, #16
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001380:	2306      	movs	r3, #6
 8001382:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ST33_CS_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f001 fbb9 	bl	8002b04 <HAL_GPIO_Init>
}
 8001392:	bf00      	nop
 8001394:	3738      	adds	r7, #56	@ 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40013000 	.word	0x40013000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000400 	.word	0x48000400
 80013a8:	40003c00 	.word	0x40003c00
 80013ac:	48000800 	.word	0x48000800

080013b0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c0:	d10c      	bne.n	80013dc <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_TIM_PWM_MspInit+0x5c>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	4a11      	ldr	r2, [pc, #68]	@ (800140c <HAL_TIM_PWM_MspInit+0x5c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_TIM_PWM_MspInit+0x5c>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013da:	e010      	b.n	80013fe <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <HAL_TIM_PWM_MspInit+0x60>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10b      	bne.n	80013fe <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_TIM_PWM_MspInit+0x5c>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ea:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_TIM_PWM_MspInit+0x5c>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_TIM_PWM_MspInit+0x5c>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40000400 	.word	0x40000400

08001414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001434:	d11c      	bne.n	8001470 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <HAL_TIM_MspPostInit+0xa8>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a20      	ldr	r2, [pc, #128]	@ (80014bc <HAL_TIM_MspPostInit+0xa8>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_TIM_MspPostInit+0xa8>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 800144e:	2308      	movs	r3, #8
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800145e:	2301      	movs	r3, #1
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4815      	ldr	r0, [pc, #84]	@ (80014c0 <HAL_TIM_MspPostInit+0xac>)
 800146a:	f001 fb4b 	bl	8002b04 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800146e:	e021      	b.n	80014b4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <HAL_TIM_MspPostInit+0xb0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11c      	bne.n	80014b4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <HAL_TIM_MspPostInit+0xa8>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a0f      	ldr	r2, [pc, #60]	@ (80014bc <HAL_TIM_MspPostInit+0xa8>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <HAL_TIM_MspPostInit+0xa8>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014a4:	2302      	movs	r3, #2
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	@ (80014c8 <HAL_TIM_MspPostInit+0xb4>)
 80014b0:	f001 fb28 	bl	8002b04 <HAL_GPIO_Init>
}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	@ 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000400 	.word	0x48000400
 80014c4:	40000400 	.word	0x40000400
 80014c8:	48000800 	.word	0x48000800

080014cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0aa      	sub	sp, #168	@ 0xa8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014e8:	2268      	movs	r2, #104	@ 0x68
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f006 ff31 	bl	8008354 <memset>
  if(huart->Instance==USART1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a91      	ldr	r2, [pc, #580]	@ (800173c <HAL_UART_MspInit+0x270>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d145      	bne.n	8001588 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001500:	2300      	movs	r3, #0
 8001502:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001504:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001508:	4618      	mov	r0, r3
 800150a:	f002 fee3 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001514:	f7ff fd1c 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001518:	4b89      	ldr	r3, [pc, #548]	@ (8001740 <HAL_UART_MspInit+0x274>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151c:	4a88      	ldr	r2, [pc, #544]	@ (8001740 <HAL_UART_MspInit+0x274>)
 800151e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001522:	6613      	str	r3, [r2, #96]	@ 0x60
 8001524:	4b86      	ldr	r3, [pc, #536]	@ (8001740 <HAL_UART_MspInit+0x274>)
 8001526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800152e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b83      	ldr	r3, [pc, #524]	@ (8001740 <HAL_UART_MspInit+0x274>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001534:	4a82      	ldr	r2, [pc, #520]	@ (8001740 <HAL_UART_MspInit+0x274>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153c:	4b80      	ldr	r3, [pc, #512]	@ (8001740 <HAL_UART_MspInit+0x274>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D2_Pin|ARD_D8_Pin;
 8001548:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800154c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001562:	2307      	movs	r3, #7
 8001564:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001572:	f001 fac7 	bl	8002b04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2105      	movs	r1, #5
 800157a:	2025      	movs	r0, #37	@ 0x25
 800157c:	f001 fa18 	bl	80029b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001580:	2025      	movs	r0, #37	@ 0x25
 8001582:	f001 fa31 	bl	80029e8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001586:	e0d5      	b.n	8001734 <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a6d      	ldr	r2, [pc, #436]	@ (8001744 <HAL_UART_MspInit+0x278>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d144      	bne.n	800161c <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001592:	2302      	movs	r3, #2
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001596:	2300      	movs	r3, #0
 8001598:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fe98 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80015aa:	f7ff fcd1 	bl	8000f50 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ae:	4b64      	ldr	r3, [pc, #400]	@ (8001740 <HAL_UART_MspInit+0x274>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	4a63      	ldr	r2, [pc, #396]	@ (8001740 <HAL_UART_MspInit+0x274>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ba:	4b61      	ldr	r3, [pc, #388]	@ (8001740 <HAL_UART_MspInit+0x274>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001740 <HAL_UART_MspInit+0x274>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a5d      	ldr	r2, [pc, #372]	@ (8001740 <HAL_UART_MspInit+0x274>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001740 <HAL_UART_MspInit+0x274>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_D0_Pin|ARD_D1_Pin|ARD_A0_Pin;
 80015de:	230f      	movs	r3, #15
 80015e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f6:	2307      	movs	r3, #7
 80015f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001606:	f001 fa7d 	bl	8002b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2105      	movs	r1, #5
 800160e:	2026      	movs	r0, #38	@ 0x26
 8001610:	f001 f9ce 	bl	80029b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001614:	2026      	movs	r0, #38	@ 0x26
 8001616:	f001 f9e7 	bl	80029e8 <HAL_NVIC_EnableIRQ>
}
 800161a:	e08b      	b.n	8001734 <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a49      	ldr	r2, [pc, #292]	@ (8001748 <HAL_UART_MspInit+0x27c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	f040 8086 	bne.w	8001734 <HAL_UART_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001628:	2304      	movs	r3, #4
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001630:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001634:	4618      	mov	r0, r3
 8001636:	f002 fe4d 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8001640:	f7ff fc86 	bl	8000f50 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001644:	4b3e      	ldr	r3, [pc, #248]	@ (8001740 <HAL_UART_MspInit+0x274>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	4a3d      	ldr	r2, [pc, #244]	@ (8001740 <HAL_UART_MspInit+0x274>)
 800164a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001650:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <HAL_UART_MspInit+0x274>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <HAL_UART_MspInit+0x274>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	4a37      	ldr	r2, [pc, #220]	@ (8001740 <HAL_UART_MspInit+0x274>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001668:	4b35      	ldr	r3, [pc, #212]	@ (8001740 <HAL_UART_MspInit+0x274>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001674:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <HAL_UART_MspInit+0x274>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001678:	4a31      	ldr	r2, [pc, #196]	@ (8001740 <HAL_UART_MspInit+0x274>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001680:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <HAL_UART_MspInit+0x274>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <HAL_UART_MspInit+0x274>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001690:	4a2b      	ldr	r2, [pc, #172]	@ (8001740 <HAL_UART_MspInit+0x274>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001698:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <HAL_UART_MspInit+0x274>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MDM_UART_RTS_Pin;
 80016a4:	2304      	movs	r3, #4
 80016a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016bc:	2307      	movs	r3, #7
 80016be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(MDM_UART_RTS_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80016c6:	4619      	mov	r1, r3
 80016c8:	4820      	ldr	r0, [pc, #128]	@ (800174c <HAL_UART_MspInit+0x280>)
 80016ca:	f001 fa1b 	bl	8002b04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MDM_UART_TX_Pin|MDM_UART_RX_Pin;
 80016ce:	2330      	movs	r3, #48	@ 0x30
 80016d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e6:	2307      	movs	r3, #7
 80016e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80016f0:	4619      	mov	r1, r3
 80016f2:	4817      	ldr	r0, [pc, #92]	@ (8001750 <HAL_UART_MspInit+0x284>)
 80016f4:	f001 fa06 	bl	8002b04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MDM_UART_CTS_Pin;
 80016f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001712:	2307      	movs	r3, #7
 8001714:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(MDM_UART_CTS_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800171c:	4619      	mov	r1, r3
 800171e:	480d      	ldr	r0, [pc, #52]	@ (8001754 <HAL_UART_MspInit+0x288>)
 8001720:	f001 f9f0 	bl	8002b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2105      	movs	r1, #5
 8001728:	2027      	movs	r0, #39	@ 0x27
 800172a:	f001 f941 	bl	80029b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800172e:	2027      	movs	r0, #39	@ 0x27
 8001730:	f001 f95a 	bl	80029e8 <HAL_NVIC_EnableIRQ>
}
 8001734:	bf00      	nop
 8001736:	37a8      	adds	r7, #168	@ 0xa8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40013800 	.word	0x40013800
 8001740:	40021000 	.word	0x40021000
 8001744:	40004400 	.word	0x40004400
 8001748:	40004800 	.word	0x40004800
 800174c:	48000c00 	.word	0x48000c00
 8001750:	48000800 	.word	0x48000800
 8001754:	48000400 	.word	0x48000400

08001758 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a26      	ldr	r2, [pc, #152]	@ (8001810 <HAL_PCD_MspInit+0xb8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d146      	bne.n	8001808 <HAL_PCD_MspInit+0xb0>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	4a25      	ldr	r2, [pc, #148]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001786:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001792:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 80017a4:	230a      	movs	r3, #10
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b2:	f001 f9a7 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 80017bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d114      	bne.n	8001804 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017de:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80017f2:	f001 fdff 	bl	80033f4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <HAL_PCD_MspInit+0xbc>)
 80017fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001800:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_MspInit 1 */

  }

}
 8001802:	e001      	b.n	8001808 <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8001804:	f001 fdf6 	bl	80033f4 <HAL_PWREx_EnableVddUSB>
}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	@ 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40006800 	.word	0x40006800
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	@ 0x30
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001826:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <HAL_InitTick+0xc8>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182a:	4a2d      	ldr	r2, [pc, #180]	@ (80018e0 <HAL_InitTick+0xc8>)
 800182c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001830:	6613      	str	r3, [r2, #96]	@ 0x60
 8001832:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <HAL_InitTick+0xc8>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800183e:	f107 020c 	add.w	r2, r7, #12
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f002 fcb1 	bl	80041b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800184e:	f002 fc99 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 8001852:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001856:	4a23      	ldr	r2, [pc, #140]	@ (80018e4 <HAL_InitTick+0xcc>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	0c9b      	lsrs	r3, r3, #18
 800185e:	3b01      	subs	r3, #1
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <HAL_InitTick+0xd0>)
 8001864:	4a21      	ldr	r2, [pc, #132]	@ (80018ec <HAL_InitTick+0xd4>)
 8001866:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001868:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <HAL_InitTick+0xd0>)
 800186a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800186e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001870:	4a1d      	ldr	r2, [pc, #116]	@ (80018e8 <HAL_InitTick+0xd0>)
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001876:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <HAL_InitTick+0xd0>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_InitTick+0xd0>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_InitTick+0xd0>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001888:	4817      	ldr	r0, [pc, #92]	@ (80018e8 <HAL_InitTick+0xd0>)
 800188a:	f003 faaa 	bl	8004de2 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001894:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001898:	2b00      	cmp	r3, #0
 800189a:	d11b      	bne.n	80018d4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800189c:	4812      	ldr	r0, [pc, #72]	@ (80018e8 <HAL_InitTick+0xd0>)
 800189e:	f003 fb01 	bl	8004ea4 <HAL_TIM_Base_Start_IT>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80018a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d111      	bne.n	80018d4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018b0:	2019      	movs	r0, #25
 80018b2:	f001 f899 	bl	80029e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d808      	bhi.n	80018ce <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	2019      	movs	r0, #25
 80018c2:	f001 f875 	bl	80029b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c6:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <HAL_InitTick+0xd8>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e002      	b.n	80018d4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3730      	adds	r7, #48	@ 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	20000a34 	.word	0x20000a34
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	20000004 	.word	0x20000004

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <NMI_Handler+0x4>

080018fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <MemManage_Handler+0x4>

0800190c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <UsageFault_Handler+0x4>

0800191c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001932:	f003 fb6a 	bl	800500a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000a34 	.word	0x20000a34

08001940 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <USART1_IRQHandler+0x10>)
 8001946:	f004 f9ff 	bl	8005d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200005b8 	.word	0x200005b8

08001954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <USART2_IRQHandler+0x10>)
 800195a:	f004 f9f5 	bl	8005d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000640 	.word	0x20000640

08001968 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <USART3_IRQHandler+0x10>)
 800196e:	f004 f9eb 	bl	8005d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200006c8 	.word	0x200006c8

0800197c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MDM_RING_Pin);
 8001980:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001984:	f001 fa50 	bl	8002e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001988:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800198c:	f001 fa4c 	bl	8002e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019bc:	f7ff ffea 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c0:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019c2:	490d      	ldr	r1, [pc, #52]	@ (80019f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c4:	4a0d      	ldr	r2, [pc, #52]	@ (80019fc <LoopForever+0xe>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a04 <LoopForever+0x16>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e6:	f006 fd1b 	bl	8008420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ea:	f7fe fdb1 	bl	8000550 <main>

080019ee <LoopForever>:

LoopForever:
    b LoopForever
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019f0:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80019fc:	08008618 	.word	0x08008618
  ldr r2, =_sbss
 8001a00:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a04:	200018d0 	.word	0x200018d0

08001a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_IRQHandler>

08001a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 ffc0 	bl	800299a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fefc 	bl	8001818 <HAL_InitTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e001      	b.n	8001a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a2c:	f7ff fa96 	bl	8000f5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	20000a80 	.word	0x20000a80

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000a80 	.word	0x20000a80

08001a7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	609a      	str	r2, [r3, #8]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	609a      	str	r2, [r3, #8]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3360      	adds	r3, #96	@ 0x60
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <LL_ADC_SetOffset+0x44>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	4313      	orrs	r3, r2
 8001b14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	03fff000 	.word	0x03fff000

08001b2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3360      	adds	r3, #96	@ 0x60
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3360      	adds	r3, #96	@ 0x60
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	615a      	str	r2, [r3, #20]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3330      	adds	r3, #48	@ 0x30
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	4413      	add	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	211f      	movs	r1, #31
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	401a      	ands	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0e9b      	lsrs	r3, r3, #26
 8001bec:	f003 011f 	and.w	r1, r3, #31
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c00:	bf00      	nop
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3314      	adds	r3, #20
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	0e5b      	lsrs	r3, r3, #25
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	0d1b      	lsrs	r3, r3, #20
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2107      	movs	r1, #7
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	401a      	ands	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	0d1b      	lsrs	r3, r3, #20
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c56:	bf00      	nop
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	401a      	ands	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0318 	and.w	r3, r3, #24
 8001c86:	4908      	ldr	r1, [pc, #32]	@ (8001ca8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c88:	40d9      	lsrs	r1, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	431a      	orrs	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	0007ffff 	.word	0x0007ffff

08001cac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6093      	str	r3, [r2, #8]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ce4:	d101      	bne.n	8001cea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_IsEnabled+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_IsEnabled+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d101      	bne.n	8001d86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d101      	bne.n	8001dac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e129      	b.n	800202a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff f8e1 	bl	8000fac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff67 	bl	8001cd0 <LL_ADC_IsDeepPowerDownEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff4d 	bl	8001cac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff82 	bl	8001d20 <LL_ADC_IsInternalRegulatorEnabled>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d115      	bne.n	8001e4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff66 	bl	8001cf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2c:	4b81      	ldr	r3, [pc, #516]	@ (8002034 <HAL_ADC_Init+0x278>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	4a81      	ldr	r2, [pc, #516]	@ (8002038 <HAL_ADC_Init+0x27c>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e40:	e002      	b.n	8001e48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f9      	bne.n	8001e42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff64 	bl	8001d20 <LL_ADC_IsInternalRegulatorEnabled>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	f043 0210 	orr.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff75 	bl	8001d6e <LL_ADC_REG_IsConversionOngoing>
 8001e84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 80c2 	bne.w	8002018 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80be 	bne.w	8002018 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ea4:	f043 0202 	orr.w	r2, r3, #2
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff49 	bl	8001d48 <LL_ADC_IsEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10b      	bne.n	8001ed4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ebc:	485f      	ldr	r0, [pc, #380]	@ (800203c <HAL_ADC_Init+0x280>)
 8001ebe:	f7ff ff43 	bl	8001d48 <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	485c      	ldr	r0, [pc, #368]	@ (8002040 <HAL_ADC_Init+0x284>)
 8001ed0:	f7ff fdd4 	bl	8001a7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7e5b      	ldrb	r3, [r3, #25]
 8001ed8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ede:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ee4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001eea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d106      	bne.n	8001f10 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	3b01      	subs	r3, #1
 8001f08:	045b      	lsls	r3, r3, #17
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d009      	beq.n	8001f2c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b44      	ldr	r3, [pc, #272]	@ (8002044 <HAL_ADC_Init+0x288>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff25 	bl	8001d94 <LL_ADC_INJ_IsConversionOngoing>
 8001f4a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d140      	bne.n	8001fd4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d13d      	bne.n	8001fd4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
 8001f60:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f62:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f6a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f7a:	f023 0306 	bic.w	r3, r3, #6
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	69b9      	ldr	r1, [r7, #24]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d118      	bne.n	8001fc4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fa8:	4311      	orrs	r1, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fae:	4311      	orrs	r1, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	611a      	str	r2, [r3, #16]
 8001fc2:	e007      	b.n	8001fd4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d10c      	bne.n	8001ff6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f023 010f 	bic.w	r1, r3, #15
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	1e5a      	subs	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ff4:	e007      	b.n	8002006 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 020f 	bic.w	r2, r2, #15
 8002004:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	659a      	str	r2, [r3, #88]	@ 0x58
 8002016:	e007      	b.n	8002028 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	f043 0210 	orr.w	r2, r3, #16
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002028:	7ffb      	ldrb	r3, [r7, #31]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000000 	.word	0x20000000
 8002038:	053e2d63 	.word	0x053e2d63
 800203c:	50040000 	.word	0x50040000
 8002040:	50040300 	.word	0x50040300
 8002044:	fff0c007 	.word	0xfff0c007

08002048 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0b6      	sub	sp, #216	@ 0xd8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ADC_ConfigChannel+0x22>
 8002066:	2302      	movs	r3, #2
 8002068:	e3d5      	b.n	8002816 <HAL_ADC_ConfigChannel+0x7ce>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fe79 	bl	8001d6e <LL_ADC_REG_IsConversionOngoing>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 83ba 	bne.w	80027f8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d824      	bhi.n	80020de <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	3b02      	subs	r3, #2
 800209a:	2b03      	cmp	r3, #3
 800209c:	d81b      	bhi.n	80020d6 <HAL_ADC_ConfigChannel+0x8e>
 800209e:	a201      	add	r2, pc, #4	@ (adr r2, 80020a4 <HAL_ADC_ConfigChannel+0x5c>)
 80020a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a4:	080020b5 	.word	0x080020b5
 80020a8:	080020bd 	.word	0x080020bd
 80020ac:	080020c5 	.word	0x080020c5
 80020b0:	080020cd 	.word	0x080020cd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020b4:	230c      	movs	r3, #12
 80020b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020ba:	e010      	b.n	80020de <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020bc:	2312      	movs	r3, #18
 80020be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020c2:	e00c      	b.n	80020de <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80020c4:	2318      	movs	r3, #24
 80020c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020ca:	e008      	b.n	80020de <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80020cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020d4:	e003      	b.n	80020de <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80020d6:	2306      	movs	r3, #6
 80020d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020dc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80020ec:	f7ff fd62 	bl	8001bb4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fe3a 	bl	8001d6e <LL_ADC_REG_IsConversionOngoing>
 80020fa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fe46 	bl	8001d94 <LL_ADC_INJ_IsConversionOngoing>
 8002108:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800210c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 81bf 	bne.w	8002494 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 81ba 	bne.w	8002494 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002128:	d10f      	bne.n	800214a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	f7ff fd69 	bl	8001c0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fd23 	bl	8001b8e <LL_ADC_SetSamplingTimeCommonConfig>
 8002148:	e00e      	b.n	8002168 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	461a      	mov	r2, r3
 8002158:	f7ff fd58 	bl	8001c0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fd13 	bl	8001b8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00a      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800219a:	f7ff fca3 	bl	8001ae4 <LL_ADC_SetOffset>
 800219e:	e179      	b.n	8002494 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fcc0 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x184>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fcb5 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	e01e      	b.n	800220a <HAL_ADC_ConfigChannel+0x1c2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fcaa 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e004      	b.n	8002208 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80021fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x1da>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	e018      	b.n	8002254 <HAL_ADC_ConfigChannel+0x20c>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800223a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800223e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e004      	b.n	8002254 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800224a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002254:	429a      	cmp	r2, r3
 8002256:	d106      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fc79 	bl	8001b58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fc5d 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x24a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fc52 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	e01e      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x288>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fc47 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80022b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80022b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e004      	b.n	80022ce <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80022c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x2a0>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	e018      	b.n	800231a <HAL_ADC_ConfigChannel+0x2d2>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80022fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002304:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e004      	b.n	800231a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800231a:	429a      	cmp	r2, r3
 800231c:	d106      	bne.n	800232c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fc16 	bl	8001b58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2102      	movs	r1, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fbfa 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x310>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2102      	movs	r1, #2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fbef 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	e01e      	b.n	8002396 <HAL_ADC_ConfigChannel+0x34e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2102      	movs	r1, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fbe4 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002376:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800237a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800237e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e004      	b.n	8002394 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800238a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x366>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0e9b      	lsrs	r3, r3, #26
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	e014      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x390>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80023bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80023c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e004      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80023ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023d8:	429a      	cmp	r2, r3
 80023da:	d106      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fbb7 	bl	8001b58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2103      	movs	r1, #3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fb9b 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x3ce>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2103      	movs	r1, #3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fb90 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	e017      	b.n	8002446 <HAL_ADC_ConfigChannel+0x3fe>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2103      	movs	r1, #3
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fb85 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800242e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002430:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e003      	b.n	8002444 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800243c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <HAL_ADC_ConfigChannel+0x416>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0e9b      	lsrs	r3, r3, #26
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	e011      	b.n	8002482 <HAL_ADC_ConfigChannel+0x43a>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800246c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800246e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e003      	b.n	8002482 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800247a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002482:	429a      	cmp	r2, r3
 8002484:	d106      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	2103      	movs	r1, #3
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fb62 	bl	8001b58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fc55 	bl	8001d48 <LL_ADC_IsEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 813f 	bne.w	8002724 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f7ff fbd6 	bl	8001c64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a8e      	ldr	r2, [pc, #568]	@ (80026f8 <HAL_ADC_ConfigChannel+0x6b0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	f040 8130 	bne.w	8002724 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x4a4>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	bf94      	ite	ls
 80024e4:	2301      	movls	r3, #1
 80024e6:	2300      	movhi	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e019      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4d8>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80024fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80024fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e003      	b.n	8002510 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3301      	adds	r3, #1
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2b09      	cmp	r3, #9
 8002518:	bf94      	ite	ls
 800251a:	2301      	movls	r3, #1
 800251c:	2300      	movhi	r3, #0
 800251e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002520:	2b00      	cmp	r3, #0
 8002522:	d079      	beq.n	8002618 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x4f8>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	3301      	adds	r3, #1
 8002538:	069b      	lsls	r3, r3, #26
 800253a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800253e:	e015      	b.n	800256c <HAL_ADC_ConfigChannel+0x524>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800254e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002550:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002558:	2320      	movs	r3, #32
 800255a:	e003      	b.n	8002564 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800255c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	069b      	lsls	r3, r3, #26
 8002568:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_ADC_ConfigChannel+0x544>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	3301      	adds	r3, #1
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	e017      	b.n	80025bc <HAL_ADC_ConfigChannel+0x574>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800259a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800259e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80025a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	ea42 0103 	orr.w	r1, r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x59a>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	3301      	adds	r3, #1
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	051b      	lsls	r3, r3, #20
 80025e0:	e018      	b.n	8002614 <HAL_ADC_ConfigChannel+0x5cc>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80025f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80025f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80025fa:	2320      	movs	r3, #32
 80025fc:	e003      	b.n	8002606 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80025fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002614:	430b      	orrs	r3, r1
 8002616:	e080      	b.n	800271a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x5ec>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	3301      	adds	r3, #1
 800262c:	069b      	lsls	r3, r3, #26
 800262e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002632:	e015      	b.n	8002660 <HAL_ADC_ConfigChannel+0x618>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	069b      	lsls	r3, r3, #26
 800265c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x638>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	e017      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x668>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	61bb      	str	r3, [r7, #24]
  return result;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e003      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	ea42 0103 	orr.w	r1, r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10d      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x694>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	3b1e      	subs	r3, #30
 80026d4:	051b      	lsls	r3, r3, #20
 80026d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026da:	e01d      	b.n	8002718 <HAL_ADC_ConfigChannel+0x6d0>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	60fb      	str	r3, [r7, #12]
  return result;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e005      	b.n	8002704 <HAL_ADC_ConfigChannel+0x6bc>
 80026f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f003 021f 	and.w	r2, r3, #31
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	3b1e      	subs	r3, #30
 8002712:	051b      	lsls	r3, r3, #20
 8002714:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002718:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271e:	4619      	mov	r1, r3
 8002720:	f7ff fa74 	bl	8001c0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b3d      	ldr	r3, [pc, #244]	@ (8002820 <HAL_ADC_ConfigChannel+0x7d8>)
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d06c      	beq.n	800280a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002730:	483c      	ldr	r0, [pc, #240]	@ (8002824 <HAL_ADC_ConfigChannel+0x7dc>)
 8002732:	f7ff f9c9 	bl	8001ac8 <LL_ADC_GetCommonPathInternalCh>
 8002736:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a3a      	ldr	r2, [pc, #232]	@ (8002828 <HAL_ADC_ConfigChannel+0x7e0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d127      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d121      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a35      	ldr	r2, [pc, #212]	@ (800282c <HAL_ADC_ConfigChannel+0x7e4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d157      	bne.n	800280a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800275a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800275e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002762:	4619      	mov	r1, r3
 8002764:	482f      	ldr	r0, [pc, #188]	@ (8002824 <HAL_ADC_ConfigChannel+0x7dc>)
 8002766:	f7ff f99c 	bl	8001aa2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800276a:	4b31      	ldr	r3, [pc, #196]	@ (8002830 <HAL_ADC_ConfigChannel+0x7e8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	099b      	lsrs	r3, r3, #6
 8002770:	4a30      	ldr	r2, [pc, #192]	@ (8002834 <HAL_ADC_ConfigChannel+0x7ec>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002784:	e002      	b.n	800278c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3b01      	subs	r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f9      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002792:	e03a      	b.n	800280a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a27      	ldr	r2, [pc, #156]	@ (8002838 <HAL_ADC_ConfigChannel+0x7f0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d113      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800279e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1f      	ldr	r2, [pc, #124]	@ (800282c <HAL_ADC_ConfigChannel+0x7e4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d12a      	bne.n	800280a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027bc:	4619      	mov	r1, r3
 80027be:	4819      	ldr	r0, [pc, #100]	@ (8002824 <HAL_ADC_ConfigChannel+0x7dc>)
 80027c0:	f7ff f96f 	bl	8001aa2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c4:	e021      	b.n	800280a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1c      	ldr	r2, [pc, #112]	@ (800283c <HAL_ADC_ConfigChannel+0x7f4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d11c      	bne.n	800280a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d116      	bne.n	800280a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a12      	ldr	r2, [pc, #72]	@ (800282c <HAL_ADC_ConfigChannel+0x7e4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d111      	bne.n	800280a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027ee:	4619      	mov	r1, r3
 80027f0:	480c      	ldr	r0, [pc, #48]	@ (8002824 <HAL_ADC_ConfigChannel+0x7dc>)
 80027f2:	f7ff f956 	bl	8001aa2 <LL_ADC_SetCommonPathInternalCh>
 80027f6:	e008      	b.n	800280a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002812:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002816:	4618      	mov	r0, r3
 8002818:	37d8      	adds	r7, #216	@ 0xd8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	80080000 	.word	0x80080000
 8002824:	50040300 	.word	0x50040300
 8002828:	c7520000 	.word	0xc7520000
 800282c:	50040000 	.word	0x50040000
 8002830:	20000000 	.word	0x20000000
 8002834:	053e2d63 	.word	0x053e2d63
 8002838:	cb840000 	.word	0xcb840000
 800283c:	80000001 	.word	0x80000001

08002840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002850:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800288c:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db0b      	blt.n	80028ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	4907      	ldr	r1, [pc, #28]	@ (80028dc <__NVIC_EnableIRQ+0x38>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2001      	movs	r0, #1
 80028c6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	db0a      	blt.n	800290a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	490c      	ldr	r1, [pc, #48]	@ (800292c <__NVIC_SetPriority+0x4c>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	0112      	lsls	r2, r2, #4
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	440b      	add	r3, r1
 8002904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002908:	e00a      	b.n	8002920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4908      	ldr	r1, [pc, #32]	@ (8002930 <__NVIC_SetPriority+0x50>)
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3b04      	subs	r3, #4
 8002918:	0112      	lsls	r2, r2, #4
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	440b      	add	r3, r1
 800291e:	761a      	strb	r2, [r3, #24]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000e100 	.word	0xe000e100
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	@ 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f1c3 0307 	rsb	r3, r3, #7
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf28      	it	cs
 8002952:	2304      	movcs	r3, #4
 8002954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3304      	adds	r3, #4
 800295a:	2b06      	cmp	r3, #6
 800295c:	d902      	bls.n	8002964 <NVIC_EncodePriority+0x30>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3b03      	subs	r3, #3
 8002962:	e000      	b.n	8002966 <NVIC_EncodePriority+0x32>
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	401a      	ands	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800297c:	f04f 31ff 	mov.w	r1, #4294967295
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43d9      	mvns	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	4313      	orrs	r3, r2
         );
}
 800298e:	4618      	mov	r0, r3
 8002990:	3724      	adds	r7, #36	@ 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff4c 	bl	8002840 <__NVIC_SetPriorityGrouping>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029c2:	f7ff ff61 	bl	8002888 <__NVIC_GetPriorityGrouping>
 80029c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	6978      	ldr	r0, [r7, #20]
 80029ce:	f7ff ffb1 	bl	8002934 <NVIC_EncodePriority>
 80029d2:	4602      	mov	r2, r0
 80029d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff80 	bl	80028e0 <__NVIC_SetPriority>
}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff54 	bl	80028a4 <__NVIC_EnableIRQ>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d008      	beq.n	8002a2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e022      	b.n	8002a74 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 020e 	bic.w	r2, r2, #14
 8002a3c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f003 021c 	and.w	r2, r3, #28
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d005      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e029      	b.n	8002af8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 020e 	bic.w	r2, r2, #14
 8002ab2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	f003 021c 	and.w	r2, r3, #28
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
    }
  }
  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b12:	e154      	b.n	8002dbe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8146 	beq.w	8002db8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d005      	beq.n	8002b44 <HAL_GPIO_Init+0x40>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d130      	bne.n	8002ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 0201 	and.w	r2, r3, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d017      	beq.n	8002be2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d123      	bne.n	8002c36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	6939      	ldr	r1, [r7, #16]
 8002c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	2203      	movs	r2, #3
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80a0 	beq.w	8002db8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c78:	4b58      	ldr	r3, [pc, #352]	@ (8002ddc <HAL_GPIO_Init+0x2d8>)
 8002c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7c:	4a57      	ldr	r2, [pc, #348]	@ (8002ddc <HAL_GPIO_Init+0x2d8>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c84:	4b55      	ldr	r3, [pc, #340]	@ (8002ddc <HAL_GPIO_Init+0x2d8>)
 8002c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c90:	4a53      	ldr	r2, [pc, #332]	@ (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3302      	adds	r3, #2
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cba:	d019      	beq.n	8002cf0 <HAL_GPIO_Init+0x1ec>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a49      	ldr	r2, [pc, #292]	@ (8002de4 <HAL_GPIO_Init+0x2e0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <HAL_GPIO_Init+0x1e8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a48      	ldr	r2, [pc, #288]	@ (8002de8 <HAL_GPIO_Init+0x2e4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00d      	beq.n	8002ce8 <HAL_GPIO_Init+0x1e4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a47      	ldr	r2, [pc, #284]	@ (8002dec <HAL_GPIO_Init+0x2e8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <HAL_GPIO_Init+0x1e0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a46      	ldr	r2, [pc, #280]	@ (8002df0 <HAL_GPIO_Init+0x2ec>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d101      	bne.n	8002ce0 <HAL_GPIO_Init+0x1dc>
 8002cdc:	2304      	movs	r3, #4
 8002cde:	e008      	b.n	8002cf2 <HAL_GPIO_Init+0x1ee>
 8002ce0:	2307      	movs	r3, #7
 8002ce2:	e006      	b.n	8002cf2 <HAL_GPIO_Init+0x1ee>
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e004      	b.n	8002cf2 <HAL_GPIO_Init+0x1ee>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e002      	b.n	8002cf2 <HAL_GPIO_Init+0x1ee>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_GPIO_Init+0x1ee>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	f002 0203 	and.w	r2, r2, #3
 8002cf8:	0092      	lsls	r2, r2, #2
 8002cfa:	4093      	lsls	r3, r2
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d02:	4937      	ldr	r1, [pc, #220]	@ (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d10:	4b38      	ldr	r3, [pc, #224]	@ (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d34:	4a2f      	ldr	r2, [pc, #188]	@ (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d5e:	4a25      	ldr	r2, [pc, #148]	@ (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d64:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d88:	4a1a      	ldr	r2, [pc, #104]	@ (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d8e:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002db2:	4a10      	ldr	r2, [pc, #64]	@ (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f47f aea3 	bne.w	8002b14 <HAL_GPIO_Init+0x10>
  }
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010000 	.word	0x40010000
 8002de4:	48000400 	.word	0x48000400
 8002de8:	48000800 	.word	0x48000800
 8002dec:	48000c00 	.word	0x48000c00
 8002df0:	48001000 	.word	0x48001000
 8002df4:	40010400 	.word	0x40010400

08002df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
 8002e04:	4613      	mov	r3, r2
 8002e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e14:	e002      	b.n	8002e1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e3e:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fbc0 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40010400 	.word	0x40010400

08002e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e08d      	b.n	8002f86 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe f8d4 	bl	800102c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	@ 0x24
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ea8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d107      	bne.n	8002ed2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	e006      	b.n	8002ee0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ede:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d108      	bne.n	8002efa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	e007      	b.n	8002f0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69d9      	ldr	r1, [r3, #28]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d138      	bne.n	8003016 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e032      	b.n	8003018 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2224      	movs	r2, #36	@ 0x24
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	d139      	bne.n	80030ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003044:	2302      	movs	r3, #2
 8003046:	e033      	b.n	80030b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	@ 0x24
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003076:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0ef      	b.n	80032ae <HAL_PCD_Init+0x1f2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fb38 	bl	8001758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2203      	movs	r2, #3
 80030ec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fe43 	bl	8006d86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310a:	f003 fe2e 	bl	8006d6a <USB_CoreInit>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0c6      	b.n	80032ae <HAL_PCD_Init+0x1f2>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fe48 	bl	8006dbc <USB_SetCurrentMode>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0b7      	b.n	80032ae <HAL_PCD_Init+0x1f2>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e03e      	b.n	80031c2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	3311      	adds	r3, #17
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	3310      	adds	r3, #16
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	3313      	adds	r3, #19
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	3320      	adds	r3, #32
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	3324      	adds	r3, #36	@ 0x24
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	3301      	adds	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	791b      	ldrb	r3, [r3, #4]
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d3bb      	bcc.n	8003144 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	e044      	b.n	800325c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	3301      	adds	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	791b      	ldrb	r3, [r3, #4]
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	429a      	cmp	r2, r3
 8003264:	d3b5      	bcc.n	80031d2 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003270:	f003 fdb1 	bl	8006dd6 <USB_DevInit>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e013      	b.n	80032ae <HAL_PCD_Init+0x1f2>
  }

  hpcd->USB_Address = 0U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7adb      	ldrb	r3, [r3, #11]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d102      	bne.n	80032a2 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f80a 	bl	80032b6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f003 fdb3 	bl	8006e12 <USB_DevDisconnect>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a04      	ldr	r2, [pc, #16]	@ (8003328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331a:	6013      	str	r3, [r2, #0]
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000

0800332c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003330:	4b04      	ldr	r3, [pc, #16]	@ (8003344 <HAL_PWREx_GetVoltageRange+0x18>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40007000 	.word	0x40007000

08003348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003356:	d130      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003358:	4b23      	ldr	r3, [pc, #140]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003364:	d038      	beq.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003366:	4b20      	ldr	r3, [pc, #128]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800336e:	4a1e      	ldr	r2, [pc, #120]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003370:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003374:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003376:	4b1d      	ldr	r3, [pc, #116]	@ (80033ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2232      	movs	r2, #50	@ 0x32
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	4a1b      	ldr	r2, [pc, #108]	@ (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	0c9b      	lsrs	r3, r3, #18
 8003388:	3301      	adds	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800338c:	e002      	b.n	8003394 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3b01      	subs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003394:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a0:	d102      	bne.n	80033a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f2      	bne.n	800338e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a8:	4b0f      	ldr	r3, [pc, #60]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b4:	d110      	bne.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e00f      	b.n	80033da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	d007      	beq.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033c8:	4b07      	ldr	r3, [pc, #28]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033d0:	4a05      	ldr	r2, [pc, #20]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40007000 	.word	0x40007000
 80033ec:	20000000 	.word	0x20000000
 80033f0:	431bde83 	.word	0x431bde83

080033f4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a04      	ldr	r2, [pc, #16]	@ (8003410 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003402:	6053      	str	r3, [r2, #4]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40007000 	.word	0x40007000

08003414 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af02      	add	r7, sp, #8
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800341c:	f7fe fb22 	bl	8001a64 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e069      	b.n	8003500 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fd fe51 	bl	80010e8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003446:	f241 3188 	movw	r1, #5000	@ 0x1388
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f85e 	bl	800350c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	3b01      	subs	r3, #1
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	2120      	movs	r1, #32
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f856 	bl	8003528 <QSPI_WaitFlagStateUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d137      	bne.n	80034f6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003490:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6852      	ldr	r2, [r2, #4]
 8003498:	0611      	lsls	r1, r2, #24
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68d2      	ldr	r2, [r2, #12]
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	69d2      	ldr	r2, [r2, #28]
 80034a4:	4311      	orrs	r1, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6a12      	ldr	r2, [r2, #32]
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <HAL_QSPI_Init+0xf4>)
 80034bc:	4013      	ands	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6912      	ldr	r2, [r2, #16]
 80034c2:	0411      	lsls	r1, r2, #16
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6952      	ldr	r2, [r2, #20]
 80034c8:	4311      	orrs	r1, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6992      	ldr	r2, [r2, #24]
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80034fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	ffe0f8fe 	.word	0xffe0f8fe

0800350c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003538:	e01a      	b.n	8003570 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d016      	beq.n	8003570 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003542:	f7fe fa8f 	bl	8001a64 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	429a      	cmp	r2, r3
 8003550:	d302      	bcc.n	8003558 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2204      	movs	r2, #4
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003564:	f043 0201 	orr.w	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e00e      	b.n	800358e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	429a      	cmp	r2, r3
 800358a:	d1d6      	bne.n	800353a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f000 bc02 	b.w	8003db0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ac:	4b96      	ldr	r3, [pc, #600]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b6:	4b94      	ldr	r3, [pc, #592]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80e4 	beq.w	8003796 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4c>
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	f040 808b 	bne.w	80036f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	f040 8087 	bne.w	80036f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035e4:	4b88      	ldr	r3, [pc, #544]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_OscConfig+0x64>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e3d9      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	4b81      	ldr	r3, [pc, #516]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <HAL_RCC_OscConfig+0x7e>
 800360c:	4b7e      	ldr	r3, [pc, #504]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003614:	e005      	b.n	8003622 <HAL_RCC_OscConfig+0x8a>
 8003616:	4b7c      	ldr	r3, [pc, #496]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003622:	4293      	cmp	r3, r2
 8003624:	d223      	bcs.n	800366e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fdf2 	bl	8004214 <RCC_SetFlashLatencyFromMSIRange>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e3ba      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363a:	4b73      	ldr	r3, [pc, #460]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a72      	ldr	r2, [pc, #456]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b70      	ldr	r3, [pc, #448]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	496d      	ldr	r1, [pc, #436]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003658:	4b6b      	ldr	r3, [pc, #428]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	4968      	ldr	r1, [pc, #416]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
 800366c:	e025      	b.n	80036ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800366e:	4b66      	ldr	r3, [pc, #408]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a65      	ldr	r2, [pc, #404]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003674:	f043 0308 	orr.w	r3, r3, #8
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b63      	ldr	r3, [pc, #396]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4960      	ldr	r1, [pc, #384]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800368c:	4b5e      	ldr	r3, [pc, #376]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	495b      	ldr	r1, [pc, #364]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fdb2 	bl	8004214 <RCC_SetFlashLatencyFromMSIRange>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e37a      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ba:	f000 fcb5 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 80036be:	4602      	mov	r2, r0
 80036c0:	4b51      	ldr	r3, [pc, #324]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	4950      	ldr	r1, [pc, #320]	@ (800380c <HAL_RCC_OscConfig+0x274>)
 80036cc:	5ccb      	ldrb	r3, [r1, r3]
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003810 <HAL_RCC_OscConfig+0x278>)
 80036d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036da:	4b4e      	ldr	r3, [pc, #312]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe f89a 	bl	8001818 <HAL_InitTick>
 80036e4:	4603      	mov	r3, r0
 80036e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d052      	beq.n	8003794 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	e35e      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d032      	beq.n	8003760 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036fa:	4b43      	ldr	r3, [pc, #268]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a42      	ldr	r2, [pc, #264]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003706:	f7fe f9ad 	bl	8001a64 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370e:	f7fe f9a9 	bl	8001a64 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e347      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003720:	4b39      	ldr	r3, [pc, #228]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800372c:	4b36      	ldr	r3, [pc, #216]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a35      	ldr	r2, [pc, #212]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003732:	f043 0308 	orr.w	r3, r3, #8
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b33      	ldr	r3, [pc, #204]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4930      	ldr	r1, [pc, #192]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800374a:	4b2f      	ldr	r3, [pc, #188]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	492b      	ldr	r1, [pc, #172]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
 800375e:	e01a      	b.n	8003796 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003760:	4b29      	ldr	r3, [pc, #164]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a28      	ldr	r2, [pc, #160]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800376c:	f7fe f97a 	bl	8001a64 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003774:	f7fe f976 	bl	8001a64 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e314      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003786:	4b20      	ldr	r3, [pc, #128]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x1dc>
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003794:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d073      	beq.n	800388a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_OscConfig+0x21c>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d10e      	bne.n	80037cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d10b      	bne.n	80037cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d063      	beq.n	8003888 <HAL_RCC_OscConfig+0x2f0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d15f      	bne.n	8003888 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e2f1      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_OscConfig+0x24c>
 80037d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a0b      	ldr	r2, [pc, #44]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e025      	b.n	8003830 <HAL_RCC_OscConfig+0x298>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ec:	d114      	bne.n	8003818 <HAL_RCC_OscConfig+0x280>
 80037ee:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a05      	ldr	r2, [pc, #20]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b03      	ldr	r3, [pc, #12]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a02      	ldr	r2, [pc, #8]	@ (8003808 <HAL_RCC_OscConfig+0x270>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e013      	b.n	8003830 <HAL_RCC_OscConfig+0x298>
 8003808:	40021000 	.word	0x40021000
 800380c:	080085c0 	.word	0x080085c0
 8003810:	20000000 	.word	0x20000000
 8003814:	20000004 	.word	0x20000004
 8003818:	4ba0      	ldr	r3, [pc, #640]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a9f      	ldr	r2, [pc, #636]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b9d      	ldr	r3, [pc, #628]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a9c      	ldr	r2, [pc, #624]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe f914 	bl	8001a64 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe f910 	bl	8001a64 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e2ae      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003852:	4b92      	ldr	r3, [pc, #584]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x2a8>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe f900 	bl	8001a64 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe f8fc 	bl	8001a64 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	@ 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e29a      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387a:	4b88      	ldr	r3, [pc, #544]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x2d0>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d060      	beq.n	8003958 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_OscConfig+0x310>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d116      	bne.n	80038d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a8:	4b7c      	ldr	r3, [pc, #496]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_OscConfig+0x328>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e277      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c0:	4b76      	ldr	r3, [pc, #472]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	4973      	ldr	r1, [pc, #460]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d4:	e040      	b.n	8003958 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d023      	beq.n	8003926 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038de:	4b6f      	ldr	r3, [pc, #444]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6e      	ldr	r2, [pc, #440]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe f8bb 	bl	8001a64 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fe f8b7 	bl	8001a64 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e255      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003904:	4b65      	ldr	r3, [pc, #404]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b62      	ldr	r3, [pc, #392]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	495f      	ldr	r1, [pc, #380]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	e018      	b.n	8003958 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b5d      	ldr	r3, [pc, #372]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a5c      	ldr	r2, [pc, #368]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 800392c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fe f897 	bl	8001a64 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fe f893 	bl	8001a64 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e231      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394c:	4b53      	ldr	r3, [pc, #332]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d03c      	beq.n	80039de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01c      	beq.n	80039a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003972:	4a4a      	ldr	r2, [pc, #296]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe f872 	bl	8001a64 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003984:	f7fe f86e 	bl	8001a64 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e20c      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003996:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <HAL_RCC_OscConfig+0x3ec>
 80039a4:	e01b      	b.n	80039de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a6:	4b3d      	ldr	r3, [pc, #244]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ac:	4a3b      	ldr	r2, [pc, #236]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fe f855 	bl	8001a64 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039be:	f7fe f851 	bl	8001a64 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1ef      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d0:	4b32      	ldr	r3, [pc, #200]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1ef      	bne.n	80039be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80a6 	beq.w	8003b38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039f0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b27      	ldr	r3, [pc, #156]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a00:	4a26      	ldr	r2, [pc, #152]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a08:	4b24      	ldr	r3, [pc, #144]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	4b21      	ldr	r3, [pc, #132]	@ (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d118      	bne.n	8003a56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a24:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a30:	f7fe f818 	bl	8001a64 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a38:	f7fe f814 	bl	8001a64 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1b2      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d108      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4d8>
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a64:	4a0d      	ldr	r2, [pc, #52]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a6e:	e029      	b.n	8003ac4 <HAL_RCC_OscConfig+0x52c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x50c>
 8003a78:	4b08      	ldr	r3, [pc, #32]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	4a07      	ldr	r2, [pc, #28]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a88:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	4a03      	ldr	r2, [pc, #12]	@ (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a98:	e014      	b.n	8003ac4 <HAL_RCC_OscConfig+0x52c>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	4b9a      	ldr	r3, [pc, #616]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	4a99      	ldr	r2, [pc, #612]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ab4:	4b96      	ldr	r3, [pc, #600]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aba:	4a95      	ldr	r2, [pc, #596]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d016      	beq.n	8003afa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fd ffca 	bl	8001a64 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7fd ffc6 	bl	8001a64 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e162      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aea:	4b89      	ldr	r3, [pc, #548]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ed      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x53c>
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afa:	f7fd ffb3 	bl	8001a64 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fd ffaf 	bl	8001a64 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e14b      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b18:	4b7d      	ldr	r3, [pc, #500]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ed      	bne.n	8003b02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2c:	4b78      	ldr	r3, [pc, #480]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	4a77      	ldr	r2, [pc, #476]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d03c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b4c:	4b70      	ldr	r3, [pc, #448]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b52:	4a6f      	ldr	r2, [pc, #444]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fd ff82 	bl	8001a64 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b64:	f7fd ff7e 	bl	8001a64 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e11c      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b76:	4b66      	ldr	r3, [pc, #408]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ef      	beq.n	8003b64 <HAL_RCC_OscConfig+0x5cc>
 8003b84:	e01b      	b.n	8003bbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b86:	4b62      	ldr	r3, [pc, #392]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b8c:	4a60      	ldr	r2, [pc, #384]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7fd ff65 	bl	8001a64 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b9e:	f7fd ff61 	bl	8001a64 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0ff      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb0:	4b57      	ldr	r3, [pc, #348]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ef      	bne.n	8003b9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80f3 	beq.w	8003dae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	f040 80c9 	bne.w	8003d64 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f003 0203 	and.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d12c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d123      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d11b      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d113      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	3b01      	subs	r3, #1
 8003c26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d109      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d06b      	beq.n	8003d18 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d062      	beq.n	8003d0c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c46:	4b32      	ldr	r3, [pc, #200]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0ac      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c56:	4b2e      	ldr	r3, [pc, #184]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c62:	f7fd feff 	bl	8001a64 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6a:	f7fd fefb 	bl	8001a64 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e099      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7c:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f0      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c88:	4b21      	ldr	r3, [pc, #132]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	4b21      	ldr	r3, [pc, #132]	@ (8003d14 <HAL_RCC_OscConfig+0x77c>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ca2:	0212      	lsls	r2, r2, #8
 8003ca4:	4311      	orrs	r1, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003caa:	0852      	lsrs	r2, r2, #1
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0552      	lsls	r2, r2, #21
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cc2:	06d2      	lsls	r2, r2, #27
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	4912      	ldr	r1, [pc, #72]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ce4:	f7fd febe 	bl	8001a64 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fd feba 	bl	8001a64 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e058      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfe:	4b04      	ldr	r3, [pc, #16]	@ (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d0a:	e050      	b.n	8003dae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e04f      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d18:	4b27      	ldr	r3, [pc, #156]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d144      	bne.n	8003dae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d24:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a23      	ldr	r2, [pc, #140]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d30:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a20      	ldr	r2, [pc, #128]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d3c:	f7fd fe92 	bl	8001a64 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fd fe8e 	bl	8001a64 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e02c      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d56:	4b18      	ldr	r3, [pc, #96]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x7ac>
 8003d62:	e024      	b.n	8003dae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d01f      	beq.n	8003daa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b13      	ldr	r3, [pc, #76]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a12      	ldr	r2, [pc, #72]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fd fe75 	bl	8001a64 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd fe71 	bl	8001a64 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e00f      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d90:	4b09      	ldr	r3, [pc, #36]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d9c:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	4905      	ldr	r1, [pc, #20]	@ (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003da2:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <HAL_RCC_OscConfig+0x824>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	60cb      	str	r3, [r1, #12]
 8003da8:	e001      	b.n	8003dae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	feeefffc 	.word	0xfeeefffc

08003dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0e7      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b75      	ldr	r3, [pc, #468]	@ (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d910      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b72      	ldr	r3, [pc, #456]	@ (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 0207 	bic.w	r2, r3, #7
 8003dea:	4970      	ldr	r1, [pc, #448]	@ (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b6e      	ldr	r3, [pc, #440]	@ (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0cf      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d010      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	4b66      	ldr	r3, [pc, #408]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d908      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e20:	4b63      	ldr	r3, [pc, #396]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4960      	ldr	r1, [pc, #384]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04c      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e46:	4b5a      	ldr	r3, [pc, #360]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d121      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e0a6      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e5e:	4b54      	ldr	r3, [pc, #336]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d115      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e09a      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e76:	4b4e      	ldr	r3, [pc, #312]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e08e      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e86:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e086      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b46      	ldr	r3, [pc, #280]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4943      	ldr	r1, [pc, #268]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fddc 	bl	8001a64 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fd fdd8 	bl	8001a64 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e06e      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d010      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	4b31      	ldr	r3, [pc, #196]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d208      	bcs.n	8003f06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	492b      	ldr	r1, [pc, #172]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f06:	4b29      	ldr	r3, [pc, #164]	@ (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d210      	bcs.n	8003f36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f14:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 0207 	bic.w	r2, r3, #7
 8003f1c:	4923      	ldr	r1, [pc, #140]	@ (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f24:	4b21      	ldr	r3, [pc, #132]	@ (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e036      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f42:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4918      	ldr	r1, [pc, #96]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f60:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4910      	ldr	r1, [pc, #64]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f74:	f000 f858 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	490b      	ldr	r1, [pc, #44]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	4a09      	ldr	r2, [pc, #36]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8003f92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f94:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <HAL_RCC_ClockConfig+0x1fc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd fc3d 	bl	8001818 <HAL_InitTick>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40022000 	.word	0x40022000
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	080085c0 	.word	0x080085c0
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	20000004 	.word	0x20000004

08003fc0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	@ 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8003fcc:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <HAL_RCC_MCOConfig+0x64>)
 8003fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd0:	4a14      	ldr	r2, [pc, #80]	@ (8004024 <HAL_RCC_MCOConfig+0x64>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fd8:	4b12      	ldr	r3, [pc, #72]	@ (8004024 <HAL_RCC_MCOConfig+0x64>)
 8003fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8003fe4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fea:	2302      	movs	r3, #2
 8003fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003ffa:	f107 0314 	add.w	r3, r7, #20
 8003ffe:	4619      	mov	r1, r3
 8004000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004004:	f7fe fd7e 	bl	8002b04 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004008:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <HAL_RCC_MCOConfig+0x64>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	430b      	orrs	r3, r1
 8004016:	4903      	ldr	r1, [pc, #12]	@ (8004024 <HAL_RCC_MCOConfig+0x64>)
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]
}
 800401c:	bf00      	nop
 800401e:	3728      	adds	r7, #40	@ 0x28
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	@ 0x24
 800402c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004036:	4b3e      	ldr	r3, [pc, #248]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004040:	4b3b      	ldr	r3, [pc, #236]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x34>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d121      	bne.n	800409a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d11e      	bne.n	800409a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800405c:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d107      	bne.n	8004078 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004068:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	e005      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004078:	4b2d      	ldr	r3, [pc, #180]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004084:	4a2b      	ldr	r2, [pc, #172]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004098:	e00a      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d102      	bne.n	80040a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040a0:	4b25      	ldr	r3, [pc, #148]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x110>)
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e004      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040ac:	4b23      	ldr	r3, [pc, #140]	@ (800413c <HAL_RCC_GetSysClockFreq+0x114>)
 80040ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d134      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0xa6>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d003      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0xac>
 80040cc:	e005      	b.n	80040da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x110>)
 80040d0:	617b      	str	r3, [r7, #20]
      break;
 80040d2:	e005      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040d4:	4b19      	ldr	r3, [pc, #100]	@ (800413c <HAL_RCC_GetSysClockFreq+0x114>)
 80040d6:	617b      	str	r3, [r7, #20]
      break;
 80040d8:	e002      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	617b      	str	r3, [r7, #20]
      break;
 80040de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e0:	4b13      	ldr	r3, [pc, #76]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	3301      	adds	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	fb03 f202 	mul.w	r2, r3, r2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004106:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	0e5b      	lsrs	r3, r3, #25
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	3301      	adds	r3, #1
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004120:	69bb      	ldr	r3, [r7, #24]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	@ 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	080085d8 	.word	0x080085d8
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200

08004140 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b03      	ldr	r3, [pc, #12]	@ (8004154 <HAL_RCC_GetHCLKFreq+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000000 	.word	0x20000000

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800415c:	f7ff fff0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b06      	ldr	r3, [pc, #24]	@ (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4904      	ldr	r1, [pc, #16]	@ (8004180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	080085d0 	.word	0x080085d0

08004184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004188:	f7ff ffda 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0adb      	lsrs	r3, r3, #11
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4904      	ldr	r1, [pc, #16]	@ (80041ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000
 80041ac:	080085d0 	.word	0x080085d0

080041b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	220f      	movs	r2, #15
 80041be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80041c0:	4b12      	ldr	r3, [pc, #72]	@ (800420c <HAL_RCC_GetClockConfig+0x5c>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0203 	and.w	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80041cc:	4b0f      	ldr	r3, [pc, #60]	@ (800420c <HAL_RCC_GetClockConfig+0x5c>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80041d8:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <HAL_RCC_GetClockConfig+0x5c>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80041e4:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_GetClockConfig+0x5c>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	08db      	lsrs	r3, r3, #3
 80041ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041f2:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <HAL_RCC_GetClockConfig+0x60>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0207 	and.w	r2, r3, #7
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	40022000 	.word	0x40022000

08004214 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004220:	4b2a      	ldr	r3, [pc, #168]	@ (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800422c:	f7ff f87e 	bl	800332c <HAL_PWREx_GetVoltageRange>
 8004230:	6178      	str	r0, [r7, #20]
 8004232:	e014      	b.n	800425e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004234:	4b25      	ldr	r3, [pc, #148]	@ (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004238:	4a24      	ldr	r2, [pc, #144]	@ (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800423e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004240:	4b22      	ldr	r3, [pc, #136]	@ (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800424c:	f7ff f86e 	bl	800332c <HAL_PWREx_GetVoltageRange>
 8004250:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004252:	4b1e      	ldr	r3, [pc, #120]	@ (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	4a1d      	ldr	r2, [pc, #116]	@ (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800425c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004264:	d10b      	bne.n	800427e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b80      	cmp	r3, #128	@ 0x80
 800426a:	d919      	bls.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004270:	d902      	bls.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004272:	2302      	movs	r3, #2
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e013      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004278:	2301      	movs	r3, #1
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	e010      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b80      	cmp	r3, #128	@ 0x80
 8004282:	d902      	bls.n	800428a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004284:	2303      	movs	r3, #3
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	e00a      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b80      	cmp	r3, #128	@ 0x80
 800428e:	d102      	bne.n	8004296 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004290:	2302      	movs	r3, #2
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e004      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b70      	cmp	r3, #112	@ 0x70
 800429a:	d101      	bne.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800429c:	2301      	movs	r3, #1
 800429e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042a0:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f023 0207 	bic.w	r2, r3, #7
 80042a8:	4909      	ldr	r1, [pc, #36]	@ (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042b0:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d001      	beq.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40022000 	.word	0x40022000

080042d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042dc:	2300      	movs	r3, #0
 80042de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042e0:	2300      	movs	r3, #0
 80042e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d031      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042f8:	d01a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80042fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042fe:	d814      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004304:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004308:	d10f      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4a5c      	ldr	r2, [pc, #368]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004314:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004316:	e00c      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fa54 	bl	80047cc <RCCEx_PLLSAI1_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	74fb      	strb	r3, [r7, #19]
      break;
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004338:	4b51      	ldr	r3, [pc, #324]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004346:	494e      	ldr	r1, [pc, #312]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800434e:	e001      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 809e 	beq.w	800449e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004362:	2300      	movs	r3, #0
 8004364:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004366:	4b46      	ldr	r3, [pc, #280]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437c:	4b40      	ldr	r3, [pc, #256]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	4a3f      	ldr	r2, [pc, #252]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004386:	6593      	str	r3, [r2, #88]	@ 0x58
 8004388:	4b3d      	ldr	r3, [pc, #244]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004394:	2301      	movs	r3, #1
 8004396:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004398:	4b3a      	ldr	r3, [pc, #232]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a39      	ldr	r2, [pc, #228]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a4:	f7fd fb5e 	bl	8001a64 <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043aa:	e009      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ac:	f7fd fb5a 	bl	8001a64 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d902      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	74fb      	strb	r3, [r7, #19]
        break;
 80043be:	e005      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c0:	4b30      	ldr	r3, [pc, #192]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ef      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d15a      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d019      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043ee:	4b24      	ldr	r3, [pc, #144]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043fa:	4b21      	ldr	r3, [pc, #132]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004400:	4a1f      	ldr	r2, [pc, #124]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004406:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800440a:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004410:	4a1b      	ldr	r2, [pc, #108]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800441a:	4a19      	ldr	r2, [pc, #100]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fd fb1a 	bl	8001a64 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004432:	e00b      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fd fb16 	bl	8001a64 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d902      	bls.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	74fb      	strb	r3, [r7, #19]
            break;
 800444a:	e006      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ec      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004460:	4b07      	ldr	r3, [pc, #28]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004466:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800446e:	4904      	ldr	r1, [pc, #16]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004476:	e009      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
 800447c:	e006      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800448c:	7c7b      	ldrb	r3, [r7, #17]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d105      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004492:	4b9e      	ldr	r3, [pc, #632]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004496:	4a9d      	ldr	r2, [pc, #628]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800449c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044aa:	4b98      	ldr	r3, [pc, #608]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b0:	f023 0203 	bic.w	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4994      	ldr	r1, [pc, #592]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044cc:	4b8f      	ldr	r3, [pc, #572]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d2:	f023 020c 	bic.w	r2, r3, #12
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	498c      	ldr	r1, [pc, #560]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ee:	4b87      	ldr	r3, [pc, #540]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	4983      	ldr	r1, [pc, #524]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004510:	4b7e      	ldr	r3, [pc, #504]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004516:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	497b      	ldr	r1, [pc, #492]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004532:	4b76      	ldr	r3, [pc, #472]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004538:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004540:	4972      	ldr	r1, [pc, #456]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004554:	4b6d      	ldr	r3, [pc, #436]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004562:	496a      	ldr	r1, [pc, #424]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004576:	4b65      	ldr	r3, [pc, #404]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004584:	4961      	ldr	r1, [pc, #388]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004598:	4b5c      	ldr	r3, [pc, #368]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a6:	4959      	ldr	r1, [pc, #356]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045ba:	4b54      	ldr	r3, [pc, #336]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	4950      	ldr	r1, [pc, #320]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045dc:	4b4b      	ldr	r3, [pc, #300]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ea:	4948      	ldr	r1, [pc, #288]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045fe:	4b43      	ldr	r3, [pc, #268]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004600:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004604:	f023 0203 	bic.w	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	493f      	ldr	r1, [pc, #252]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d028      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004620:	4b3a      	ldr	r3, [pc, #232]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004626:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462e:	4937      	ldr	r1, [pc, #220]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800463e:	d106      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004640:	4b32      	ldr	r3, [pc, #200]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a31      	ldr	r2, [pc, #196]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800464a:	60d3      	str	r3, [r2, #12]
 800464c:	e011      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004652:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004656:	d10c      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	2101      	movs	r1, #1
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f8b4 	bl	80047cc <RCCEx_PLLSAI1_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d028      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800467e:	4b23      	ldr	r3, [pc, #140]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004684:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468c:	491f      	ldr	r1, [pc, #124]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800469c:	d106      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469e:	4b1b      	ldr	r3, [pc, #108]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	4a1a      	ldr	r2, [pc, #104]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046a8:	60d3      	str	r3, [r2, #12]
 80046aa:	e011      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f885 	bl	80047cc <RCCEx_PLLSAI1_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c6:	7cfb      	ldrb	r3, [r7, #19]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02b      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ea:	4908      	ldr	r1, [pc, #32]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046fa:	d109      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b03      	ldr	r3, [pc, #12]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a02      	ldr	r2, [pc, #8]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004706:	60d3      	str	r3, [r2, #12]
 8004708:	e014      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004714:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004718:	d10c      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	2101      	movs	r1, #1
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f853 	bl	80047cc <RCCEx_PLLSAI1_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01c      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004740:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004746:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474e:	4916      	ldr	r1, [pc, #88]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800475e:	d10c      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	2102      	movs	r1, #2
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f830 	bl	80047cc <RCCEx_PLLSAI1_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004786:	4b08      	ldr	r3, [pc, #32]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004794:	4904      	ldr	r1, [pc, #16]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800479c:	7cbb      	ldrb	r3, [r7, #18]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000

080047ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a04      	ldr	r2, [pc, #16]	@ (80047c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	6013      	str	r3, [r2, #0]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000

080047cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047da:	4b74      	ldr	r3, [pc, #464]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047e6:	4b71      	ldr	r3, [pc, #452]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0203 	and.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d10d      	bne.n	8004812 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
       ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047fe:	4b6b      	ldr	r3, [pc, #428]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
       ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d047      	beq.n	80048a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	e044      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d018      	beq.n	8004852 <RCCEx_PLLSAI1_Config+0x86>
 8004820:	2b03      	cmp	r3, #3
 8004822:	d825      	bhi.n	8004870 <RCCEx_PLLSAI1_Config+0xa4>
 8004824:	2b01      	cmp	r3, #1
 8004826:	d002      	beq.n	800482e <RCCEx_PLLSAI1_Config+0x62>
 8004828:	2b02      	cmp	r3, #2
 800482a:	d009      	beq.n	8004840 <RCCEx_PLLSAI1_Config+0x74>
 800482c:	e020      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800482e:	4b5f      	ldr	r3, [pc, #380]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11d      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483e:	e01a      	b.n	8004876 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004840:	4b5a      	ldr	r3, [pc, #360]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004848:	2b00      	cmp	r3, #0
 800484a:	d116      	bne.n	800487a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004850:	e013      	b.n	800487a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004852:	4b56      	ldr	r3, [pc, #344]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800485e:	4b53      	ldr	r3, [pc, #332]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800486e:	e006      	b.n	800487e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
      break;
 8004874:	e004      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10d      	bne.n	80048a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004886:	4b49      	ldr	r3, [pc, #292]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6819      	ldr	r1, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	430b      	orrs	r3, r1
 800489c:	4943      	ldr	r1, [pc, #268]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d17c      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048a8:	4b40      	ldr	r3, [pc, #256]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a3f      	ldr	r2, [pc, #252]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fd f8d6 	bl	8001a64 <HAL_GetTick>
 80048b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ba:	e009      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048bc:	f7fd f8d2 	bl	8001a64 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d902      	bls.n	80048d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	73fb      	strb	r3, [r7, #15]
        break;
 80048ce:	e005      	b.n	80048dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048d0:	4b36      	ldr	r3, [pc, #216]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1ef      	bne.n	80048bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d15f      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d110      	bne.n	800490a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e8:	4b30      	ldr	r3, [pc, #192]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80048f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6892      	ldr	r2, [r2, #8]
 80048f8:	0211      	lsls	r1, r2, #8
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68d2      	ldr	r2, [r2, #12]
 80048fe:	06d2      	lsls	r2, r2, #27
 8004900:	430a      	orrs	r2, r1
 8004902:	492a      	ldr	r1, [pc, #168]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004904:	4313      	orrs	r3, r2
 8004906:	610b      	str	r3, [r1, #16]
 8004908:	e027      	b.n	800495a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d112      	bne.n	8004936 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004910:	4b26      	ldr	r3, [pc, #152]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004918:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6892      	ldr	r2, [r2, #8]
 8004920:	0211      	lsls	r1, r2, #8
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6912      	ldr	r2, [r2, #16]
 8004926:	0852      	lsrs	r2, r2, #1
 8004928:	3a01      	subs	r2, #1
 800492a:	0552      	lsls	r2, r2, #21
 800492c:	430a      	orrs	r2, r1
 800492e:	491f      	ldr	r1, [pc, #124]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004930:	4313      	orrs	r3, r2
 8004932:	610b      	str	r3, [r1, #16]
 8004934:	e011      	b.n	800495a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004936:	4b1d      	ldr	r3, [pc, #116]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800493e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6892      	ldr	r2, [r2, #8]
 8004946:	0211      	lsls	r1, r2, #8
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6952      	ldr	r2, [r2, #20]
 800494c:	0852      	lsrs	r2, r2, #1
 800494e:	3a01      	subs	r2, #1
 8004950:	0652      	lsls	r2, r2, #25
 8004952:	430a      	orrs	r2, r1
 8004954:	4915      	ldr	r1, [pc, #84]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004956:	4313      	orrs	r3, r2
 8004958:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800495a:	4b14      	ldr	r3, [pc, #80]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a13      	ldr	r2, [pc, #76]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004960:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004964:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004966:	f7fd f87d 	bl	8001a64 <HAL_GetTick>
 800496a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800496c:	e009      	b.n	8004982 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800496e:	f7fd f879 	bl	8001a64 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d902      	bls.n	8004982 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	73fb      	strb	r3, [r7, #15]
          break;
 8004980:	e005      	b.n	800498e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ef      	beq.n	800496e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004994:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	4903      	ldr	r1, [pc, #12]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021000 	.word	0x40021000

080049b0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e049      	b.n	8004a56 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	795b      	ldrb	r3, [r3, #5]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d105      	bne.n	80049d8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fc fbea 	bl	80011ac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0204 	orr.w	r2, r2, #4
 80049ec:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f8:	2b40      	cmp	r3, #64	@ 0x40
 80049fa:	d104      	bne.n	8004a06 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2204      	movs	r2, #4
 8004a00:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e027      	b.n	8004a56 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004a06:	f7fd f82d 	bl	8001a64 <HAL_GetTick>
 8004a0a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004a0c:	e015      	b.n	8004a3a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004a0e:	f7fd f829 	bl	8001a64 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d90e      	bls.n	8004a3a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d007      	beq.n	8004a3a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e00d      	b.n	8004a56 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d1e2      	bne.n	8004a0e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d079      	beq.n	8004b64 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fc fbb1 	bl	80011ec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d058      	beq.n	8004b52 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	22ca      	movs	r2, #202	@ 0xca
 8004aa6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2253      	movs	r2, #83	@ 0x53
 8004aae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f881 	bl	8004bb8 <RTC_EnterInitMode>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d127      	bne.n	8004b10 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad2:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6899      	ldr	r1, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68d2      	ldr	r2, [r2, #12]
 8004afa:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6919      	ldr	r1, [r3, #16]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	041a      	lsls	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f885 	bl	8004c20 <RTC_ExitInitMode>
 8004b16:	4603      	mov	r3, r0
 8004b18:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d113      	bne.n	8004b48 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0203 	bic.w	r2, r2, #3
 8004b2e:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	22ff      	movs	r2, #255	@ 0xff
 8004b4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b50:	e001      	b.n	8004b56 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bb4 <HAL_RTC_WaitForSynchro+0x44>)
 8004b7e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004b80:	f7fc ff70 	bl	8001a64 <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b86:	e009      	b.n	8004b9c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b88:	f7fc ff6c 	bl	8001a64 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b96:	d901      	bls.n	8004b9c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e007      	b.n	8004bac <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0ee      	beq.n	8004b88 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	0003ff5f 	.word	0x0003ff5f

08004bb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d120      	bne.n	8004c14 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bda:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004bdc:	f7fc ff42 	bl	8001a64 <HAL_GetTick>
 8004be0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004be2:	e00d      	b.n	8004c00 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004be4:	f7fc ff3e 	bl	8001a64 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bf2:	d905      	bls.n	8004c00 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <RTC_EnterInitMode+0x5c>
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d1e7      	bne.n	8004be4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c98 <RTC_ExitInitMode+0x78>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a19      	ldr	r2, [pc, #100]	@ (8004c98 <RTC_ExitInitMode+0x78>)
 8004c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c36:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004c38:	4b17      	ldr	r3, [pc, #92]	@ (8004c98 <RTC_ExitInitMode+0x78>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10c      	bne.n	8004c5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff93 	bl	8004b70 <HAL_RTC_WaitForSynchro>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01e      	beq.n	8004c8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2203      	movs	r2, #3
 8004c54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e017      	b.n	8004c8e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c98 <RTC_ExitInitMode+0x78>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	4a0d      	ldr	r2, [pc, #52]	@ (8004c98 <RTC_ExitInitMode+0x78>)
 8004c64:	f023 0320 	bic.w	r3, r3, #32
 8004c68:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ff80 	bl	8004b70 <HAL_RTC_WaitForSynchro>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c82:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <RTC_ExitInitMode+0x78>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4a04      	ldr	r2, [pc, #16]	@ (8004c98 <RTC_ExitInitMode+0x78>)
 8004c88:	f043 0320 	orr.w	r3, r3, #32
 8004c8c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40002800 	.word	0x40002800

08004c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e095      	b.n	8004dda <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cbe:	d009      	beq.n	8004cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
 8004cc6:	e005      	b.n	8004cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc faac 	bl	800124c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d14:	d902      	bls.n	8004d1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	e002      	b.n	8004d22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d2a:	d007      	beq.n	8004d3c <HAL_SPI_Init+0xa0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d34:	d002      	beq.n	8004d3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7e:	ea42 0103 	orr.w	r1, r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	f003 0204 	and.w	r2, r3, #4
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004db8:	ea42 0103 	orr.w	r1, r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e049      	b.n	8004e88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f841 	bl	8004e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f000 fb35 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d001      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e040      	b.n	8004f3e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8004f4c <HAL_TIM_Base_Start_IT+0xa8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x58>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee6:	d009      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x58>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a18      	ldr	r2, [pc, #96]	@ (8004f50 <HAL_TIM_Base_Start_IT+0xac>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x58>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a17      	ldr	r2, [pc, #92]	@ (8004f54 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d115      	bne.n	8004f28 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	4b15      	ldr	r3, [pc, #84]	@ (8004f58 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b06      	cmp	r3, #6
 8004f0c:	d015      	beq.n	8004f3a <HAL_TIM_Base_Start_IT+0x96>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f14:	d011      	beq.n	8004f3a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	e008      	b.n	8004f3a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e000      	b.n	8004f3c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	00010007 	.word	0x00010007

08004f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e049      	b.n	8005002 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc fa14 	bl	80013b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f000 fa78 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d020      	beq.n	800506e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01b      	beq.n	800506e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f06f 0202 	mvn.w	r2, #2
 800503e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f9fd 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 800505a:	e005      	b.n	8005068 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f9ef 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fa00 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d020      	beq.n	80050ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01b      	beq.n	80050ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f06f 0204 	mvn.w	r2, #4
 800508a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f9d7 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 80050a6:	e005      	b.n	80050b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f9c9 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f9da 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d020      	beq.n	8005106 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01b      	beq.n	8005106 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f06f 0208 	mvn.w	r2, #8
 80050d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2204      	movs	r2, #4
 80050dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f9b1 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 80050f2:	e005      	b.n	8005100 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f9a3 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9b4 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	d020      	beq.n	8005152 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01b      	beq.n	8005152 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f06f 0210 	mvn.w	r2, #16
 8005122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2208      	movs	r2, #8
 8005128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f98b 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 800513e:	e005      	b.n	800514c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f97d 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f98e 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00c      	beq.n	8005176 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0201 	mvn.w	r2, #1
 800516e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fb fedb 	bl	8000f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fce6 	bl	8005b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fcde 	bl	8005b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00c      	beq.n	80051ec <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f948 	bl	800547c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0220 	mvn.w	r2, #32
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fca6 	bl	8005b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005232:	2302      	movs	r3, #2
 8005234:	e0ff      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b14      	cmp	r3, #20
 8005242:	f200 80f0 	bhi.w	8005426 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005246:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	080052a1 	.word	0x080052a1
 8005250:	08005427 	.word	0x08005427
 8005254:	08005427 	.word	0x08005427
 8005258:	08005427 	.word	0x08005427
 800525c:	080052e1 	.word	0x080052e1
 8005260:	08005427 	.word	0x08005427
 8005264:	08005427 	.word	0x08005427
 8005268:	08005427 	.word	0x08005427
 800526c:	08005323 	.word	0x08005323
 8005270:	08005427 	.word	0x08005427
 8005274:	08005427 	.word	0x08005427
 8005278:	08005427 	.word	0x08005427
 800527c:	08005363 	.word	0x08005363
 8005280:	08005427 	.word	0x08005427
 8005284:	08005427 	.word	0x08005427
 8005288:	08005427 	.word	0x08005427
 800528c:	080053a5 	.word	0x080053a5
 8005290:	08005427 	.word	0x08005427
 8005294:	08005427 	.word	0x08005427
 8005298:	08005427 	.word	0x08005427
 800529c:	080053e5 	.word	0x080053e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f96c 	bl	8005584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
      break;
 80052de:	e0a5      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f9c8 	bl	800567c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      break;
 8005320:	e084      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa21 	bl	8005770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
      break;
 8005360:	e064      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fa79 	bl	8005860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
      break;
 80053a2:	e043      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fab6 	bl	800591c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053e2:	e023      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 faee 	bl	80059cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005424:	e002      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	75fb      	strb	r3, [r7, #23]
      break;
 800542a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop

08005440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a34      	ldr	r2, [pc, #208]	@ (8005574 <TIM_Base_SetConfig+0xe4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_Base_SetConfig+0x28>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0x28>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a31      	ldr	r2, [pc, #196]	@ (8005578 <TIM_Base_SetConfig+0xe8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a29      	ldr	r2, [pc, #164]	@ (8005574 <TIM_Base_SetConfig+0xe4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00f      	beq.n	80054f2 <TIM_Base_SetConfig+0x62>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d8:	d00b      	beq.n	80054f2 <TIM_Base_SetConfig+0x62>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a26      	ldr	r2, [pc, #152]	@ (8005578 <TIM_Base_SetConfig+0xe8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d007      	beq.n	80054f2 <TIM_Base_SetConfig+0x62>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a25      	ldr	r2, [pc, #148]	@ (800557c <TIM_Base_SetConfig+0xec>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_Base_SetConfig+0x62>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a24      	ldr	r2, [pc, #144]	@ (8005580 <TIM_Base_SetConfig+0xf0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d108      	bne.n	8005504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a12      	ldr	r2, [pc, #72]	@ (8005574 <TIM_Base_SetConfig+0xe4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0xb0>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a12      	ldr	r2, [pc, #72]	@ (800557c <TIM_Base_SetConfig+0xec>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0xb0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a11      	ldr	r2, [pc, #68]	@ (8005580 <TIM_Base_SetConfig+0xf0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d103      	bne.n	8005548 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d105      	bne.n	8005566 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	611a      	str	r2, [r3, #16]
  }
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40000400 	.word	0x40000400
 800557c:	40014000 	.word	0x40014000
 8005580:	40014400 	.word	0x40014400

08005584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f023 0201 	bic.w	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 0302 	bic.w	r3, r3, #2
 80055d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a24      	ldr	r2, [pc, #144]	@ (8005670 <TIM_OC1_SetConfig+0xec>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d007      	beq.n	80055f4 <TIM_OC1_SetConfig+0x70>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a23      	ldr	r2, [pc, #140]	@ (8005674 <TIM_OC1_SetConfig+0xf0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC1_SetConfig+0x70>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a22      	ldr	r2, [pc, #136]	@ (8005678 <TIM_OC1_SetConfig+0xf4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d10c      	bne.n	800560e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0308 	bic.w	r3, r3, #8
 80055fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a17      	ldr	r2, [pc, #92]	@ (8005670 <TIM_OC1_SetConfig+0xec>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d007      	beq.n	8005626 <TIM_OC1_SetConfig+0xa2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a16      	ldr	r2, [pc, #88]	@ (8005674 <TIM_OC1_SetConfig+0xf0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_OC1_SetConfig+0xa2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a15      	ldr	r2, [pc, #84]	@ (8005678 <TIM_OC1_SetConfig+0xf4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d111      	bne.n	800564a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800562c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	621a      	str	r2, [r3, #32]
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400

0800567c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	f023 0210 	bic.w	r2, r3, #16
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0320 	bic.w	r3, r3, #32
 80056ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a22      	ldr	r2, [pc, #136]	@ (8005764 <TIM_OC2_SetConfig+0xe8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10d      	bne.n	80056fc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a19      	ldr	r2, [pc, #100]	@ (8005764 <TIM_OC2_SetConfig+0xe8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_OC2_SetConfig+0x98>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a18      	ldr	r2, [pc, #96]	@ (8005768 <TIM_OC2_SetConfig+0xec>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC2_SetConfig+0x98>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a17      	ldr	r2, [pc, #92]	@ (800576c <TIM_OC2_SetConfig+0xf0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d113      	bne.n	800573c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800571a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400

08005770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800579e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a21      	ldr	r2, [pc, #132]	@ (8005854 <TIM_OC3_SetConfig+0xe4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10d      	bne.n	80057ee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a18      	ldr	r2, [pc, #96]	@ (8005854 <TIM_OC3_SetConfig+0xe4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_OC3_SetConfig+0x96>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <TIM_OC3_SetConfig+0xe8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_OC3_SetConfig+0x96>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a16      	ldr	r2, [pc, #88]	@ (800585c <TIM_OC3_SetConfig+0xec>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d113      	bne.n	800582e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	621a      	str	r2, [r3, #32]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400

08005860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	031b      	lsls	r3, r3, #12
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a14      	ldr	r2, [pc, #80]	@ (8005910 <TIM_OC4_SetConfig+0xb0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_OC4_SetConfig+0x74>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a13      	ldr	r2, [pc, #76]	@ (8005914 <TIM_OC4_SetConfig+0xb4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC4_SetConfig+0x74>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a12      	ldr	r2, [pc, #72]	@ (8005918 <TIM_OC4_SetConfig+0xb8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d109      	bne.n	80058e8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400

0800591c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800594a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	041b      	lsls	r3, r3, #16
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a13      	ldr	r2, [pc, #76]	@ (80059c0 <TIM_OC5_SetConfig+0xa4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <TIM_OC5_SetConfig+0x6a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a12      	ldr	r2, [pc, #72]	@ (80059c4 <TIM_OC5_SetConfig+0xa8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_OC5_SetConfig+0x6a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a11      	ldr	r2, [pc, #68]	@ (80059c8 <TIM_OC5_SetConfig+0xac>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d109      	bne.n	800599a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400

080059cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	051b      	lsls	r3, r3, #20
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a14      	ldr	r2, [pc, #80]	@ (8005a74 <TIM_OC6_SetConfig+0xa8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d007      	beq.n	8005a38 <TIM_OC6_SetConfig+0x6c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a13      	ldr	r2, [pc, #76]	@ (8005a78 <TIM_OC6_SetConfig+0xac>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_OC6_SetConfig+0x6c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a12      	ldr	r2, [pc, #72]	@ (8005a7c <TIM_OC6_SetConfig+0xb0>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d109      	bne.n	8005a4c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400

08005a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e054      	b.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a24      	ldr	r2, [pc, #144]	@ (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d108      	bne.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ac8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00e      	beq.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b00:	d009      	beq.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a13      	ldr	r2, [pc, #76]	@ (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d004      	beq.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a11      	ldr	r2, [pc, #68]	@ (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d10c      	bne.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40000400 	.word	0x40000400
 8005b58:	40014000 	.word	0x40014000

08005b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e040      	b.n	8005c2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fb fc86 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2224      	movs	r2, #36	@ 0x24
 8005bc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0201 	bic.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fe5e 	bl	80068a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fbd5 	bl	8006394 <UART_SetConfig>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e01b      	b.n	8005c2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fedd 	bl	80069e4 <UART_CheckIdleState>
 8005c2a:	4603      	mov	r3, r0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	@ 0x28
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d177      	bne.n	8005d3c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Transmit+0x24>
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e070      	b.n	8005d3e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2221      	movs	r2, #33	@ 0x21
 8005c68:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c6a:	f7fb fefb 	bl	8001a64 <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	88fa      	ldrh	r2, [r7, #6]
 8005c74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c88:	d108      	bne.n	8005c9c <HAL_UART_Transmit+0x68>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e003      	b.n	8005ca4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ca4:	e02f      	b.n	8005d06 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	2180      	movs	r1, #128	@ 0x80
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 ff3f 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e03b      	b.n	8005d3e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	881a      	ldrh	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd8:	b292      	uxth	r2, r2
 8005cda:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	3302      	adds	r3, #2
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e007      	b.n	8005cf4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	781a      	ldrb	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1c9      	bne.n	8005ca6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2140      	movs	r1, #64	@ 0x40
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 ff09 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e005      	b.n	8005d3e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b0ba      	sub	sp, #232	@ 0xe8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d76:	4013      	ands	r3, r2
 8005d78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d115      	bne.n	8005db0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00f      	beq.n	8005db0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 82ca 	beq.w	800633a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	4798      	blx	r3
      }
      return;
 8005dae:	e2c4      	b.n	800633a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8117 	beq.w	8005fe8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005dc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005dca:	4b85      	ldr	r3, [pc, #532]	@ (8005fe0 <HAL_UART_IRQHandler+0x298>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 810a 	beq.w	8005fe8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d011      	beq.n	8005e04 <HAL_UART_IRQHandler+0xbc>
 8005de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2201      	movs	r2, #1
 8005df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dfa:	f043 0201 	orr.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d011      	beq.n	8005e34 <HAL_UART_IRQHandler+0xec>
 8005e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2202      	movs	r2, #2
 8005e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e2a:	f043 0204 	orr.w	r2, r3, #4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d011      	beq.n	8005e64 <HAL_UART_IRQHandler+0x11c>
 8005e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00b      	beq.n	8005e64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2204      	movs	r2, #4
 8005e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e5a:	f043 0202 	orr.w	r2, r3, #2
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d017      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d105      	bne.n	8005e88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e96:	f043 0208 	orr.w	r2, r3, #8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d012      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x18a>
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec8:	f043 0220 	orr.w	r2, r3, #32
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8230 	beq.w	800633e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1a:	2b40      	cmp	r3, #64	@ 0x40
 8005f1c:	d005      	beq.n	8005f2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d04f      	beq.n	8005fca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fe6f 	bl	8006c0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d141      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3308      	adds	r3, #8
 8005f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1d9      	bne.n	8005f3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d013      	beq.n	8005fba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f96:	4a13      	ldr	r2, [pc, #76]	@ (8005fe4 <HAL_UART_IRQHandler+0x29c>)
 8005f98:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fc fd6e 	bl	8002a80 <HAL_DMA_Abort_IT>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d017      	beq.n	8005fda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	e00f      	b.n	8005fda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f9d4 	bl	8006368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e00b      	b.n	8005fda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9d0 	bl	8006368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	e007      	b.n	8005fda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f9cc 	bl	8006368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005fd8:	e1b1      	b.n	800633e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fda:	bf00      	nop
    return;
 8005fdc:	e1af      	b.n	800633e <HAL_UART_IRQHandler+0x5f6>
 8005fde:	bf00      	nop
 8005fe0:	04000120 	.word	0x04000120
 8005fe4:	08006cd7 	.word	0x08006cd7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	f040 816a 	bne.w	80062c6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8163 	beq.w	80062c6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 815c 	beq.w	80062c6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2210      	movs	r2, #16
 8006014:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b40      	cmp	r3, #64	@ 0x40
 8006022:	f040 80d4 	bne.w	80061ce <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006032:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 80ad 	beq.w	8006196 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006046:	429a      	cmp	r2, r3
 8006048:	f080 80a5 	bcs.w	8006196 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006052:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	f040 8086 	bne.w	8006174 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800607c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006092:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006096:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800609e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1da      	bne.n	8006068 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3308      	adds	r3, #8
 80060d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e1      	bne.n	80060b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3308      	adds	r3, #8
 80060f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3308      	adds	r3, #8
 800610e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006112:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006114:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006118:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e3      	bne.n	80060ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006144:	f023 0310 	bic.w	r3, r3, #16
 8006148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006156:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006158:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800615c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e4      	bne.n	8006134 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800616e:	4618      	mov	r0, r3
 8006170:	f7fc fc48 	bl	8002a04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006186:	b29b      	uxth	r3, r3
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	b29b      	uxth	r3, r3
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f8f4 	bl	800637c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006194:	e0d5      	b.n	8006342 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800619c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061a0:	429a      	cmp	r2, r3
 80061a2:	f040 80ce 	bne.w	8006342 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	f040 80c5 	bne.w	8006342 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8d8 	bl	800637c <HAL_UARTEx_RxEventCallback>
      return;
 80061cc:	e0b9      	b.n	8006342 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 80ab 	beq.w	8006346 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80061f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80a6 	beq.w	8006346 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800620e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800621c:	647b      	str	r3, [r7, #68]	@ 0x44
 800621e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800622a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e4      	bne.n	80061fa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	623b      	str	r3, [r7, #32]
   return(result);
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	f023 0301 	bic.w	r3, r3, #1
 8006246:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006254:	633a      	str	r2, [r7, #48]	@ 0x30
 8006256:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800625a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	60fb      	str	r3, [r7, #12]
   return(result);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0310 	bic.w	r3, r3, #16
 8006290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800629e:	61fb      	str	r3, [r7, #28]
 80062a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	69b9      	ldr	r1, [r7, #24]
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	617b      	str	r3, [r7, #20]
   return(result);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e4      	bne.n	800627c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f85c 	bl	800637c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062c4:	e03f      	b.n	8006346 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00e      	beq.n	80062f0 <HAL_UART_IRQHandler+0x5a8>
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80062e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fd34 	bl	8006d56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062ee:	e02d      	b.n	800634c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01c      	beq.n	800634a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4798      	blx	r3
    }
    return;
 8006318:	e017      	b.n	800634a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d012      	beq.n	800634c <HAL_UART_IRQHandler+0x604>
 8006326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00c      	beq.n	800634c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fce5 	bl	8006d02 <UART_EndTransmit_IT>
    return;
 8006338:	e008      	b.n	800634c <HAL_UART_IRQHandler+0x604>
      return;
 800633a:	bf00      	nop
 800633c:	e006      	b.n	800634c <HAL_UART_IRQHandler+0x604>
    return;
 800633e:	bf00      	nop
 8006340:	e004      	b.n	800634c <HAL_UART_IRQHandler+0x604>
      return;
 8006342:	bf00      	nop
 8006344:	e002      	b.n	800634c <HAL_UART_IRQHandler+0x604>
      return;
 8006346:	bf00      	nop
 8006348:	e000      	b.n	800634c <HAL_UART_IRQHandler+0x604>
    return;
 800634a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800634c:	37e8      	adds	r7, #232	@ 0xe8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop

08006354 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006398:	b08a      	sub	sp, #40	@ 0x28
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4ba5      	ldr	r3, [pc, #660]	@ (8006658 <UART_SetConfig+0x2c4>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	6812      	ldr	r2, [r2, #0]
 80063ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063cc:	430b      	orrs	r3, r1
 80063ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a9a      	ldr	r2, [pc, #616]	@ (800665c <UART_SetConfig+0x2c8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fc:	4313      	orrs	r3, r2
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006410:	430a      	orrs	r2, r1
 8006412:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a91      	ldr	r2, [pc, #580]	@ (8006660 <UART_SetConfig+0x2cc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d126      	bne.n	800646c <UART_SetConfig+0xd8>
 800641e:	4b91      	ldr	r3, [pc, #580]	@ (8006664 <UART_SetConfig+0x2d0>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	2b03      	cmp	r3, #3
 800642a:	d81b      	bhi.n	8006464 <UART_SetConfig+0xd0>
 800642c:	a201      	add	r2, pc, #4	@ (adr r2, 8006434 <UART_SetConfig+0xa0>)
 800642e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006432:	bf00      	nop
 8006434:	08006445 	.word	0x08006445
 8006438:	08006455 	.word	0x08006455
 800643c:	0800644d 	.word	0x0800644d
 8006440:	0800645d 	.word	0x0800645d
 8006444:	2301      	movs	r3, #1
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644a:	e0d6      	b.n	80065fa <UART_SetConfig+0x266>
 800644c:	2302      	movs	r3, #2
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006452:	e0d2      	b.n	80065fa <UART_SetConfig+0x266>
 8006454:	2304      	movs	r3, #4
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645a:	e0ce      	b.n	80065fa <UART_SetConfig+0x266>
 800645c:	2308      	movs	r3, #8
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006462:	e0ca      	b.n	80065fa <UART_SetConfig+0x266>
 8006464:	2310      	movs	r3, #16
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646a:	e0c6      	b.n	80065fa <UART_SetConfig+0x266>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a7d      	ldr	r2, [pc, #500]	@ (8006668 <UART_SetConfig+0x2d4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d138      	bne.n	80064e8 <UART_SetConfig+0x154>
 8006476:	4b7b      	ldr	r3, [pc, #492]	@ (8006664 <UART_SetConfig+0x2d0>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647c:	f003 030c 	and.w	r3, r3, #12
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d82d      	bhi.n	80064e0 <UART_SetConfig+0x14c>
 8006484:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <UART_SetConfig+0xf8>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080064e1 	.word	0x080064e1
 8006494:	080064e1 	.word	0x080064e1
 8006498:	080064e1 	.word	0x080064e1
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	080064e1 	.word	0x080064e1
 80064ac:	080064c9 	.word	0x080064c9
 80064b0:	080064e1 	.word	0x080064e1
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	080064e1 	.word	0x080064e1
 80064bc:	080064d9 	.word	0x080064d9
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c6:	e098      	b.n	80065fa <UART_SetConfig+0x266>
 80064c8:	2302      	movs	r3, #2
 80064ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ce:	e094      	b.n	80065fa <UART_SetConfig+0x266>
 80064d0:	2304      	movs	r3, #4
 80064d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d6:	e090      	b.n	80065fa <UART_SetConfig+0x266>
 80064d8:	2308      	movs	r3, #8
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064de:	e08c      	b.n	80065fa <UART_SetConfig+0x266>
 80064e0:	2310      	movs	r3, #16
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e6:	e088      	b.n	80065fa <UART_SetConfig+0x266>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a5f      	ldr	r2, [pc, #380]	@ (800666c <UART_SetConfig+0x2d8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d125      	bne.n	800653e <UART_SetConfig+0x1aa>
 80064f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006664 <UART_SetConfig+0x2d0>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064fc:	2b30      	cmp	r3, #48	@ 0x30
 80064fe:	d016      	beq.n	800652e <UART_SetConfig+0x19a>
 8006500:	2b30      	cmp	r3, #48	@ 0x30
 8006502:	d818      	bhi.n	8006536 <UART_SetConfig+0x1a2>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d00a      	beq.n	800651e <UART_SetConfig+0x18a>
 8006508:	2b20      	cmp	r3, #32
 800650a:	d814      	bhi.n	8006536 <UART_SetConfig+0x1a2>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <UART_SetConfig+0x182>
 8006510:	2b10      	cmp	r3, #16
 8006512:	d008      	beq.n	8006526 <UART_SetConfig+0x192>
 8006514:	e00f      	b.n	8006536 <UART_SetConfig+0x1a2>
 8006516:	2300      	movs	r3, #0
 8006518:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651c:	e06d      	b.n	80065fa <UART_SetConfig+0x266>
 800651e:	2302      	movs	r3, #2
 8006520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006524:	e069      	b.n	80065fa <UART_SetConfig+0x266>
 8006526:	2304      	movs	r3, #4
 8006528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652c:	e065      	b.n	80065fa <UART_SetConfig+0x266>
 800652e:	2308      	movs	r3, #8
 8006530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006534:	e061      	b.n	80065fa <UART_SetConfig+0x266>
 8006536:	2310      	movs	r3, #16
 8006538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653c:	e05d      	b.n	80065fa <UART_SetConfig+0x266>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a4b      	ldr	r2, [pc, #300]	@ (8006670 <UART_SetConfig+0x2dc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d125      	bne.n	8006594 <UART_SetConfig+0x200>
 8006548:	4b46      	ldr	r3, [pc, #280]	@ (8006664 <UART_SetConfig+0x2d0>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006552:	2bc0      	cmp	r3, #192	@ 0xc0
 8006554:	d016      	beq.n	8006584 <UART_SetConfig+0x1f0>
 8006556:	2bc0      	cmp	r3, #192	@ 0xc0
 8006558:	d818      	bhi.n	800658c <UART_SetConfig+0x1f8>
 800655a:	2b80      	cmp	r3, #128	@ 0x80
 800655c:	d00a      	beq.n	8006574 <UART_SetConfig+0x1e0>
 800655e:	2b80      	cmp	r3, #128	@ 0x80
 8006560:	d814      	bhi.n	800658c <UART_SetConfig+0x1f8>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <UART_SetConfig+0x1d8>
 8006566:	2b40      	cmp	r3, #64	@ 0x40
 8006568:	d008      	beq.n	800657c <UART_SetConfig+0x1e8>
 800656a:	e00f      	b.n	800658c <UART_SetConfig+0x1f8>
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006572:	e042      	b.n	80065fa <UART_SetConfig+0x266>
 8006574:	2302      	movs	r3, #2
 8006576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657a:	e03e      	b.n	80065fa <UART_SetConfig+0x266>
 800657c:	2304      	movs	r3, #4
 800657e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006582:	e03a      	b.n	80065fa <UART_SetConfig+0x266>
 8006584:	2308      	movs	r3, #8
 8006586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658a:	e036      	b.n	80065fa <UART_SetConfig+0x266>
 800658c:	2310      	movs	r3, #16
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006592:	e032      	b.n	80065fa <UART_SetConfig+0x266>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a30      	ldr	r2, [pc, #192]	@ (800665c <UART_SetConfig+0x2c8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d12a      	bne.n	80065f4 <UART_SetConfig+0x260>
 800659e:	4b31      	ldr	r3, [pc, #196]	@ (8006664 <UART_SetConfig+0x2d0>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065ac:	d01a      	beq.n	80065e4 <UART_SetConfig+0x250>
 80065ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065b2:	d81b      	bhi.n	80065ec <UART_SetConfig+0x258>
 80065b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065b8:	d00c      	beq.n	80065d4 <UART_SetConfig+0x240>
 80065ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065be:	d815      	bhi.n	80065ec <UART_SetConfig+0x258>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <UART_SetConfig+0x238>
 80065c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c8:	d008      	beq.n	80065dc <UART_SetConfig+0x248>
 80065ca:	e00f      	b.n	80065ec <UART_SetConfig+0x258>
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d2:	e012      	b.n	80065fa <UART_SetConfig+0x266>
 80065d4:	2302      	movs	r3, #2
 80065d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065da:	e00e      	b.n	80065fa <UART_SetConfig+0x266>
 80065dc:	2304      	movs	r3, #4
 80065de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e2:	e00a      	b.n	80065fa <UART_SetConfig+0x266>
 80065e4:	2308      	movs	r3, #8
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ea:	e006      	b.n	80065fa <UART_SetConfig+0x266>
 80065ec:	2310      	movs	r3, #16
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f2:	e002      	b.n	80065fa <UART_SetConfig+0x266>
 80065f4:	2310      	movs	r3, #16
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a17      	ldr	r2, [pc, #92]	@ (800665c <UART_SetConfig+0x2c8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	f040 808b 	bne.w	800671c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800660a:	2b08      	cmp	r3, #8
 800660c:	d834      	bhi.n	8006678 <UART_SetConfig+0x2e4>
 800660e:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <UART_SetConfig+0x280>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006639 	.word	0x08006639
 8006618:	08006679 	.word	0x08006679
 800661c:	08006641 	.word	0x08006641
 8006620:	08006679 	.word	0x08006679
 8006624:	08006647 	.word	0x08006647
 8006628:	08006679 	.word	0x08006679
 800662c:	08006679 	.word	0x08006679
 8006630:	08006679 	.word	0x08006679
 8006634:	0800664f 	.word	0x0800664f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006638:	f7fd fd8e 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 800663c:	61f8      	str	r0, [r7, #28]
        break;
 800663e:	e021      	b.n	8006684 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <UART_SetConfig+0x2e0>)
 8006642:	61fb      	str	r3, [r7, #28]
        break;
 8006644:	e01e      	b.n	8006684 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006646:	f7fd fcef 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 800664a:	61f8      	str	r0, [r7, #28]
        break;
 800664c:	e01a      	b.n	8006684 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006652:	61fb      	str	r3, [r7, #28]
        break;
 8006654:	e016      	b.n	8006684 <UART_SetConfig+0x2f0>
 8006656:	bf00      	nop
 8006658:	efff69f3 	.word	0xefff69f3
 800665c:	40008000 	.word	0x40008000
 8006660:	40013800 	.word	0x40013800
 8006664:	40021000 	.word	0x40021000
 8006668:	40004400 	.word	0x40004400
 800666c:	40004800 	.word	0x40004800
 8006670:	40004c00 	.word	0x40004c00
 8006674:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006682:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 80fa 	beq.w	8006880 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	4613      	mov	r3, r2
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	4413      	add	r3, r2
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	429a      	cmp	r2, r3
 800669a:	d305      	bcc.n	80066a8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d903      	bls.n	80066b0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066ae:	e0e7      	b.n	8006880 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	2200      	movs	r2, #0
 80066b4:	461c      	mov	r4, r3
 80066b6:	4615      	mov	r5, r2
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	022b      	lsls	r3, r5, #8
 80066c2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80066c6:	0222      	lsls	r2, r4, #8
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	6849      	ldr	r1, [r1, #4]
 80066cc:	0849      	lsrs	r1, r1, #1
 80066ce:	2000      	movs	r0, #0
 80066d0:	4688      	mov	r8, r1
 80066d2:	4681      	mov	r9, r0
 80066d4:	eb12 0a08 	adds.w	sl, r2, r8
 80066d8:	eb43 0b09 	adc.w	fp, r3, r9
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ea:	4650      	mov	r0, sl
 80066ec:	4659      	mov	r1, fp
 80066ee:	f7f9 fd7f 	bl	80001f0 <__aeabi_uldivmod>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4613      	mov	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006700:	d308      	bcc.n	8006714 <UART_SetConfig+0x380>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006708:	d204      	bcs.n	8006714 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	e0b5      	b.n	8006880 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800671a:	e0b1      	b.n	8006880 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006724:	d15d      	bne.n	80067e2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8006726:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800672a:	2b08      	cmp	r3, #8
 800672c:	d827      	bhi.n	800677e <UART_SetConfig+0x3ea>
 800672e:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <UART_SetConfig+0x3a0>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006759 	.word	0x08006759
 8006738:	08006761 	.word	0x08006761
 800673c:	08006769 	.word	0x08006769
 8006740:	0800677f 	.word	0x0800677f
 8006744:	0800676f 	.word	0x0800676f
 8006748:	0800677f 	.word	0x0800677f
 800674c:	0800677f 	.word	0x0800677f
 8006750:	0800677f 	.word	0x0800677f
 8006754:	08006777 	.word	0x08006777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006758:	f7fd fcfe 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 800675c:	61f8      	str	r0, [r7, #28]
        break;
 800675e:	e014      	b.n	800678a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006760:	f7fd fd10 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 8006764:	61f8      	str	r0, [r7, #28]
        break;
 8006766:	e010      	b.n	800678a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006768:	4b4c      	ldr	r3, [pc, #304]	@ (800689c <UART_SetConfig+0x508>)
 800676a:	61fb      	str	r3, [r7, #28]
        break;
 800676c:	e00d      	b.n	800678a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800676e:	f7fd fc5b 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8006772:	61f8      	str	r0, [r7, #28]
        break;
 8006774:	e009      	b.n	800678a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800677a:	61fb      	str	r3, [r7, #28]
        break;
 800677c:	e005      	b.n	800678a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d077      	beq.n	8006880 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	005a      	lsls	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	441a      	add	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2b0f      	cmp	r3, #15
 80067aa:	d916      	bls.n	80067da <UART_SetConfig+0x446>
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b2:	d212      	bcs.n	80067da <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f023 030f 	bic.w	r3, r3, #15
 80067bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	8afb      	ldrh	r3, [r7, #22]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	8afa      	ldrh	r2, [r7, #22]
 80067d6:	60da      	str	r2, [r3, #12]
 80067d8:	e052      	b.n	8006880 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067e0:	e04e      	b.n	8006880 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d827      	bhi.n	800683a <UART_SetConfig+0x4a6>
 80067ea:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <UART_SetConfig+0x45c>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006815 	.word	0x08006815
 80067f4:	0800681d 	.word	0x0800681d
 80067f8:	08006825 	.word	0x08006825
 80067fc:	0800683b 	.word	0x0800683b
 8006800:	0800682b 	.word	0x0800682b
 8006804:	0800683b 	.word	0x0800683b
 8006808:	0800683b 	.word	0x0800683b
 800680c:	0800683b 	.word	0x0800683b
 8006810:	08006833 	.word	0x08006833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006814:	f7fd fca0 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8006818:	61f8      	str	r0, [r7, #28]
        break;
 800681a:	e014      	b.n	8006846 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800681c:	f7fd fcb2 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 8006820:	61f8      	str	r0, [r7, #28]
        break;
 8006822:	e010      	b.n	8006846 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006824:	4b1d      	ldr	r3, [pc, #116]	@ (800689c <UART_SetConfig+0x508>)
 8006826:	61fb      	str	r3, [r7, #28]
        break;
 8006828:	e00d      	b.n	8006846 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800682a:	f7fd fbfd 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 800682e:	61f8      	str	r0, [r7, #28]
        break;
 8006830:	e009      	b.n	8006846 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006836:	61fb      	str	r3, [r7, #28]
        break;
 8006838:	e005      	b.n	8006846 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006844:	bf00      	nop
    }

    if (pclk != 0U)
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d019      	beq.n	8006880 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	085a      	lsrs	r2, r3, #1
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	441a      	add	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	fbb2 f3f3 	udiv	r3, r2, r3
 800685e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2b0f      	cmp	r3, #15
 8006864:	d909      	bls.n	800687a <UART_SetConfig+0x4e6>
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800686c:	d205      	bcs.n	800687a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60da      	str	r2, [r3, #12]
 8006878:	e002      	b.n	8006880 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800688c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006890:	4618      	mov	r0, r3
 8006892:	3728      	adds	r7, #40	@ 0x28
 8006894:	46bd      	mov	sp, r7
 8006896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800689a:	bf00      	nop
 800689c:	00f42400 	.word	0x00f42400

080068a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01a      	beq.n	80069b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800699e:	d10a      	bne.n	80069b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b098      	sub	sp, #96	@ 0x60
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069f4:	f7fb f836 	bl	8001a64 <HAL_GetTick>
 80069f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d12e      	bne.n	8006a66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a10:	2200      	movs	r2, #0
 8006a12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f88c 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d021      	beq.n	8006a66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e6      	bne.n	8006a22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e062      	b.n	8006b2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d149      	bne.n	8006b08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f856 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d03c      	beq.n	8006b08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae0:	61fa      	str	r2, [r7, #28]
 8006ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	69b9      	ldr	r1, [r7, #24]
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	617b      	str	r3, [r7, #20]
   return(result);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e5      	bne.n	8006ac0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e011      	b.n	8006b2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3758      	adds	r7, #88	@ 0x58
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	4613      	mov	r3, r2
 8006b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b44:	e04f      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d04b      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4e:	f7fa ff89 	bl	8001a64 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d302      	bcc.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e04e      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d037      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b80      	cmp	r3, #128	@ 0x80
 8006b7a:	d034      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b40      	cmp	r3, #64	@ 0x40
 8006b80:	d031      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d110      	bne.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2208      	movs	r2, #8
 8006b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f838 	bl	8006c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e029      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bc0:	d111      	bne.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f81e 	bl	8006c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e00f      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d0a0      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b095      	sub	sp, #84	@ 0x54
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e6      	bne.n	8006c16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3308      	adds	r3, #8
 8006c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e5      	bne.n	8006c48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d118      	bne.n	8006cb6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f023 0310 	bic.w	r3, r3, #16
 8006c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6979      	ldr	r1, [r7, #20]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e6      	bne.n	8006c84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cca:	bf00      	nop
 8006ccc:	3754      	adds	r7, #84	@ 0x54
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff fb37 	bl	8006368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b088      	sub	sp, #32
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6979      	ldr	r1, [r7, #20]
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	613b      	str	r3, [r7, #16]
   return(result);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e6      	bne.n	8006d0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff fb03 	bl	8006354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d4e:	bf00      	nop
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	4638      	mov	r0, r7
 8006d74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d8e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006d92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	43db      	mvns	r3, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	4013      	ands	r3, r2
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	4638      	mov	r0, r7
 8006de0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e4e:	2b84      	cmp	r3, #132	@ 0x84
 8006e50:	d005      	beq.n	8006e5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	3303      	adds	r3, #3
 8006e5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e70:	f000 fafc 	bl	800746c <vTaskStartScheduler>
  
  return osOK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7c:	b089      	sub	sp, #36	@ 0x24
 8006e7e:	af04      	add	r7, sp, #16
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d020      	beq.n	8006ece <osThreadCreate+0x54>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01c      	beq.n	8006ece <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685c      	ldr	r4, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691e      	ldr	r6, [r3, #16]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff ffc8 	bl	8006e3c <makeFreeRtosPriority>
 8006eac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006eb6:	9202      	str	r2, [sp, #8]
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	9100      	str	r1, [sp, #0]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 f8ed 	bl	80070a2 <xTaskCreateStatic>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e01c      	b.n	8006f08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685c      	ldr	r4, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006eda:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff ffaa 	bl	8006e3c <makeFreeRtosPriority>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f107 030c 	add.w	r3, r7, #12
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	9200      	str	r2, [sp, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	4632      	mov	r2, r6
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 f932 	bl	8007162 <xTaskCreate>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d001      	beq.n	8006f08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f08:	68fb      	ldr	r3, [r7, #12]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <osDelay+0x16>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	e000      	b.n	8006f2a <osDelay+0x18>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fa68 	bl	8007400 <vTaskDelay>
  
  return osOK;
 8006f30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f103 0208 	add.w	r2, r3, #8
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f103 0208 	add.w	r2, r3, #8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f103 0208 	add.w	r2, r3, #8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	601a      	str	r2, [r3, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d103      	bne.n	8006ffc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e00c      	b.n	8007016 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3308      	adds	r3, #8
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e002      	b.n	800700a <vListInsert+0x2e>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	429a      	cmp	r2, r3
 8007014:	d2f6      	bcs.n	8007004 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	601a      	str	r2, [r3, #0]
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6892      	ldr	r2, [r2, #8]
 8007064:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6852      	ldr	r2, [r2, #4]
 800706e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	429a      	cmp	r2, r3
 8007078:	d103      	bne.n	8007082 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	1e5a      	subs	r2, r3, #1
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b08e      	sub	sp, #56	@ 0x38
 80070a6:	af04      	add	r7, sp, #16
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10b      	bne.n	80070ce <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	e7fd      	b.n	80070ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <xTaskCreateStatic+0x4a>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	61fb      	str	r3, [r7, #28]
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070ec:	23a0      	movs	r3, #160	@ 0xa0
 80070ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80070f4:	d00b      	beq.n	800710e <xTaskCreateStatic+0x6c>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	61bb      	str	r3, [r7, #24]
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	e7fd      	b.n	800710a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800710e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007112:	2b00      	cmp	r3, #0
 8007114:	d01e      	beq.n	8007154 <xTaskCreateStatic+0xb2>
 8007116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01b      	beq.n	8007154 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007124:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	2202      	movs	r2, #2
 800712a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800712e:	2300      	movs	r3, #0
 8007130:	9303      	str	r3, [sp, #12]
 8007132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007134:	9302      	str	r3, [sp, #8]
 8007136:	f107 0314 	add.w	r3, r7, #20
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 f850 	bl	80071ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800714c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800714e:	f000 f8ed 	bl	800732c <prvAddNewTaskToReadyList>
 8007152:	e001      	b.n	8007158 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007158:	697b      	ldr	r3, [r7, #20]
	}
 800715a:	4618      	mov	r0, r3
 800715c:	3728      	adds	r7, #40	@ 0x28
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007162:	b580      	push	{r7, lr}
 8007164:	b08c      	sub	sp, #48	@ 0x30
 8007166:	af04      	add	r7, sp, #16
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	603b      	str	r3, [r7, #0]
 800716e:	4613      	mov	r3, r2
 8007170:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fefe 	bl	8007f78 <pvPortMalloc>
 800717c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007184:	20a0      	movs	r0, #160	@ 0xa0
 8007186:	f000 fef7 	bl	8007f78 <pvPortMalloc>
 800718a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	631a      	str	r2, [r3, #48]	@ 0x30
 8007198:	e005      	b.n	80071a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800719a:	6978      	ldr	r0, [r7, #20]
 800719c:	f000 ffba 	bl	8008114 <vPortFree>
 80071a0:	e001      	b.n	80071a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d017      	beq.n	80071dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071b4:	88fa      	ldrh	r2, [r7, #6]
 80071b6:	2300      	movs	r3, #0
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f80e 	bl	80071ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071d0:	69f8      	ldr	r0, [r7, #28]
 80071d2:	f000 f8ab 	bl	800732c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071d6:	2301      	movs	r3, #1
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	e002      	b.n	80071e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071dc:	f04f 33ff 	mov.w	r3, #4294967295
 80071e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071e2:	69bb      	ldr	r3, [r7, #24]
	}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007204:	3b01      	subs	r3, #1
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f023 0307 	bic.w	r3, r3, #7
 8007212:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00b      	beq.n	8007236 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	617b      	str	r3, [r7, #20]
}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	e7fd      	b.n	8007232 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01f      	beq.n	800727c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800723c:	2300      	movs	r3, #0
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	e012      	b.n	8007268 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	4413      	add	r3, r2
 8007248:	7819      	ldrb	r1, [r3, #0]
 800724a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	4413      	add	r3, r2
 8007250:	3334      	adds	r3, #52	@ 0x34
 8007252:	460a      	mov	r2, r1
 8007254:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	4413      	add	r3, r2
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d006      	beq.n	8007270 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	3301      	adds	r3, #1
 8007266:	61fb      	str	r3, [r7, #28]
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b0f      	cmp	r3, #15
 800726c:	d9e9      	bls.n	8007242 <prvInitialiseNewTask+0x56>
 800726e:	e000      	b.n	8007272 <prvInitialiseNewTask+0x86>
			{
				break;
 8007270:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800727a:	e003      	b.n	8007284 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007286:	2b06      	cmp	r3, #6
 8007288:	d901      	bls.n	800728e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800728a:	2306      	movs	r3, #6
 800728c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800728e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007292:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007298:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800729a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729c:	2200      	movs	r2, #0
 800729e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	3304      	adds	r3, #4
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff fe68 	bl	8006f7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	3318      	adds	r3, #24
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff fe63 	bl	8006f7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	f1c3 0207 	rsb	r2, r3, #7
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	334c      	adds	r3, #76	@ 0x4c
 80072de:	224c      	movs	r2, #76	@ 0x4c
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 f836 	bl	8008354 <memset>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007320 <prvInitialiseNewTask+0x134>)
 80072ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007324 <prvInitialiseNewTask+0x138>)
 80072f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007328 <prvInitialiseNewTask+0x13c>)
 80072f8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	68f9      	ldr	r1, [r7, #12]
 80072fe:	69b8      	ldr	r0, [r7, #24]
 8007300:	f000 fc2a 	bl	8007b58 <pxPortInitialiseStack>
 8007304:	4602      	mov	r2, r0
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800730a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007316:	bf00      	nop
 8007318:	3720      	adds	r7, #32
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20001790 	.word	0x20001790
 8007324:	200017f8 	.word	0x200017f8
 8007328:	20001860 	.word	0x20001860

0800732c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007334:	f000 fd40 	bl	8007db8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007338:	4b2a      	ldr	r3, [pc, #168]	@ (80073e4 <prvAddNewTaskToReadyList+0xb8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	4a29      	ldr	r2, [pc, #164]	@ (80073e4 <prvAddNewTaskToReadyList+0xb8>)
 8007340:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007342:	4b29      	ldr	r3, [pc, #164]	@ (80073e8 <prvAddNewTaskToReadyList+0xbc>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800734a:	4a27      	ldr	r2, [pc, #156]	@ (80073e8 <prvAddNewTaskToReadyList+0xbc>)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007350:	4b24      	ldr	r3, [pc, #144]	@ (80073e4 <prvAddNewTaskToReadyList+0xb8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d110      	bne.n	800737a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007358:	f000 fad4 	bl	8007904 <prvInitialiseTaskLists>
 800735c:	e00d      	b.n	800737a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800735e:	4b23      	ldr	r3, [pc, #140]	@ (80073ec <prvAddNewTaskToReadyList+0xc0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007366:	4b20      	ldr	r3, [pc, #128]	@ (80073e8 <prvAddNewTaskToReadyList+0xbc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007370:	429a      	cmp	r2, r3
 8007372:	d802      	bhi.n	800737a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007374:	4a1c      	ldr	r2, [pc, #112]	@ (80073e8 <prvAddNewTaskToReadyList+0xbc>)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800737a:	4b1d      	ldr	r3, [pc, #116]	@ (80073f0 <prvAddNewTaskToReadyList+0xc4>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3301      	adds	r3, #1
 8007380:	4a1b      	ldr	r2, [pc, #108]	@ (80073f0 <prvAddNewTaskToReadyList+0xc4>)
 8007382:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	2201      	movs	r2, #1
 800738a:	409a      	lsls	r2, r3
 800738c:	4b19      	ldr	r3, [pc, #100]	@ (80073f4 <prvAddNewTaskToReadyList+0xc8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4313      	orrs	r3, r2
 8007392:	4a18      	ldr	r2, [pc, #96]	@ (80073f4 <prvAddNewTaskToReadyList+0xc8>)
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4a15      	ldr	r2, [pc, #84]	@ (80073f8 <prvAddNewTaskToReadyList+0xcc>)
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7ff fdf1 	bl	8006f94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073b2:	f000 fd33 	bl	8007e1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073b6:	4b0d      	ldr	r3, [pc, #52]	@ (80073ec <prvAddNewTaskToReadyList+0xc0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00e      	beq.n	80073dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073be:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <prvAddNewTaskToReadyList+0xbc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d207      	bcs.n	80073dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073cc:	4b0b      	ldr	r3, [pc, #44]	@ (80073fc <prvAddNewTaskToReadyList+0xd0>)
 80073ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20000b84 	.word	0x20000b84
 80073e8:	20000a84 	.word	0x20000a84
 80073ec:	20000b90 	.word	0x20000b90
 80073f0:	20000ba0 	.word	0x20000ba0
 80073f4:	20000b8c 	.word	0x20000b8c
 80073f8:	20000a88 	.word	0x20000a88
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d018      	beq.n	8007444 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007412:	4b14      	ldr	r3, [pc, #80]	@ (8007464 <vTaskDelay+0x64>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00b      	beq.n	8007432 <vTaskDelay+0x32>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	60bb      	str	r3, [r7, #8]
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	e7fd      	b.n	800742e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007432:	f000 f885 	bl	8007540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007436:	2100      	movs	r1, #0
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb27 	bl	8007a8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800743e:	f000 f88d 	bl	800755c <xTaskResumeAll>
 8007442:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d107      	bne.n	800745a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800744a:	4b07      	ldr	r3, [pc, #28]	@ (8007468 <vTaskDelay+0x68>)
 800744c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000bac 	.word	0x20000bac
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	@ 0x28
 8007470:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800747a:	463a      	mov	r2, r7
 800747c:	1d39      	adds	r1, r7, #4
 800747e:	f107 0308 	add.w	r3, r7, #8
 8007482:	4618      	mov	r0, r3
 8007484:	f7f9 f84a 	bl	800051c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	9202      	str	r2, [sp, #8]
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	2300      	movs	r3, #0
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	2300      	movs	r3, #0
 8007498:	460a      	mov	r2, r1
 800749a:	4921      	ldr	r1, [pc, #132]	@ (8007520 <vTaskStartScheduler+0xb4>)
 800749c:	4821      	ldr	r0, [pc, #132]	@ (8007524 <vTaskStartScheduler+0xb8>)
 800749e:	f7ff fe00 	bl	80070a2 <xTaskCreateStatic>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4a20      	ldr	r2, [pc, #128]	@ (8007528 <vTaskStartScheduler+0xbc>)
 80074a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007528 <vTaskStartScheduler+0xbc>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074b0:	2301      	movs	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e001      	b.n	80074ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d11b      	bne.n	80074f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	613b      	str	r3, [r7, #16]
}
 80074d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074d4:	4b15      	ldr	r3, [pc, #84]	@ (800752c <vTaskStartScheduler+0xc0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	334c      	adds	r3, #76	@ 0x4c
 80074da:	4a15      	ldr	r2, [pc, #84]	@ (8007530 <vTaskStartScheduler+0xc4>)
 80074dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074de:	4b15      	ldr	r3, [pc, #84]	@ (8007534 <vTaskStartScheduler+0xc8>)
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074e6:	4b14      	ldr	r3, [pc, #80]	@ (8007538 <vTaskStartScheduler+0xcc>)
 80074e8:	2201      	movs	r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074ec:	4b13      	ldr	r3, [pc, #76]	@ (800753c <vTaskStartScheduler+0xd0>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074f2:	f000 fbbd 	bl	8007c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074f6:	e00f      	b.n	8007518 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fe:	d10b      	bne.n	8007518 <vTaskStartScheduler+0xac>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	60fb      	str	r3, [r7, #12]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <vTaskStartScheduler+0xa8>
}
 8007518:	bf00      	nop
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	080085b8 	.word	0x080085b8
 8007524:	080078d5 	.word	0x080078d5
 8007528:	20000ba8 	.word	0x20000ba8
 800752c:	20000a84 	.word	0x20000a84
 8007530:	20000010 	.word	0x20000010
 8007534:	20000ba4 	.word	0x20000ba4
 8007538:	20000b90 	.word	0x20000b90
 800753c:	20000b88 	.word	0x20000b88

08007540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007544:	4b04      	ldr	r3, [pc, #16]	@ (8007558 <vTaskSuspendAll+0x18>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	4a03      	ldr	r2, [pc, #12]	@ (8007558 <vTaskSuspendAll+0x18>)
 800754c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800754e:	bf00      	nop
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	20000bac 	.word	0x20000bac

0800755c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007566:	2300      	movs	r3, #0
 8007568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800756a:	4b42      	ldr	r3, [pc, #264]	@ (8007674 <xTaskResumeAll+0x118>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10b      	bne.n	800758a <xTaskResumeAll+0x2e>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	603b      	str	r3, [r7, #0]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800758a:	f000 fc15 	bl	8007db8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800758e:	4b39      	ldr	r3, [pc, #228]	@ (8007674 <xTaskResumeAll+0x118>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3b01      	subs	r3, #1
 8007594:	4a37      	ldr	r2, [pc, #220]	@ (8007674 <xTaskResumeAll+0x118>)
 8007596:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007598:	4b36      	ldr	r3, [pc, #216]	@ (8007674 <xTaskResumeAll+0x118>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d161      	bne.n	8007664 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075a0:	4b35      	ldr	r3, [pc, #212]	@ (8007678 <xTaskResumeAll+0x11c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d05d      	beq.n	8007664 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075a8:	e02e      	b.n	8007608 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075aa:	4b34      	ldr	r3, [pc, #208]	@ (800767c <xTaskResumeAll+0x120>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3318      	adds	r3, #24
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff fd49 	bl	800704e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3304      	adds	r3, #4
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fd44 	bl	800704e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	2201      	movs	r2, #1
 80075cc:	409a      	lsls	r2, r3
 80075ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007680 <xTaskResumeAll+0x124>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007680 <xTaskResumeAll+0x124>)
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4a27      	ldr	r2, [pc, #156]	@ (8007684 <xTaskResumeAll+0x128>)
 80075e6:	441a      	add	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4619      	mov	r1, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	f7ff fcd0 	bl	8006f94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f8:	4b23      	ldr	r3, [pc, #140]	@ (8007688 <xTaskResumeAll+0x12c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fe:	429a      	cmp	r2, r3
 8007600:	d302      	bcc.n	8007608 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007602:	4b22      	ldr	r3, [pc, #136]	@ (800768c <xTaskResumeAll+0x130>)
 8007604:	2201      	movs	r2, #1
 8007606:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007608:	4b1c      	ldr	r3, [pc, #112]	@ (800767c <xTaskResumeAll+0x120>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1cc      	bne.n	80075aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007616:	f000 fa19 	bl	8007a4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800761a:	4b1d      	ldr	r3, [pc, #116]	@ (8007690 <xTaskResumeAll+0x134>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d010      	beq.n	8007648 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007626:	f000 f837 	bl	8007698 <xTaskIncrementTick>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007630:	4b16      	ldr	r3, [pc, #88]	@ (800768c <xTaskResumeAll+0x130>)
 8007632:	2201      	movs	r2, #1
 8007634:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3b01      	subs	r3, #1
 800763a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f1      	bne.n	8007626 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007642:	4b13      	ldr	r3, [pc, #76]	@ (8007690 <xTaskResumeAll+0x134>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007648:	4b10      	ldr	r3, [pc, #64]	@ (800768c <xTaskResumeAll+0x130>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007650:	2301      	movs	r3, #1
 8007652:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007654:	4b0f      	ldr	r3, [pc, #60]	@ (8007694 <xTaskResumeAll+0x138>)
 8007656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007664:	f000 fbda 	bl	8007e1c <vPortExitCritical>

	return xAlreadyYielded;
 8007668:	68bb      	ldr	r3, [r7, #8]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20000bac 	.word	0x20000bac
 8007678:	20000b84 	.word	0x20000b84
 800767c:	20000b44 	.word	0x20000b44
 8007680:	20000b8c 	.word	0x20000b8c
 8007684:	20000a88 	.word	0x20000a88
 8007688:	20000a84 	.word	0x20000a84
 800768c:	20000b98 	.word	0x20000b98
 8007690:	20000b94 	.word	0x20000b94
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a2:	4b4f      	ldr	r3, [pc, #316]	@ (80077e0 <xTaskIncrementTick+0x148>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f040 808f 	bne.w	80077ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076ac:	4b4d      	ldr	r3, [pc, #308]	@ (80077e4 <xTaskIncrementTick+0x14c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076b4:	4a4b      	ldr	r2, [pc, #300]	@ (80077e4 <xTaskIncrementTick+0x14c>)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d121      	bne.n	8007704 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076c0:	4b49      	ldr	r3, [pc, #292]	@ (80077e8 <xTaskIncrementTick+0x150>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00b      	beq.n	80076e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	603b      	str	r3, [r7, #0]
}
 80076dc:	bf00      	nop
 80076de:	bf00      	nop
 80076e0:	e7fd      	b.n	80076de <xTaskIncrementTick+0x46>
 80076e2:	4b41      	ldr	r3, [pc, #260]	@ (80077e8 <xTaskIncrementTick+0x150>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	4b40      	ldr	r3, [pc, #256]	@ (80077ec <xTaskIncrementTick+0x154>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a3e      	ldr	r2, [pc, #248]	@ (80077e8 <xTaskIncrementTick+0x150>)
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	4a3e      	ldr	r2, [pc, #248]	@ (80077ec <xTaskIncrementTick+0x154>)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	4b3e      	ldr	r3, [pc, #248]	@ (80077f0 <xTaskIncrementTick+0x158>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3301      	adds	r3, #1
 80076fc:	4a3c      	ldr	r2, [pc, #240]	@ (80077f0 <xTaskIncrementTick+0x158>)
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	f000 f9a4 	bl	8007a4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007704:	4b3b      	ldr	r3, [pc, #236]	@ (80077f4 <xTaskIncrementTick+0x15c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	429a      	cmp	r2, r3
 800770c:	d348      	bcc.n	80077a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800770e:	4b36      	ldr	r3, [pc, #216]	@ (80077e8 <xTaskIncrementTick+0x150>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d104      	bne.n	8007722 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007718:	4b36      	ldr	r3, [pc, #216]	@ (80077f4 <xTaskIncrementTick+0x15c>)
 800771a:	f04f 32ff 	mov.w	r2, #4294967295
 800771e:	601a      	str	r2, [r3, #0]
					break;
 8007720:	e03e      	b.n	80077a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007722:	4b31      	ldr	r3, [pc, #196]	@ (80077e8 <xTaskIncrementTick+0x150>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	429a      	cmp	r2, r3
 8007738:	d203      	bcs.n	8007742 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800773a:	4a2e      	ldr	r2, [pc, #184]	@ (80077f4 <xTaskIncrementTick+0x15c>)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007740:	e02e      	b.n	80077a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fc81 	bl	800704e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007750:	2b00      	cmp	r3, #0
 8007752:	d004      	beq.n	800775e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	3318      	adds	r3, #24
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff fc78 	bl	800704e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007762:	2201      	movs	r2, #1
 8007764:	409a      	lsls	r2, r3
 8007766:	4b24      	ldr	r3, [pc, #144]	@ (80077f8 <xTaskIncrementTick+0x160>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4313      	orrs	r3, r2
 800776c:	4a22      	ldr	r2, [pc, #136]	@ (80077f8 <xTaskIncrementTick+0x160>)
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4a1f      	ldr	r2, [pc, #124]	@ (80077fc <xTaskIncrementTick+0x164>)
 800777e:	441a      	add	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3304      	adds	r3, #4
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f7ff fc04 	bl	8006f94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007790:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <xTaskIncrementTick+0x168>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	429a      	cmp	r2, r3
 8007798:	d3b9      	bcc.n	800770e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800779a:	2301      	movs	r3, #1
 800779c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800779e:	e7b6      	b.n	800770e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077a0:	4b17      	ldr	r3, [pc, #92]	@ (8007800 <xTaskIncrementTick+0x168>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a6:	4915      	ldr	r1, [pc, #84]	@ (80077fc <xTaskIncrementTick+0x164>)
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	440b      	add	r3, r1
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d901      	bls.n	80077bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80077b8:	2301      	movs	r3, #1
 80077ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077bc:	4b11      	ldr	r3, [pc, #68]	@ (8007804 <xTaskIncrementTick+0x16c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d007      	beq.n	80077d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80077c4:	2301      	movs	r3, #1
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e004      	b.n	80077d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007808 <xTaskIncrementTick+0x170>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3301      	adds	r3, #1
 80077d0:	4a0d      	ldr	r2, [pc, #52]	@ (8007808 <xTaskIncrementTick+0x170>)
 80077d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077d4:	697b      	ldr	r3, [r7, #20]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000bac 	.word	0x20000bac
 80077e4:	20000b88 	.word	0x20000b88
 80077e8:	20000b3c 	.word	0x20000b3c
 80077ec:	20000b40 	.word	0x20000b40
 80077f0:	20000b9c 	.word	0x20000b9c
 80077f4:	20000ba4 	.word	0x20000ba4
 80077f8:	20000b8c 	.word	0x20000b8c
 80077fc:	20000a88 	.word	0x20000a88
 8007800:	20000a84 	.word	0x20000a84
 8007804:	20000b98 	.word	0x20000b98
 8007808:	20000b94 	.word	0x20000b94

0800780c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007812:	4b2a      	ldr	r3, [pc, #168]	@ (80078bc <vTaskSwitchContext+0xb0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800781a:	4b29      	ldr	r3, [pc, #164]	@ (80078c0 <vTaskSwitchContext+0xb4>)
 800781c:	2201      	movs	r2, #1
 800781e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007820:	e045      	b.n	80078ae <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007822:	4b27      	ldr	r3, [pc, #156]	@ (80078c0 <vTaskSwitchContext+0xb4>)
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007828:	4b26      	ldr	r3, [pc, #152]	@ (80078c4 <vTaskSwitchContext+0xb8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	fab3 f383 	clz	r3, r3
 8007834:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	f1c3 031f 	rsb	r3, r3, #31
 800783c:	617b      	str	r3, [r7, #20]
 800783e:	4922      	ldr	r1, [pc, #136]	@ (80078c8 <vTaskSwitchContext+0xbc>)
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	607b      	str	r3, [r7, #4]
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	e7fd      	b.n	8007866 <vTaskSwitchContext+0x5a>
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4a14      	ldr	r2, [pc, #80]	@ (80078c8 <vTaskSwitchContext+0xbc>)
 8007876:	4413      	add	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	605a      	str	r2, [r3, #4]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3308      	adds	r3, #8
 800788c:	429a      	cmp	r2, r3
 800788e:	d104      	bne.n	800789a <vTaskSwitchContext+0x8e>
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	605a      	str	r2, [r3, #4]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	4a0a      	ldr	r2, [pc, #40]	@ (80078cc <vTaskSwitchContext+0xc0>)
 80078a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078a4:	4b09      	ldr	r3, [pc, #36]	@ (80078cc <vTaskSwitchContext+0xc0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	334c      	adds	r3, #76	@ 0x4c
 80078aa:	4a09      	ldr	r2, [pc, #36]	@ (80078d0 <vTaskSwitchContext+0xc4>)
 80078ac:	6013      	str	r3, [r2, #0]
}
 80078ae:	bf00      	nop
 80078b0:	371c      	adds	r7, #28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20000bac 	.word	0x20000bac
 80078c0:	20000b98 	.word	0x20000b98
 80078c4:	20000b8c 	.word	0x20000b8c
 80078c8:	20000a88 	.word	0x20000a88
 80078cc:	20000a84 	.word	0x20000a84
 80078d0:	20000010 	.word	0x20000010

080078d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078dc:	f000 f852 	bl	8007984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078e0:	4b06      	ldr	r3, [pc, #24]	@ (80078fc <prvIdleTask+0x28>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d9f9      	bls.n	80078dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80078e8:	4b05      	ldr	r3, [pc, #20]	@ (8007900 <prvIdleTask+0x2c>)
 80078ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078f8:	e7f0      	b.n	80078dc <prvIdleTask+0x8>
 80078fa:	bf00      	nop
 80078fc:	20000a88 	.word	0x20000a88
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800790a:	2300      	movs	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	e00c      	b.n	800792a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4a12      	ldr	r2, [pc, #72]	@ (8007964 <prvInitialiseTaskLists+0x60>)
 800791c:	4413      	add	r3, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fb0b 	bl	8006f3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3301      	adds	r3, #1
 8007928:	607b      	str	r3, [r7, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b06      	cmp	r3, #6
 800792e:	d9ef      	bls.n	8007910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007930:	480d      	ldr	r0, [pc, #52]	@ (8007968 <prvInitialiseTaskLists+0x64>)
 8007932:	f7ff fb02 	bl	8006f3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007936:	480d      	ldr	r0, [pc, #52]	@ (800796c <prvInitialiseTaskLists+0x68>)
 8007938:	f7ff faff 	bl	8006f3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800793c:	480c      	ldr	r0, [pc, #48]	@ (8007970 <prvInitialiseTaskLists+0x6c>)
 800793e:	f7ff fafc 	bl	8006f3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007942:	480c      	ldr	r0, [pc, #48]	@ (8007974 <prvInitialiseTaskLists+0x70>)
 8007944:	f7ff faf9 	bl	8006f3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007948:	480b      	ldr	r0, [pc, #44]	@ (8007978 <prvInitialiseTaskLists+0x74>)
 800794a:	f7ff faf6 	bl	8006f3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800794e:	4b0b      	ldr	r3, [pc, #44]	@ (800797c <prvInitialiseTaskLists+0x78>)
 8007950:	4a05      	ldr	r2, [pc, #20]	@ (8007968 <prvInitialiseTaskLists+0x64>)
 8007952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007954:	4b0a      	ldr	r3, [pc, #40]	@ (8007980 <prvInitialiseTaskLists+0x7c>)
 8007956:	4a05      	ldr	r2, [pc, #20]	@ (800796c <prvInitialiseTaskLists+0x68>)
 8007958:	601a      	str	r2, [r3, #0]
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000a88 	.word	0x20000a88
 8007968:	20000b14 	.word	0x20000b14
 800796c:	20000b28 	.word	0x20000b28
 8007970:	20000b44 	.word	0x20000b44
 8007974:	20000b58 	.word	0x20000b58
 8007978:	20000b70 	.word	0x20000b70
 800797c:	20000b3c 	.word	0x20000b3c
 8007980:	20000b40 	.word	0x20000b40

08007984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800798a:	e019      	b.n	80079c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800798c:	f000 fa14 	bl	8007db8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007990:	4b10      	ldr	r3, [pc, #64]	@ (80079d4 <prvCheckTasksWaitingTermination+0x50>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3304      	adds	r3, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff fb56 	bl	800704e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079a2:	4b0d      	ldr	r3, [pc, #52]	@ (80079d8 <prvCheckTasksWaitingTermination+0x54>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	4a0b      	ldr	r2, [pc, #44]	@ (80079d8 <prvCheckTasksWaitingTermination+0x54>)
 80079aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079ac:	4b0b      	ldr	r3, [pc, #44]	@ (80079dc <prvCheckTasksWaitingTermination+0x58>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	4a0a      	ldr	r2, [pc, #40]	@ (80079dc <prvCheckTasksWaitingTermination+0x58>)
 80079b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079b6:	f000 fa31 	bl	8007e1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f810 	bl	80079e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079c0:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <prvCheckTasksWaitingTermination+0x58>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e1      	bne.n	800798c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000b58 	.word	0x20000b58
 80079d8:	20000b84 	.word	0x20000b84
 80079dc:	20000b6c 	.word	0x20000b6c

080079e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	334c      	adds	r3, #76	@ 0x4c
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fcb9 	bl	8008364 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d108      	bne.n	8007a0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fb87 	bl	8008114 <vPortFree>
				vPortFree( pxTCB );
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fb84 	bl	8008114 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a0c:	e019      	b.n	8007a42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d103      	bne.n	8007a20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fb7b 	bl	8008114 <vPortFree>
	}
 8007a1e:	e010      	b.n	8007a42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d00b      	beq.n	8007a42 <prvDeleteTCB+0x62>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	60fb      	str	r3, [r7, #12]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <prvDeleteTCB+0x5e>
	}
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a52:	4b0c      	ldr	r3, [pc, #48]	@ (8007a84 <prvResetNextTaskUnblockTime+0x38>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <prvResetNextTaskUnblockTime+0x3c>)
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a64:	e008      	b.n	8007a78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a66:	4b07      	ldr	r3, [pc, #28]	@ (8007a84 <prvResetNextTaskUnblockTime+0x38>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4a04      	ldr	r2, [pc, #16]	@ (8007a88 <prvResetNextTaskUnblockTime+0x3c>)
 8007a76:	6013      	str	r3, [r2, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	20000b3c 	.word	0x20000b3c
 8007a88:	20000ba4 	.word	0x20000ba4

08007a8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a96:	4b29      	ldr	r3, [pc, #164]	@ (8007b3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a9c:	4b28      	ldr	r3, [pc, #160]	@ (8007b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff fad3 	bl	800704e <uxListRemove>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10b      	bne.n	8007ac6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007aae:	4b24      	ldr	r3, [pc, #144]	@ (8007b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	43da      	mvns	r2, r3
 8007abc:	4b21      	ldr	r3, [pc, #132]	@ (8007b44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	4a20      	ldr	r2, [pc, #128]	@ (8007b44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ac4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d10a      	bne.n	8007ae4 <prvAddCurrentTaskToDelayedList+0x58>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d007      	beq.n	8007ae4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	481a      	ldr	r0, [pc, #104]	@ (8007b48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ade:	f7ff fa59 	bl	8006f94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ae2:	e026      	b.n	8007b32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4413      	add	r3, r2
 8007aea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007aec:	4b14      	ldr	r3, [pc, #80]	@ (8007b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d209      	bcs.n	8007b10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afc:	4b13      	ldr	r3, [pc, #76]	@ (8007b4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	4b0f      	ldr	r3, [pc, #60]	@ (8007b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3304      	adds	r3, #4
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f7ff fa67 	bl	8006fdc <vListInsert>
}
 8007b0e:	e010      	b.n	8007b32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b10:	4b0f      	ldr	r3, [pc, #60]	@ (8007b50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	4b0a      	ldr	r3, [pc, #40]	@ (8007b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7ff fa5d 	bl	8006fdc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b22:	4b0c      	ldr	r3, [pc, #48]	@ (8007b54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d202      	bcs.n	8007b32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b2c:	4a09      	ldr	r2, [pc, #36]	@ (8007b54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6013      	str	r3, [r2, #0]
}
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000b88 	.word	0x20000b88
 8007b40:	20000a84 	.word	0x20000a84
 8007b44:	20000b8c 	.word	0x20000b8c
 8007b48:	20000b70 	.word	0x20000b70
 8007b4c:	20000b40 	.word	0x20000b40
 8007b50:	20000b3c 	.word	0x20000b3c
 8007b54:	20000ba4 	.word	0x20000ba4

08007b58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3b04      	subs	r3, #4
 8007b68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3b04      	subs	r3, #4
 8007b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f023 0201 	bic.w	r2, r3, #1
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3b04      	subs	r3, #4
 8007b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b88:	4a0c      	ldr	r2, [pc, #48]	@ (8007bbc <pxPortInitialiseStack+0x64>)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3b14      	subs	r3, #20
 8007b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f06f 0202 	mvn.w	r2, #2
 8007ba6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3b20      	subs	r3, #32
 8007bac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	08007bc1 	.word	0x08007bc1

08007bc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bca:	4b13      	ldr	r3, [pc, #76]	@ (8007c18 <prvTaskExitError+0x58>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd2:	d00b      	beq.n	8007bec <prvTaskExitError+0x2c>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
}
 8007be6:	bf00      	nop
 8007be8:	bf00      	nop
 8007bea:	e7fd      	b.n	8007be8 <prvTaskExitError+0x28>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60bb      	str	r3, [r7, #8]
}
 8007bfe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c00:	bf00      	nop
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0fc      	beq.n	8007c02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	2000000c 	.word	0x2000000c
 8007c1c:	00000000 	.word	0x00000000

08007c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c20:	4b07      	ldr	r3, [pc, #28]	@ (8007c40 <pxCurrentTCBConst2>)
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	6808      	ldr	r0, [r1, #0]
 8007c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	f380 8809 	msr	PSP, r0
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8811 	msr	BASEPRI, r0
 8007c3a:	4770      	bx	lr
 8007c3c:	f3af 8000 	nop.w

08007c40 <pxCurrentTCBConst2>:
 8007c40:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop

08007c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c48:	4808      	ldr	r0, [pc, #32]	@ (8007c6c <prvPortStartFirstTask+0x24>)
 8007c4a:	6800      	ldr	r0, [r0, #0]
 8007c4c:	6800      	ldr	r0, [r0, #0]
 8007c4e:	f380 8808 	msr	MSP, r0
 8007c52:	f04f 0000 	mov.w	r0, #0
 8007c56:	f380 8814 	msr	CONTROL, r0
 8007c5a:	b662      	cpsie	i
 8007c5c:	b661      	cpsie	f
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	df00      	svc	0
 8007c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c6a:	bf00      	nop
 8007c6c:	e000ed08 	.word	0xe000ed08

08007c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c76:	4b47      	ldr	r3, [pc, #284]	@ (8007d94 <xPortStartScheduler+0x124>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a47      	ldr	r2, [pc, #284]	@ (8007d98 <xPortStartScheduler+0x128>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10b      	bne.n	8007c98 <xPortStartScheduler+0x28>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60fb      	str	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c98:	4b3e      	ldr	r3, [pc, #248]	@ (8007d94 <xPortStartScheduler+0x124>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d9c <xPortStartScheduler+0x12c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d10b      	bne.n	8007cba <xPortStartScheduler+0x4a>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	613b      	str	r3, [r7, #16]
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	e7fd      	b.n	8007cb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cba:	4b39      	ldr	r3, [pc, #228]	@ (8007da0 <xPortStartScheduler+0x130>)
 8007cbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	22ff      	movs	r2, #255	@ 0xff
 8007cca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	4b31      	ldr	r3, [pc, #196]	@ (8007da4 <xPortStartScheduler+0x134>)
 8007ce0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ce2:	4b31      	ldr	r3, [pc, #196]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007ce4:	2207      	movs	r2, #7
 8007ce6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ce8:	e009      	b.n	8007cfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007cea:	4b2f      	ldr	r3, [pc, #188]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007cf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d06:	2b80      	cmp	r3, #128	@ 0x80
 8007d08:	d0ef      	beq.n	8007cea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d0a:	4b27      	ldr	r3, [pc, #156]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1c3 0307 	rsb	r3, r3, #7
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d00b      	beq.n	8007d2e <xPortStartScheduler+0xbe>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60bb      	str	r3, [r7, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	e7fd      	b.n	8007d2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	4a1c      	ldr	r2, [pc, #112]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d38:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d40:	4a19      	ldr	r2, [pc, #100]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d4c:	4b17      	ldr	r3, [pc, #92]	@ (8007dac <xPortStartScheduler+0x13c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a16      	ldr	r2, [pc, #88]	@ (8007dac <xPortStartScheduler+0x13c>)
 8007d52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d58:	4b14      	ldr	r3, [pc, #80]	@ (8007dac <xPortStartScheduler+0x13c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a13      	ldr	r2, [pc, #76]	@ (8007dac <xPortStartScheduler+0x13c>)
 8007d5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d64:	f000 f8da 	bl	8007f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d68:	4b11      	ldr	r3, [pc, #68]	@ (8007db0 <xPortStartScheduler+0x140>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d6e:	f000 f8f9 	bl	8007f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d72:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <xPortStartScheduler+0x144>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a0f      	ldr	r2, [pc, #60]	@ (8007db4 <xPortStartScheduler+0x144>)
 8007d78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d7e:	f7ff ff63 	bl	8007c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d82:	f7ff fd43 	bl	800780c <vTaskSwitchContext>
	prvTaskExitError();
 8007d86:	f7ff ff1b 	bl	8007bc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	e000ed00 	.word	0xe000ed00
 8007d98:	410fc271 	.word	0x410fc271
 8007d9c:	410fc270 	.word	0x410fc270
 8007da0:	e000e400 	.word	0xe000e400
 8007da4:	20000bb0 	.word	0x20000bb0
 8007da8:	20000bb4 	.word	0x20000bb4
 8007dac:	e000ed20 	.word	0xe000ed20
 8007db0:	2000000c 	.word	0x2000000c
 8007db4:	e000ef34 	.word	0xe000ef34

08007db8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	607b      	str	r3, [r7, #4]
}
 8007dd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dd2:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <vPortEnterCritical+0x5c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8007e14 <vPortEnterCritical+0x5c>)
 8007dda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <vPortEnterCritical+0x5c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d110      	bne.n	8007e06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007de4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e18 <vPortEnterCritical+0x60>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <vPortEnterCritical+0x4e>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	603b      	str	r3, [r7, #0]
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <vPortEnterCritical+0x4a>
	}
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	2000000c 	.word	0x2000000c
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e22:	4b12      	ldr	r3, [pc, #72]	@ (8007e6c <vPortExitCritical+0x50>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10b      	bne.n	8007e42 <vPortExitCritical+0x26>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	607b      	str	r3, [r7, #4]
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	e7fd      	b.n	8007e3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e42:	4b0a      	ldr	r3, [pc, #40]	@ (8007e6c <vPortExitCritical+0x50>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	4a08      	ldr	r2, [pc, #32]	@ (8007e6c <vPortExitCritical+0x50>)
 8007e4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e4c:	4b07      	ldr	r3, [pc, #28]	@ (8007e6c <vPortExitCritical+0x50>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <vPortExitCritical+0x44>
 8007e54:	2300      	movs	r3, #0
 8007e56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	2000000c 	.word	0x2000000c

08007e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e70:	f3ef 8009 	mrs	r0, PSP
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4b15      	ldr	r3, [pc, #84]	@ (8007ed0 <pxCurrentTCBConst>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	f01e 0f10 	tst.w	lr, #16
 8007e80:	bf08      	it	eq
 8007e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	6010      	str	r0, [r2, #0]
 8007e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e94:	f380 8811 	msr	BASEPRI, r0
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f7ff fcb4 	bl	800780c <vTaskSwitchContext>
 8007ea4:	f04f 0000 	mov.w	r0, #0
 8007ea8:	f380 8811 	msr	BASEPRI, r0
 8007eac:	bc09      	pop	{r0, r3}
 8007eae:	6819      	ldr	r1, [r3, #0]
 8007eb0:	6808      	ldr	r0, [r1, #0]
 8007eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb6:	f01e 0f10 	tst.w	lr, #16
 8007eba:	bf08      	it	eq
 8007ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ec0:	f380 8809 	msr	PSP, r0
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	f3af 8000 	nop.w

08007ed0 <pxCurrentTCBConst>:
 8007ed0:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop

08007ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	607b      	str	r3, [r7, #4]
}
 8007ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ef2:	f7ff fbd1 	bl	8007698 <xTaskIncrementTick>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007efc:	4b06      	ldr	r3, [pc, #24]	@ (8007f18 <SysTick_Handler+0x40>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	f383 8811 	msr	BASEPRI, r3
}
 8007f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f10:	bf00      	nop
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f20:	4b0b      	ldr	r3, [pc, #44]	@ (8007f50 <vPortSetupTimerInterrupt+0x34>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f26:	4b0b      	ldr	r3, [pc, #44]	@ (8007f54 <vPortSetupTimerInterrupt+0x38>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f58 <vPortSetupTimerInterrupt+0x3c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0a      	ldr	r2, [pc, #40]	@ (8007f5c <vPortSetupTimerInterrupt+0x40>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	099b      	lsrs	r3, r3, #6
 8007f38:	4a09      	ldr	r2, [pc, #36]	@ (8007f60 <vPortSetupTimerInterrupt+0x44>)
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f3e:	4b04      	ldr	r3, [pc, #16]	@ (8007f50 <vPortSetupTimerInterrupt+0x34>)
 8007f40:	2207      	movs	r2, #7
 8007f42:	601a      	str	r2, [r3, #0]
}
 8007f44:	bf00      	nop
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	e000e010 	.word	0xe000e010
 8007f54:	e000e018 	.word	0xe000e018
 8007f58:	20000000 	.word	0x20000000
 8007f5c:	10624dd3 	.word	0x10624dd3
 8007f60:	e000e014 	.word	0xe000e014

08007f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f74 <vPortEnableVFP+0x10>
 8007f68:	6801      	ldr	r1, [r0, #0]
 8007f6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f6e:	6001      	str	r1, [r0, #0]
 8007f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f72:	bf00      	nop
 8007f74:	e000ed88 	.word	0xe000ed88

08007f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	@ 0x28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f84:	f7ff fadc 	bl	8007540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f88:	4b5c      	ldr	r3, [pc, #368]	@ (80080fc <pvPortMalloc+0x184>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f90:	f000 f924 	bl	80081dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f94:	4b5a      	ldr	r3, [pc, #360]	@ (8008100 <pvPortMalloc+0x188>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f040 8095 	bne.w	80080cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01e      	beq.n	8007fe6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007fa8:	2208      	movs	r2, #8
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d015      	beq.n	8007fe6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f023 0307 	bic.w	r3, r3, #7
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <pvPortMalloc+0x6e>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	617b      	str	r3, [r7, #20]
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	e7fd      	b.n	8007fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d06f      	beq.n	80080cc <pvPortMalloc+0x154>
 8007fec:	4b45      	ldr	r3, [pc, #276]	@ (8008104 <pvPortMalloc+0x18c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d86a      	bhi.n	80080cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ff6:	4b44      	ldr	r3, [pc, #272]	@ (8008108 <pvPortMalloc+0x190>)
 8007ff8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ffa:	4b43      	ldr	r3, [pc, #268]	@ (8008108 <pvPortMalloc+0x190>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008000:	e004      	b.n	800800c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008004:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	429a      	cmp	r2, r3
 8008014:	d903      	bls.n	800801e <pvPortMalloc+0xa6>
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f1      	bne.n	8008002 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800801e:	4b37      	ldr	r3, [pc, #220]	@ (80080fc <pvPortMalloc+0x184>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008024:	429a      	cmp	r2, r3
 8008026:	d051      	beq.n	80080cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2208      	movs	r2, #8
 800802e:	4413      	add	r3, r2
 8008030:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	1ad2      	subs	r2, r2, r3
 8008042:	2308      	movs	r3, #8
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	429a      	cmp	r2, r3
 8008048:	d920      	bls.n	800808c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800804a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4413      	add	r3, r2
 8008050:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f003 0307 	and.w	r3, r3, #7
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <pvPortMalloc+0xfc>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	613b      	str	r3, [r7, #16]
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	e7fd      	b.n	8008070 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	1ad2      	subs	r2, r2, r3
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008086:	69b8      	ldr	r0, [r7, #24]
 8008088:	f000 f90a 	bl	80082a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800808c:	4b1d      	ldr	r3, [pc, #116]	@ (8008104 <pvPortMalloc+0x18c>)
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	4a1b      	ldr	r2, [pc, #108]	@ (8008104 <pvPortMalloc+0x18c>)
 8008098:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800809a:	4b1a      	ldr	r3, [pc, #104]	@ (8008104 <pvPortMalloc+0x18c>)
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	4b1b      	ldr	r3, [pc, #108]	@ (800810c <pvPortMalloc+0x194>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d203      	bcs.n	80080ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080a6:	4b17      	ldr	r3, [pc, #92]	@ (8008104 <pvPortMalloc+0x18c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a18      	ldr	r2, [pc, #96]	@ (800810c <pvPortMalloc+0x194>)
 80080ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	4b13      	ldr	r3, [pc, #76]	@ (8008100 <pvPortMalloc+0x188>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	431a      	orrs	r2, r3
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080c2:	4b13      	ldr	r3, [pc, #76]	@ (8008110 <pvPortMalloc+0x198>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3301      	adds	r3, #1
 80080c8:	4a11      	ldr	r2, [pc, #68]	@ (8008110 <pvPortMalloc+0x198>)
 80080ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080cc:	f7ff fa46 	bl	800755c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00b      	beq.n	80080f2 <pvPortMalloc+0x17a>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	60fb      	str	r3, [r7, #12]
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	e7fd      	b.n	80080ee <pvPortMalloc+0x176>
	return pvReturn;
 80080f2:	69fb      	ldr	r3, [r7, #28]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3728      	adds	r7, #40	@ 0x28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20001778 	.word	0x20001778
 8008100:	2000178c 	.word	0x2000178c
 8008104:	2000177c 	.word	0x2000177c
 8008108:	20001770 	.word	0x20001770
 800810c:	20001780 	.word	0x20001780
 8008110:	20001784 	.word	0x20001784

08008114 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d04f      	beq.n	80081c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008126:	2308      	movs	r3, #8
 8008128:	425b      	negs	r3, r3
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	4413      	add	r3, r2
 800812e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	4b25      	ldr	r3, [pc, #148]	@ (80081d0 <vPortFree+0xbc>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4013      	ands	r3, r2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10b      	bne.n	800815a <vPortFree+0x46>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	60fb      	str	r3, [r7, #12]
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop
 8008158:	e7fd      	b.n	8008156 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00b      	beq.n	800817a <vPortFree+0x66>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	60bb      	str	r3, [r7, #8]
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	e7fd      	b.n	8008176 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	4b14      	ldr	r3, [pc, #80]	@ (80081d0 <vPortFree+0xbc>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4013      	ands	r3, r2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01e      	beq.n	80081c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d11a      	bne.n	80081c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	4b0e      	ldr	r3, [pc, #56]	@ (80081d0 <vPortFree+0xbc>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	43db      	mvns	r3, r3
 800819a:	401a      	ands	r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081a0:	f7ff f9ce 	bl	8007540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	4b0a      	ldr	r3, [pc, #40]	@ (80081d4 <vPortFree+0xc0>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4413      	add	r3, r2
 80081ae:	4a09      	ldr	r2, [pc, #36]	@ (80081d4 <vPortFree+0xc0>)
 80081b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081b2:	6938      	ldr	r0, [r7, #16]
 80081b4:	f000 f874 	bl	80082a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081b8:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <vPortFree+0xc4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3301      	adds	r3, #1
 80081be:	4a06      	ldr	r2, [pc, #24]	@ (80081d8 <vPortFree+0xc4>)
 80081c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081c2:	f7ff f9cb 	bl	800755c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081c6:	bf00      	nop
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	2000178c 	.word	0x2000178c
 80081d4:	2000177c 	.word	0x2000177c
 80081d8:	20001788 	.word	0x20001788

080081dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081e2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80081e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081e8:	4b27      	ldr	r3, [pc, #156]	@ (8008288 <prvHeapInit+0xac>)
 80081ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00c      	beq.n	8008210 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3307      	adds	r3, #7
 80081fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 0307 	bic.w	r3, r3, #7
 8008202:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	4a1f      	ldr	r2, [pc, #124]	@ (8008288 <prvHeapInit+0xac>)
 800820c:	4413      	add	r3, r2
 800820e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008214:	4a1d      	ldr	r2, [pc, #116]	@ (800828c <prvHeapInit+0xb0>)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800821a:	4b1c      	ldr	r3, [pc, #112]	@ (800828c <prvHeapInit+0xb0>)
 800821c:	2200      	movs	r2, #0
 800821e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	4413      	add	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008228:	2208      	movs	r2, #8
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0307 	bic.w	r3, r3, #7
 8008236:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4a15      	ldr	r2, [pc, #84]	@ (8008290 <prvHeapInit+0xb4>)
 800823c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800823e:	4b14      	ldr	r3, [pc, #80]	@ (8008290 <prvHeapInit+0xb4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008246:	4b12      	ldr	r3, [pc, #72]	@ (8008290 <prvHeapInit+0xb4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800825c:	4b0c      	ldr	r3, [pc, #48]	@ (8008290 <prvHeapInit+0xb4>)
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	4a0a      	ldr	r2, [pc, #40]	@ (8008294 <prvHeapInit+0xb8>)
 800826a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	4a09      	ldr	r2, [pc, #36]	@ (8008298 <prvHeapInit+0xbc>)
 8008272:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008274:	4b09      	ldr	r3, [pc, #36]	@ (800829c <prvHeapInit+0xc0>)
 8008276:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800827a:	601a      	str	r2, [r3, #0]
}
 800827c:	bf00      	nop
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	20000bb8 	.word	0x20000bb8
 800828c:	20001770 	.word	0x20001770
 8008290:	20001778 	.word	0x20001778
 8008294:	20001780 	.word	0x20001780
 8008298:	2000177c 	.word	0x2000177c
 800829c:	2000178c 	.word	0x2000178c

080082a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082a8:	4b28      	ldr	r3, [pc, #160]	@ (800834c <prvInsertBlockIntoFreeList+0xac>)
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e002      	b.n	80082b4 <prvInsertBlockIntoFreeList+0x14>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d8f7      	bhi.n	80082ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	4413      	add	r3, r2
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d108      	bne.n	80082e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	441a      	add	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	441a      	add	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d118      	bne.n	8008328 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	4b15      	ldr	r3, [pc, #84]	@ (8008350 <prvInsertBlockIntoFreeList+0xb0>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d00d      	beq.n	800831e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	441a      	add	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	e008      	b.n	8008330 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800831e:	4b0c      	ldr	r3, [pc, #48]	@ (8008350 <prvInsertBlockIntoFreeList+0xb0>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e003      	b.n	8008330 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d002      	beq.n	800833e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800833e:	bf00      	nop
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	20001770 	.word	0x20001770
 8008350:	20001778 	.word	0x20001778

08008354 <memset>:
 8008354:	4402      	add	r2, r0
 8008356:	4603      	mov	r3, r0
 8008358:	4293      	cmp	r3, r2
 800835a:	d100      	bne.n	800835e <memset+0xa>
 800835c:	4770      	bx	lr
 800835e:	f803 1b01 	strb.w	r1, [r3], #1
 8008362:	e7f9      	b.n	8008358 <memset+0x4>

08008364 <_reclaim_reent>:
 8008364:	4b2d      	ldr	r3, [pc, #180]	@ (800841c <_reclaim_reent+0xb8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4283      	cmp	r3, r0
 800836a:	b570      	push	{r4, r5, r6, lr}
 800836c:	4604      	mov	r4, r0
 800836e:	d053      	beq.n	8008418 <_reclaim_reent+0xb4>
 8008370:	69c3      	ldr	r3, [r0, #28]
 8008372:	b31b      	cbz	r3, 80083bc <_reclaim_reent+0x58>
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	b163      	cbz	r3, 8008392 <_reclaim_reent+0x2e>
 8008378:	2500      	movs	r5, #0
 800837a:	69e3      	ldr	r3, [r4, #28]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	5959      	ldr	r1, [r3, r5]
 8008380:	b9b1      	cbnz	r1, 80083b0 <_reclaim_reent+0x4c>
 8008382:	3504      	adds	r5, #4
 8008384:	2d80      	cmp	r5, #128	@ 0x80
 8008386:	d1f8      	bne.n	800837a <_reclaim_reent+0x16>
 8008388:	69e3      	ldr	r3, [r4, #28]
 800838a:	4620      	mov	r0, r4
 800838c:	68d9      	ldr	r1, [r3, #12]
 800838e:	f000 f86d 	bl	800846c <_free_r>
 8008392:	69e3      	ldr	r3, [r4, #28]
 8008394:	6819      	ldr	r1, [r3, #0]
 8008396:	b111      	cbz	r1, 800839e <_reclaim_reent+0x3a>
 8008398:	4620      	mov	r0, r4
 800839a:	f000 f867 	bl	800846c <_free_r>
 800839e:	69e3      	ldr	r3, [r4, #28]
 80083a0:	689d      	ldr	r5, [r3, #8]
 80083a2:	b15d      	cbz	r5, 80083bc <_reclaim_reent+0x58>
 80083a4:	4629      	mov	r1, r5
 80083a6:	4620      	mov	r0, r4
 80083a8:	682d      	ldr	r5, [r5, #0]
 80083aa:	f000 f85f 	bl	800846c <_free_r>
 80083ae:	e7f8      	b.n	80083a2 <_reclaim_reent+0x3e>
 80083b0:	680e      	ldr	r6, [r1, #0]
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f85a 	bl	800846c <_free_r>
 80083b8:	4631      	mov	r1, r6
 80083ba:	e7e1      	b.n	8008380 <_reclaim_reent+0x1c>
 80083bc:	6961      	ldr	r1, [r4, #20]
 80083be:	b111      	cbz	r1, 80083c6 <_reclaim_reent+0x62>
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 f853 	bl	800846c <_free_r>
 80083c6:	69e1      	ldr	r1, [r4, #28]
 80083c8:	b111      	cbz	r1, 80083d0 <_reclaim_reent+0x6c>
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f84e 	bl	800846c <_free_r>
 80083d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80083d2:	b111      	cbz	r1, 80083da <_reclaim_reent+0x76>
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 f849 	bl	800846c <_free_r>
 80083da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083dc:	b111      	cbz	r1, 80083e4 <_reclaim_reent+0x80>
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 f844 	bl	800846c <_free_r>
 80083e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80083e6:	b111      	cbz	r1, 80083ee <_reclaim_reent+0x8a>
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 f83f 	bl	800846c <_free_r>
 80083ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80083f0:	b111      	cbz	r1, 80083f8 <_reclaim_reent+0x94>
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 f83a 	bl	800846c <_free_r>
 80083f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083fa:	b111      	cbz	r1, 8008402 <_reclaim_reent+0x9e>
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 f835 	bl	800846c <_free_r>
 8008402:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008404:	b111      	cbz	r1, 800840c <_reclaim_reent+0xa8>
 8008406:	4620      	mov	r0, r4
 8008408:	f000 f830 	bl	800846c <_free_r>
 800840c:	6a23      	ldr	r3, [r4, #32]
 800840e:	b11b      	cbz	r3, 8008418 <_reclaim_reent+0xb4>
 8008410:	4620      	mov	r0, r4
 8008412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008416:	4718      	bx	r3
 8008418:	bd70      	pop	{r4, r5, r6, pc}
 800841a:	bf00      	nop
 800841c:	20000010 	.word	0x20000010

08008420 <__libc_init_array>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	4d0d      	ldr	r5, [pc, #52]	@ (8008458 <__libc_init_array+0x38>)
 8008424:	4c0d      	ldr	r4, [pc, #52]	@ (800845c <__libc_init_array+0x3c>)
 8008426:	1b64      	subs	r4, r4, r5
 8008428:	10a4      	asrs	r4, r4, #2
 800842a:	2600      	movs	r6, #0
 800842c:	42a6      	cmp	r6, r4
 800842e:	d109      	bne.n	8008444 <__libc_init_array+0x24>
 8008430:	4d0b      	ldr	r5, [pc, #44]	@ (8008460 <__libc_init_array+0x40>)
 8008432:	4c0c      	ldr	r4, [pc, #48]	@ (8008464 <__libc_init_array+0x44>)
 8008434:	f000 f870 	bl	8008518 <_init>
 8008438:	1b64      	subs	r4, r4, r5
 800843a:	10a4      	asrs	r4, r4, #2
 800843c:	2600      	movs	r6, #0
 800843e:	42a6      	cmp	r6, r4
 8008440:	d105      	bne.n	800844e <__libc_init_array+0x2e>
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	f855 3b04 	ldr.w	r3, [r5], #4
 8008448:	4798      	blx	r3
 800844a:	3601      	adds	r6, #1
 800844c:	e7ee      	b.n	800842c <__libc_init_array+0xc>
 800844e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008452:	4798      	blx	r3
 8008454:	3601      	adds	r6, #1
 8008456:	e7f2      	b.n	800843e <__libc_init_array+0x1e>
 8008458:	08008610 	.word	0x08008610
 800845c:	08008610 	.word	0x08008610
 8008460:	08008610 	.word	0x08008610
 8008464:	08008614 	.word	0x08008614

08008468 <__retarget_lock_acquire_recursive>:
 8008468:	4770      	bx	lr

0800846a <__retarget_lock_release_recursive>:
 800846a:	4770      	bx	lr

0800846c <_free_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4605      	mov	r5, r0
 8008470:	2900      	cmp	r1, #0
 8008472:	d041      	beq.n	80084f8 <_free_r+0x8c>
 8008474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008478:	1f0c      	subs	r4, r1, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	bfb8      	it	lt
 800847e:	18e4      	addlt	r4, r4, r3
 8008480:	f000 f83e 	bl	8008500 <__malloc_lock>
 8008484:	4a1d      	ldr	r2, [pc, #116]	@ (80084fc <_free_r+0x90>)
 8008486:	6813      	ldr	r3, [r2, #0]
 8008488:	b933      	cbnz	r3, 8008498 <_free_r+0x2c>
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	6014      	str	r4, [r2, #0]
 800848e:	4628      	mov	r0, r5
 8008490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008494:	f000 b83a 	b.w	800850c <__malloc_unlock>
 8008498:	42a3      	cmp	r3, r4
 800849a:	d908      	bls.n	80084ae <_free_r+0x42>
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	1821      	adds	r1, r4, r0
 80084a0:	428b      	cmp	r3, r1
 80084a2:	bf01      	itttt	eq
 80084a4:	6819      	ldreq	r1, [r3, #0]
 80084a6:	685b      	ldreq	r3, [r3, #4]
 80084a8:	1809      	addeq	r1, r1, r0
 80084aa:	6021      	streq	r1, [r4, #0]
 80084ac:	e7ed      	b.n	800848a <_free_r+0x1e>
 80084ae:	461a      	mov	r2, r3
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	b10b      	cbz	r3, 80084b8 <_free_r+0x4c>
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	d9fa      	bls.n	80084ae <_free_r+0x42>
 80084b8:	6811      	ldr	r1, [r2, #0]
 80084ba:	1850      	adds	r0, r2, r1
 80084bc:	42a0      	cmp	r0, r4
 80084be:	d10b      	bne.n	80084d8 <_free_r+0x6c>
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	4401      	add	r1, r0
 80084c4:	1850      	adds	r0, r2, r1
 80084c6:	4283      	cmp	r3, r0
 80084c8:	6011      	str	r1, [r2, #0]
 80084ca:	d1e0      	bne.n	800848e <_free_r+0x22>
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	6053      	str	r3, [r2, #4]
 80084d2:	4408      	add	r0, r1
 80084d4:	6010      	str	r0, [r2, #0]
 80084d6:	e7da      	b.n	800848e <_free_r+0x22>
 80084d8:	d902      	bls.n	80084e0 <_free_r+0x74>
 80084da:	230c      	movs	r3, #12
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	e7d6      	b.n	800848e <_free_r+0x22>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	1821      	adds	r1, r4, r0
 80084e4:	428b      	cmp	r3, r1
 80084e6:	bf04      	itt	eq
 80084e8:	6819      	ldreq	r1, [r3, #0]
 80084ea:	685b      	ldreq	r3, [r3, #4]
 80084ec:	6063      	str	r3, [r4, #4]
 80084ee:	bf04      	itt	eq
 80084f0:	1809      	addeq	r1, r1, r0
 80084f2:	6021      	streq	r1, [r4, #0]
 80084f4:	6054      	str	r4, [r2, #4]
 80084f6:	e7ca      	b.n	800848e <_free_r+0x22>
 80084f8:	bd38      	pop	{r3, r4, r5, pc}
 80084fa:	bf00      	nop
 80084fc:	200018cc 	.word	0x200018cc

08008500 <__malloc_lock>:
 8008500:	4801      	ldr	r0, [pc, #4]	@ (8008508 <__malloc_lock+0x8>)
 8008502:	f7ff bfb1 	b.w	8008468 <__retarget_lock_acquire_recursive>
 8008506:	bf00      	nop
 8008508:	200018c8 	.word	0x200018c8

0800850c <__malloc_unlock>:
 800850c:	4801      	ldr	r0, [pc, #4]	@ (8008514 <__malloc_unlock+0x8>)
 800850e:	f7ff bfac 	b.w	800846a <__retarget_lock_release_recursive>
 8008512:	bf00      	nop
 8008514:	200018c8 	.word	0x200018c8

08008518 <_init>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr

08008524 <_fini>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr
