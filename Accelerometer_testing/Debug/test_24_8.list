
test_24_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08009a88  08009a88  0000aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b54  08009b54  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b54  08009b54  0000ab54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b5c  08009b5c  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b5c  08009b5c  0000ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b60  08009b60  0000ab60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009b64  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018e8  20000070  08009bd4  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001958  08009bd4  0000b958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028439  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050e0  00000000  00000000  000334d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e0  00000000  00000000  000385c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b11  00000000  00000000  0003a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b008  00000000  00000000  0003c3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000299d6  00000000  00000000  000673b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010656f  00000000  00000000  00090d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001972fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099dc  00000000  00000000  00197344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001a0d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a70 	.word	0x08009a70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08009a70 	.word	0x08009a70

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	2000012c 	.word	0x2000012c

080005f0 <main>:
static char uart_tx_buffer[100];
static char msg[] = "Hello World!\r\n";


int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 fb9a 	bl	8001d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f83d 	bl	8000678 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005fe:	f000 f8a3 	bl	8000748 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 fbc7 	bl	8000d94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000606:	f000 f8d1 	bl	80007ac <MX_ADC1_Init>
  MX_I2C1_Init();
 800060a:	f000 f935 	bl	8000878 <MX_I2C1_Init>
  MX_QUADSPI_Init();
 800060e:	f000 f971 	bl	80008f4 <MX_QUADSPI_Init>
  MX_RNG_Init();
 8000612:	f000 f99b 	bl	800094c <MX_RNG_Init>
  MX_RTC_Init();
 8000616:	f000 f9ad 	bl	8000974 <MX_RTC_Init>
  MX_SPI1_Init();
 800061a:	f000 f9d3 	bl	80009c4 <MX_SPI1_Init>
  MX_SPI3_Init();
 800061e:	f000 fa0f 	bl	8000a40 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000622:	f000 fa4b 	bl	8000abc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000626:	f000 faa3 	bl	8000b70 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800062a:	f000 fafb 	bl	8000c24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800062e:	f000 fb29 	bl	8000c84 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000632:	f000 fb57 	bl	8000ce4 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000636:	f000 fb85 	bl	8000d44 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  uint16_t accel_config = LSM303AGR_ODR_100_HZ | LSM303AGR_AXES_ENABLE;
 800063a:	2357      	movs	r3, #87	@ 0x57
 800063c:	83fb      	strh	r3, [r7, #30]
  LSM303AGR_AccInit(accel_config);
 800063e:	8bfb      	ldrh	r3, [r7, #30]
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fa8d 	bl	8001b60 <LSM303AGR_AccInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <main+0x80>)
 8000648:	463c      	mov	r4, r7
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000658:	463b      	mov	r3, r7
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f007 fa98 	bl	8007b92 <osThreadCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a03      	ldr	r2, [pc, #12]	@ (8000674 <main+0x84>)
 8000666:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000668:	f007 fa8c 	bl	8007b84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0x7c>
 8000670:	08009a94 	.word	0x08009a94
 8000674:	20000a40 	.word	0x20000a40

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	@ 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	@ 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f008 fd16 	bl	80090b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800069e:	f003 fcdf 	bl	8004060 <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 fc82 	bl	8000fb0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ac:	f003 fcba 	bl	8004024 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b0:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <SystemClock_Config+0xcc>)
 80006b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006b6:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <SystemClock_Config+0xcc>)
 80006b8:	f023 0318 	bic.w	r3, r3, #24
 80006bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006c0:	2314      	movs	r3, #20
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d0:	2360      	movs	r3, #96	@ 0x60
 80006d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d8:	2301      	movs	r3, #1
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006e0:	2328      	movs	r3, #40	@ 0x28
 80006e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fddb 	bl	80042b0 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000700:	f000 fc56 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2303      	movs	r3, #3
 800070a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	2104      	movs	r1, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f004 f9db 	bl	8004ad8 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000728:	f000 fc42 	bl	8000fb0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800072c:	2200      	movs	r2, #0
 800072e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000732:	2000      	movs	r0, #0
 8000734:	f004 fad0 	bl	8004cd8 <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000738:	f004 fec4 	bl	80054c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800073c:	bf00      	nop
 800073e:	3758      	adds	r7, #88	@ 0x58
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000

08000748 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09a      	sub	sp, #104	@ 0x68
 800074c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2268      	movs	r2, #104	@ 0x68
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f008 fcaf 	bl	80090b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG
 800075a:	f44f 238c 	mov.w	r3, #286720	@ 0x46000
 800075e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000760:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000764:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000766:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800076a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800076c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000770:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000772:	2301      	movs	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800077a:	2318      	movs	r3, #24
 800077c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800077e:	2307      	movs	r3, #7
 8000780:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800078a:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800078e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fc2a 	bl	8004fec <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800079e:	f000 fc07 	bl	8000fb0 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3768      	adds	r7, #104	@ 0x68
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007c4:	4a29      	ldr	r2, [pc, #164]	@ (800086c <MX_ADC1_Init+0xc0>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007da:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e6:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_ADC1_Init+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000816:	2200      	movs	r2, #0
 8000818:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_ADC1_Init+0xbc>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000822:	4811      	ldr	r0, [pc, #68]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000824:	f001 fc5c 	bl	80020e0 <HAL_ADC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800082e:	f000 fbbf 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_ADC1_Init+0xc4>)
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	2306      	movs	r3, #6
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_ADC1_Init+0xc8>)
 8000840:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000842:	2304      	movs	r3, #4
 8000844:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000850:	f001 fd8c 	bl	800236c <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800085a:	f000 fba9 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000032c 	.word	0x2000032c
 800086c:	50040000 	.word	0x50040000
 8000870:	04300002 	.word	0x04300002
 8000874:	407f0000 	.word	0x407f0000

08000878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_I2C1_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	@ (80008f0 <MX_I2C1_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_I2C1_Init+0x74>)
 8000884:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000888:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_I2C1_Init+0x74>)
 8000892:	2201      	movs	r2, #1
 8000894:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <MX_I2C1_Init+0x74>)
 80008b6:	f002 fc6c 	bl	8003192 <HAL_I2C_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 fb76 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4809      	ldr	r0, [pc, #36]	@ (80008ec <MX_I2C1_Init+0x74>)
 80008c8:	f003 f9ee 	bl	8003ca8 <HAL_I2CEx_ConfigAnalogFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008d2:	f000 fb6d 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_I2C1_Init+0x74>)
 80008da:	f003 fa30 	bl	8003d3e <HAL_I2CEx_ConfigDigitalFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008e4:	f000 fb64 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000394 	.word	0x20000394
 80008f0:	40005400 	.word	0x40005400

080008f4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	@ (8000948 <MX_QUADSPI_Init+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 8000900:	22ff      	movs	r2, #255	@ 0xff
 8000902:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 8000906:	2201      	movs	r2, #1
 8000908:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 8000912:	2201      	movs	r2, #1
 8000914:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_QUADSPI_Init+0x50>)
 8000930:	f003 fbfc 	bl	800412c <HAL_QSPI_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800093a:	f000 fb39 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200003e8 	.word	0x200003e8
 8000948:	a0001000 	.word	0xa0001000

0800094c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_RNG_Init+0x20>)
 8000952:	4a07      	ldr	r2, [pc, #28]	@ (8000970 <MX_RNG_Init+0x24>)
 8000954:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_RNG_Init+0x20>)
 8000958:	f004 feb6 	bl	80056c8 <HAL_RNG_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000962:	f000 fb25 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000434 	.word	0x20000434
 8000970:	50060800 	.word	0x50060800

08000974 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000978:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <MX_RTC_Init+0x48>)
 800097a:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <MX_RTC_Init+0x4c>)
 800097c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_RTC_Init+0x48>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000984:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <MX_RTC_Init+0x48>)
 8000986:	227f      	movs	r2, #127	@ 0x7f
 8000988:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_RTC_Init+0x48>)
 800098c:	22ff      	movs	r2, #255	@ 0xff
 800098e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_RTC_Init+0x48>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_RTC_Init+0x48>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <MX_RTC_Init+0x48>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_RTC_Init+0x48>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_RTC_Init+0x48>)
 80009aa:	f004 fee4 	bl	8005776 <HAL_RTC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009b4:	f000 fafc 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000444 	.word	0x20000444
 80009c0:	40002800 	.word	0x40002800

080009c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_SPI1_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	@ (8000a3c <MX_SPI1_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_SPI1_Init+0x74>)
 80009d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_SPI1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009dc:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_SPI1_Init+0x74>)
 80009de:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_SPI1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_SPI1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_SPI1_Init+0x74>)
 80009f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_SPI1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_SPI1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_SPI1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_SPI1_Init+0x74>)
 8000a12:	2207      	movs	r2, #7
 8000a14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_SPI1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_SPI1_Init+0x74>)
 8000a1e:	2208      	movs	r2, #8
 8000a20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_SPI1_Init+0x74>)
 8000a24:	f004 ffc6 	bl	80059b4 <HAL_SPI_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 fabf 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000468 	.word	0x20000468
 8000a3c:	40013000 	.word	0x40013000

08000a40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <MX_SPI3_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a58:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a5a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a6e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a72:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a8e:	2207      	movs	r2, #7
 8000a90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000aa0:	f004 ff88 	bl	80059b4 <HAL_SPI_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 fa81 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200004cc 	.word	0x200004cc
 8000ab8:	40003c00 	.word	0x40003c00

08000abc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]
 8000ade:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ae8:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000af6:	f04f 32ff 	mov.w	r2, #4294967295
 8000afa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b08:	4818      	ldr	r0, [pc, #96]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000b0a:	f005 f8b3 	bl	8005c74 <HAL_TIM_PWM_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 fa4c 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4811      	ldr	r0, [pc, #68]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000b28:	f005 fe36 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b32:	f000 fa3d 	bl	8000fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b36:	2360      	movs	r3, #96	@ 0x60
 8000b38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b46:	463b      	mov	r3, r7
 8000b48:	2204      	movs	r2, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000b4e:	f005 f9ef 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b58:	f000 fa2a 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <MX_TIM2_Init+0xb0>)
 8000b5e:	f000 fc89 	bl	8001474 <HAL_TIM_MspPostInit>

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000530 	.word	0x20000530

08000b70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b82:	463b      	mov	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
 8000b90:	615a      	str	r2, [r3, #20]
 8000b92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b94:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000b96:	4a22      	ldr	r2, [pc, #136]	@ (8000c20 <MX_TIM3_Init+0xb0>)
 8000b98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b9a:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bba:	4818      	ldr	r0, [pc, #96]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000bbc:	f005 f85a 	bl	8005c74 <HAL_TIM_PWM_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000bc6:	f000 f9f3 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000bda:	f005 fddd 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000be4:	f000 f9e4 	bl	8000fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	@ 0x60
 8000bea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000c00:	f005 f996 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c0a:	f000 f9d1 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <MX_TIM3_Init+0xac>)
 8000c10:	f000 fc30 	bl	8001474 <HAL_TIM_MspPostInit>

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	@ 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000057c 	.word	0x2000057c
 8000c20:	40000400 	.word	0x40000400

08000c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c2a:	4a15      	ldr	r2, [pc, #84]	@ (8000c80 <MX_USART1_UART_Init+0x5c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_USART1_UART_Init+0x58>)
 8000c68:	f005 fe22 	bl	80068b0 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 f99d 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200005c8 	.word	0x200005c8
 8000c80:	40013800 	.word	0x40013800

08000c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cb0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000cb4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cca:	f005 fdf1 	bl	80068b0 <HAL_UART_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000cd4:	f000 f96c 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000650 	.word	0x20000650
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	@ (8000d40 <MX_USART3_UART_Init+0x5c>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d10:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d14:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d2a:	f005 fdc1 	bl	80068b0 <HAL_UART_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8000d34:	f000 f93c 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200006d8 	.word	0x200006d8
 8000d40:	40004800 	.word	0x40004800

08000d44 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d48:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d4a:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <MX_USB_PCD_Init+0x4c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d50:	2208      	movs	r2, #8
 8000d52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d7a:	f003 f82c 	bl	8003dd6 <HAL_PCD_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000d84:	f000 f914 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000760 	.word	0x20000760
 8000d90:	40006800 	.word	0x40006800

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b50      	ldr	r3, [pc, #320]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a4f      	ldr	r2, [pc, #316]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b4d      	ldr	r3, [pc, #308]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a49      	ldr	r2, [pc, #292]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b47      	ldr	r3, [pc, #284]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b44      	ldr	r3, [pc, #272]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	4a43      	ldr	r2, [pc, #268]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de6:	4b41      	ldr	r3, [pc, #260]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	4b3e      	ldr	r3, [pc, #248]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a3d      	ldr	r2, [pc, #244]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	4b38      	ldr	r3, [pc, #224]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4a37      	ldr	r2, [pc, #220]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e16:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MDM_PWR_EN_OUT_Pin|MDM_RST_OUT_Pin|LED2_Pin|LED3_Pin
 8000e22:	2200      	movs	r2, #0
 8000e24:	f24c 01c4 	movw	r1, #49348	@ 0xc0c4
 8000e28:	4831      	ldr	r0, [pc, #196]	@ (8000ef0 <MX_GPIO_Init+0x15c>)
 8000e2a:	f002 f977 	bl	800311c <HAL_GPIO_WritePin>
                          |ST33_VCC_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|MDM_DTR_OUT_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000e34:	482f      	ldr	r0, [pc, #188]	@ (8000ef4 <MX_GPIO_Init+0x160>)
 8000e36:	f002 f971 	bl	800311c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDM_PWR_EN_OUT_Pin MDM_RST_OUT_Pin LED2_Pin LED3_Pin
                           ST33_VCC_CTRL_Pin */
  GPIO_InitStruct.Pin = MDM_PWR_EN_OUT_Pin|MDM_RST_OUT_Pin|LED2_Pin|LED3_Pin
 8000e3a:	f24c 03c4 	movw	r3, #49348	@ 0xc0c4
 8000e3e:	617b      	str	r3, [r7, #20]
                          |ST33_VCC_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4827      	ldr	r0, [pc, #156]	@ (8000ef0 <MX_GPIO_Init+0x15c>)
 8000e54:	f001 ffe8 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000e58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4821      	ldr	r0, [pc, #132]	@ (8000ef4 <MX_GPIO_Init+0x160>)
 8000e70:	f001 ffda 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e94:	f001 ffc8 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin MDM_DTR_OUT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|MDM_DTR_OUT_Pin;
 8000e98:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4810      	ldr	r0, [pc, #64]	@ (8000ef4 <MX_GPIO_Init+0x160>)
 8000eb2:	f001 ffb9 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MDM_RING_Pin */
  GPIO_InitStruct.Pin = MDM_RING_Pin;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MDM_RING_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4808      	ldr	r0, [pc, #32]	@ (8000ef0 <MX_GPIO_Init+0x15c>)
 8000ece:	f001 ffab 	bl	8002e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	2028      	movs	r0, #40	@ 0x28
 8000ed8:	f001 fefc 	bl	8002cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000edc:	2028      	movs	r0, #40	@ 0x28
 8000ede:	f001 ff15 	bl	8002d0c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	@ 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400
 8000ef4:	48000800 	.word	0x48000800

08000ef8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
//  int16_t accel_data[3] = {1, 2, 3};
  uint32_t time_out = 500;
 8000f00:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f04:	60fb      	str	r3, [r7, #12]
//  char uart_tx_buffer[100] = "Hi\n";
//  char msg[] = "Hello World!\n";
  HAL_UART_Transmit(&huart1, (const uint8_t*) msg, strlen(msg), time_out);
 8000f06:	481c      	ldr	r0, [pc, #112]	@ (8000f78 <StartDefaultTask+0x80>)
 8000f08:	f7ff f96a 	bl	80001e0 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4919      	ldr	r1, [pc, #100]	@ (8000f78 <StartDefaultTask+0x80>)
 8000f14:	4819      	ldr	r0, [pc, #100]	@ (8000f7c <StartDefaultTask+0x84>)
 8000f16:	f005 fd19 	bl	800694c <HAL_UART_Transmit>
  for(;;)
  {
	LSM303AGR_AccReadXYZ(accel_data);
 8000f1a:	4819      	ldr	r0, [pc, #100]	@ (8000f80 <StartDefaultTask+0x88>)
 8000f1c:	f000 fe3f 	bl	8001b9e <LSM303AGR_AccReadXYZ>
	// Format the accelerometer data into a string
	// The values are in milligravity (mg).
	sprintf(uart_tx_buffer, "Accel (mg) - X:%d, Y:%d, Z:%d\r\n", accel_data[0], accel_data[1], accel_data[2]);
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <StartDefaultTask+0x88>)
 8000f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <StartDefaultTask+0x88>)
 8000f2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <StartDefaultTask+0x88>)
 8000f32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4912      	ldr	r1, [pc, #72]	@ (8000f84 <StartDefaultTask+0x8c>)
 8000f3c:	4812      	ldr	r0, [pc, #72]	@ (8000f88 <StartDefaultTask+0x90>)
 8000f3e:	f008 f899 	bl	8009074 <siprintf>

	// Transmit the string via UART
	HAL_UART_Transmit(&huart1, (const uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer), time_out);
 8000f42:	4811      	ldr	r0, [pc, #68]	@ (8000f88 <StartDefaultTask+0x90>)
 8000f44:	f7ff f94c 	bl	80001e0 <strlen>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	490e      	ldr	r1, [pc, #56]	@ (8000f88 <StartDefaultTask+0x90>)
 8000f50:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <StartDefaultTask+0x84>)
 8000f52:	f005 fcfb 	bl	800694c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (const uint8_t*) msg, strlen(msg), time_out);
 8000f56:	4808      	ldr	r0, [pc, #32]	@ (8000f78 <StartDefaultTask+0x80>)
 8000f58:	f7ff f942 	bl	80001e0 <strlen>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4905      	ldr	r1, [pc, #20]	@ (8000f78 <StartDefaultTask+0x80>)
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <StartDefaultTask+0x84>)
 8000f66:	f005 fcf1 	bl	800694c <HAL_UART_Transmit>
    osDelay(1000);
 8000f6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f6e:	f006 fe5c 	bl	8007c2a <osDelay>
	LSM303AGR_AccReadXYZ(accel_data);
 8000f72:	bf00      	nop
 8000f74:	e7d1      	b.n	8000f1a <StartDefaultTask+0x22>
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	200005c8 	.word	0x200005c8
 8000f80:	20000a44 	.word	0x20000a44
 8000f84:	08009ab0 	.word	0x08009ab0
 8000f88:	20000a4c 	.word	0x20000a4c

08000f8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f9e:	f000 fedf 	bl	8001d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40012c00 	.word	0x40012c00

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <Error_Handler+0x8>

08000fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	f06f 0001 	mvn.w	r0, #1
 8000ffa:	f001 fe6b 	bl	8002cd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a15      	ldr	r2, [pc, #84]	@ (8001080 <HAL_ADC_MspInit+0x74>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d123      	bne.n	8001076 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_ADC_MspInit+0x78>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <HAL_ADC_MspInit+0x78>)
 8001034:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103a:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_ADC_MspInit+0x78>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <HAL_ADC_MspInit+0x78>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <HAL_ADC_MspInit+0x78>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_ADC_MspInit+0x78>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC0     ------> ADC1_IN1
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A2_Pin|ARD_A5_Pin|ARD_A3_Pin;
 800105e:	230f      	movs	r3, #15
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001062:	230b      	movs	r3, #11
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <HAL_ADC_MspInit+0x7c>)
 8001072:	f001 fed9 	bl	8002e28 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	@ 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	50040000 	.word	0x50040000
 8001084:	40021000 	.word	0x40021000
 8001088:	48000800 	.word	0x48000800

0800108c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a4      	sub	sp, #144	@ 0x90
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2268      	movs	r2, #104	@ 0x68
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f008 f803 	bl	80090b8 <memset>
  if(hi2c->Instance==I2C1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a21      	ldr	r2, [pc, #132]	@ (800113c <HAL_I2C_MspInit+0xb0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d13a      	bne.n	8001132 <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010bc:	2340      	movs	r3, #64	@ 0x40
 80010be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 ff8f 	bl	8004fec <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010d4:	f7ff ff6c 	bl	8000fb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <HAL_I2C_MspInit+0xb4>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010dc:	4a18      	ldr	r2, [pc, #96]	@ (8001140 <HAL_I2C_MspInit+0xb4>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_I2C_MspInit+0xb4>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80010f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f6:	2312      	movs	r3, #18
 80010f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001108:	2304      	movs	r3, #4
 800110a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001112:	4619      	mov	r1, r3
 8001114:	480b      	ldr	r0, [pc, #44]	@ (8001144 <HAL_I2C_MspInit+0xb8>)
 8001116:	f001 fe87 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <HAL_I2C_MspInit+0xb4>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <HAL_I2C_MspInit+0xb4>)
 8001120:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001124:	6593      	str	r3, [r2, #88]	@ 0x58
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_I2C_MspInit+0xb4>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001132:	bf00      	nop
 8001134:	3790      	adds	r7, #144	@ 0x90
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40005400 	.word	0x40005400
 8001140:	40021000 	.word	0x40021000
 8001144:	48000400 	.word	0x48000400

08001148 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	@ 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a26      	ldr	r2, [pc, #152]	@ (8001200 <HAL_QSPI_MspInit+0xb8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d145      	bne.n	80011f6 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <HAL_QSPI_MspInit+0xbc>)
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	4a25      	ldr	r2, [pc, #148]	@ (8001204 <HAL_QSPI_MspInit+0xbc>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001174:	6513      	str	r3, [r2, #80]	@ 0x50
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <HAL_QSPI_MspInit+0xbc>)
 8001178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_QSPI_MspInit+0xbc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	4a1f      	ldr	r2, [pc, #124]	@ (8001204 <HAL_QSPI_MspInit+0xbc>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118e:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <HAL_QSPI_MspInit+0xbc>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <HAL_QSPI_MspInit+0xbc>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <HAL_QSPI_MspInit+0xbc>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <HAL_QSPI_MspInit+0xbc>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    PB11     ------> QUADSPI_BK1_NCS
    PB10     ------> QUADSPI_CLK
    PB0     ------> QUADSPI_BK1_IO1
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80011b2:	23c0      	movs	r3, #192	@ 0xc0
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011c2:	230a      	movs	r3, #10
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d0:	f001 fe2a 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0;
 80011d4:	f640 4303 	movw	r3, #3075	@ 0xc03
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011e6:	230a      	movs	r3, #10
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <HAL_QSPI_MspInit+0xc0>)
 80011f2:	f001 fe19 	bl	8002e28 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	@ 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	a0001000 	.word	0xa0001000
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400

0800120c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <HAL_RNG_MspInit+0x38>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10b      	bne.n	8001236 <HAL_RNG_MspInit+0x2a>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_RNG_MspInit+0x3c>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <HAL_RNG_MspInit+0x3c>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <HAL_RNG_MspInit+0x3c>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	50060800 	.word	0x50060800
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b09c      	sub	sp, #112	@ 0x70
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2268      	movs	r2, #104	@ 0x68
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f007 ff2b 	bl	80090b8 <memset>
  if(hrtc->Instance==RTC)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_RTC_MspInit+0x58>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d117      	bne.n	800129c <HAL_RTC_MspInit+0x50>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800126c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001270:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001276:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4618      	mov	r0, r3
 800127e:	f003 feb5 	bl	8004fec <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001288:	f7ff fe92 	bl	8000fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_RTC_MspInit+0x5c>)
 800128e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001292:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <HAL_RTC_MspInit+0x5c>)
 8001294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800129c:	bf00      	nop
 800129e:	3770      	adds	r7, #112	@ 0x70
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40002800 	.word	0x40002800
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	@ 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a4c      	ldr	r2, [pc, #304]	@ (80013fc <HAL_SPI_MspInit+0x150>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d146      	bne.n	800135c <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 80012d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012da:	4b49      	ldr	r3, [pc, #292]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b46      	ldr	r3, [pc, #280]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	4a45      	ldr	r2, [pc, #276]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f2:	4b43      	ldr	r3, [pc, #268]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b40      	ldr	r3, [pc, #256]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	4a3f      	ldr	r2, [pc, #252]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130a:	4b3d      	ldr	r3, [pc, #244]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001316:	f248 0320 	movw	r3, #32800	@ 0x8020
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001328:	2305      	movs	r3, #5
 800132a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001336:	f001 fd77 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800133a:	2330      	movs	r3, #48	@ 0x30
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800134a:	2305      	movs	r3, #5
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	4619      	mov	r1, r3
 8001354:	482b      	ldr	r0, [pc, #172]	@ (8001404 <HAL_SPI_MspInit+0x158>)
 8001356:	f001 fd67 	bl	8002e28 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800135a:	e04a      	b.n	80013f2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a29      	ldr	r2, [pc, #164]	@ (8001408 <HAL_SPI_MspInit+0x15c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d145      	bne.n	80013f2 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001366:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136a:	4a25      	ldr	r2, [pc, #148]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 800136c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001370:	6593      	str	r3, [r2, #88]	@ 0x58
 8001372:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a1f      	ldr	r2, [pc, #124]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a19      	ldr	r2, [pc, #100]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_SPI_MspInit+0x154>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST33_MOSI_Pin|ST33_MISO_Pin|ST33_SCK_Pin;
 80013ae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013c0:	2306      	movs	r3, #6
 80013c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c8:	4619      	mov	r1, r3
 80013ca:	4810      	ldr	r0, [pc, #64]	@ (800140c <HAL_SPI_MspInit+0x160>)
 80013cc:	f001 fd2c 	bl	8002e28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ST33_CS_Pin;
 80013d0:	2310      	movs	r3, #16
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e0:	2306      	movs	r3, #6
 80013e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ST33_CS_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ee:	f001 fd1b 	bl	8002e28 <HAL_GPIO_Init>
}
 80013f2:	bf00      	nop
 80013f4:	3738      	adds	r7, #56	@ 0x38
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40013000 	.word	0x40013000
 8001400:	40021000 	.word	0x40021000
 8001404:	48000400 	.word	0x48000400
 8001408:	40003c00 	.word	0x40003c00
 800140c:	48000800 	.word	0x48000800

08001410 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001420:	d10c      	bne.n	800143c <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_TIM_PWM_MspInit+0x5c>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	4a11      	ldr	r2, [pc, #68]	@ (800146c <HAL_TIM_PWM_MspInit+0x5c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6593      	str	r3, [r2, #88]	@ 0x58
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <HAL_TIM_PWM_MspInit+0x5c>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800143a:	e010      	b.n	800145e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <HAL_TIM_PWM_MspInit+0x60>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10b      	bne.n	800145e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_TIM_PWM_MspInit+0x5c>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <HAL_TIM_PWM_MspInit+0x5c>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6593      	str	r3, [r2, #88]	@ 0x58
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_TIM_PWM_MspInit+0x5c>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	40000400 	.word	0x40000400

08001474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001494:	d11c      	bne.n	80014d0 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <HAL_TIM_MspPostInit+0xa8>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	4a20      	ldr	r2, [pc, #128]	@ (800151c <HAL_TIM_MspPostInit+0xa8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a2:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <HAL_TIM_MspPostInit+0xa8>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 80014ae:	2308      	movs	r3, #8
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014be:	2301      	movs	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4815      	ldr	r0, [pc, #84]	@ (8001520 <HAL_TIM_MspPostInit+0xac>)
 80014ca:	f001 fcad 	bl	8002e28 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014ce:	e021      	b.n	8001514 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <HAL_TIM_MspPostInit+0xb0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d11c      	bne.n	8001514 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_TIM_MspPostInit+0xa8>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <HAL_TIM_MspPostInit+0xa8>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <HAL_TIM_MspPostInit+0xa8>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 80014f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001504:	2302      	movs	r3, #2
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	@ (8001528 <HAL_TIM_MspPostInit+0xb4>)
 8001510:	f001 fc8a 	bl	8002e28 <HAL_GPIO_Init>
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	@ 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	48000400 	.word	0x48000400
 8001524:	40000400 	.word	0x40000400
 8001528:	48000800 	.word	0x48000800

0800152c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0aa      	sub	sp, #168	@ 0xa8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001548:	2268      	movs	r2, #104	@ 0x68
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f007 fdb3 	bl	80090b8 <memset>
  if(huart->Instance==USART1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a91      	ldr	r2, [pc, #580]	@ (800179c <HAL_UART_MspInit+0x270>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d145      	bne.n	80015e8 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800155c:	2301      	movs	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001560:	2300      	movs	r3, #0
 8001562:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001568:	4618      	mov	r0, r3
 800156a:	f003 fd3f 	bl	8004fec <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001574:	f7ff fd1c 	bl	8000fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001578:	4b89      	ldr	r3, [pc, #548]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157c:	4a88      	ldr	r2, [pc, #544]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 800157e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001582:	6613      	str	r3, [r2, #96]	@ 0x60
 8001584:	4b86      	ldr	r3, [pc, #536]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 8001586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800158e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	4b83      	ldr	r3, [pc, #524]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001594:	4a82      	ldr	r2, [pc, #520]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159c:	4b80      	ldr	r3, [pc, #512]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D2_Pin|ARD_D8_Pin;
 80015a8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c2:	2307      	movs	r3, #7
 80015c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d2:	f001 fc29 	bl	8002e28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2105      	movs	r1, #5
 80015da:	2025      	movs	r0, #37	@ 0x25
 80015dc:	f001 fb7a 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015e0:	2025      	movs	r0, #37	@ 0x25
 80015e2:	f001 fb93 	bl	8002d0c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80015e6:	e0d5      	b.n	8001794 <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a6d      	ldr	r2, [pc, #436]	@ (80017a4 <HAL_UART_MspInit+0x278>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d144      	bne.n	800167c <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fcf4 	bl	8004fec <HAL_RCCEx_PeriphCLKConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800160a:	f7ff fcd1 	bl	8000fb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800160e:	4b64      	ldr	r3, [pc, #400]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	4a63      	ldr	r2, [pc, #396]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 8001614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001618:	6593      	str	r3, [r2, #88]	@ 0x58
 800161a:	4b61      	ldr	r3, [pc, #388]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	623b      	str	r3, [r7, #32]
 8001624:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b5e      	ldr	r3, [pc, #376]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	4a5d      	ldr	r2, [pc, #372]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001632:	4b5b      	ldr	r3, [pc, #364]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_D0_Pin|ARD_D1_Pin|ARD_A0_Pin;
 800163e:	230f      	movs	r3, #15
 8001640:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001656:	2307      	movs	r3, #7
 8001658:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001660:	4619      	mov	r1, r3
 8001662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001666:	f001 fbdf 	bl	8002e28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2105      	movs	r1, #5
 800166e:	2026      	movs	r0, #38	@ 0x26
 8001670:	f001 fb30 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001674:	2026      	movs	r0, #38	@ 0x26
 8001676:	f001 fb49 	bl	8002d0c <HAL_NVIC_EnableIRQ>
}
 800167a:	e08b      	b.n	8001794 <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART3)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a49      	ldr	r2, [pc, #292]	@ (80017a8 <HAL_UART_MspInit+0x27c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	f040 8086 	bne.w	8001794 <HAL_UART_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001688:	2304      	movs	r3, #4
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800168c:	2300      	movs	r3, #0
 800168e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001694:	4618      	mov	r0, r3
 8001696:	f003 fca9 	bl	8004fec <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_UART_MspInit+0x178>
      Error_Handler();
 80016a0:	f7ff fc86 	bl	8000fb0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016a4:	4b3e      	ldr	r3, [pc, #248]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a8:	4a3d      	ldr	r2, [pc, #244]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b0:	4b3b      	ldr	r3, [pc, #236]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016bc:	4b38      	ldr	r3, [pc, #224]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c0:	4a37      	ldr	r2, [pc, #220]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c8:	4b35      	ldr	r3, [pc, #212]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d4:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d8:	4a31      	ldr	r2, [pc, #196]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e0:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	4b2c      	ldr	r3, [pc, #176]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	4a2b      	ldr	r2, [pc, #172]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f8:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <HAL_UART_MspInit+0x274>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MDM_UART_RTS_Pin;
 8001704:	2304      	movs	r3, #4
 8001706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800171c:	2307      	movs	r3, #7
 800171e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(MDM_UART_RTS_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001726:	4619      	mov	r1, r3
 8001728:	4820      	ldr	r0, [pc, #128]	@ (80017ac <HAL_UART_MspInit+0x280>)
 800172a:	f001 fb7d 	bl	8002e28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MDM_UART_TX_Pin|MDM_UART_RX_Pin;
 800172e:	2330      	movs	r3, #48	@ 0x30
 8001730:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001746:	2307      	movs	r3, #7
 8001748:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001750:	4619      	mov	r1, r3
 8001752:	4817      	ldr	r0, [pc, #92]	@ (80017b0 <HAL_UART_MspInit+0x284>)
 8001754:	f001 fb68 	bl	8002e28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MDM_UART_CTS_Pin;
 8001758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800175c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001772:	2307      	movs	r3, #7
 8001774:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(MDM_UART_CTS_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800177c:	4619      	mov	r1, r3
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <HAL_UART_MspInit+0x288>)
 8001780:	f001 fb52 	bl	8002e28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2105      	movs	r1, #5
 8001788:	2027      	movs	r0, #39	@ 0x27
 800178a:	f001 faa3 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800178e:	2027      	movs	r0, #39	@ 0x27
 8001790:	f001 fabc 	bl	8002d0c <HAL_NVIC_EnableIRQ>
}
 8001794:	bf00      	nop
 8001796:	37a8      	adds	r7, #168	@ 0xa8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40013800 	.word	0x40013800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40004400 	.word	0x40004400
 80017a8:	40004800 	.word	0x40004800
 80017ac:	48000c00 	.word	0x48000c00
 80017b0:	48000800 	.word	0x48000800
 80017b4:	48000400 	.word	0x48000400

080017b8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a26      	ldr	r2, [pc, #152]	@ (8001870 <HAL_PCD_MspInit+0xb8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d146      	bne.n	8001868 <HAL_PCD_MspInit+0xb0>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a25      	ldr	r2, [pc, #148]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8001804:	230a      	movs	r3, #10
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f001 fb09 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001816:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	4a16      	ldr	r2, [pc, #88]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 800181c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001820:	6593      	str	r3, [r2, #88]	@ 0x58
 8001822:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001826:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d114      	bne.n	8001864 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183e:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001844:	6593      	str	r3, [r2, #88]	@ 0x58
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001852:	f002 fc5b 	bl	800410c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <HAL_PCD_MspInit+0xbc>)
 800185c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001860:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_MspInit 1 */

  }

}
 8001862:	e001      	b.n	8001868 <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8001864:	f002 fc52 	bl	800410c <HAL_PWREx_EnableVddUSB>
}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	@ 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40006800 	.word	0x40006800
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	@ 0x30
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001886:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <HAL_InitTick+0xc8>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188a:	4a2d      	ldr	r2, [pc, #180]	@ (8001940 <HAL_InitTick+0xc8>)
 800188c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001890:	6613      	str	r3, [r2, #96]	@ 0x60
 8001892:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <HAL_InitTick+0xc8>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001896:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189e:	f107 020c 	add.w	r2, r7, #12
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fb0d 	bl	8004ec8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018ae:	f003 faf5 	bl	8004e9c <HAL_RCC_GetPCLK2Freq>
 80018b2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b6:	4a23      	ldr	r2, [pc, #140]	@ (8001944 <HAL_InitTick+0xcc>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3b01      	subs	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018c2:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <HAL_InitTick+0xd0>)
 80018c4:	4a21      	ldr	r2, [pc, #132]	@ (800194c <HAL_InitTick+0xd4>)
 80018c6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <HAL_InitTick+0xd0>)
 80018ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ce:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001948 <HAL_InitTick+0xd0>)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <HAL_InitTick+0xd0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <HAL_InitTick+0xd0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_InitTick+0xd0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80018e8:	4817      	ldr	r0, [pc, #92]	@ (8001948 <HAL_InitTick+0xd0>)
 80018ea:	f004 f906 	bl	8005afa <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80018f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018fc:	4812      	ldr	r0, [pc, #72]	@ (8001948 <HAL_InitTick+0xd0>)
 80018fe:	f004 f95d 	bl	8005bbc <HAL_TIM_Base_Start_IT>
 8001902:	4603      	mov	r3, r0
 8001904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001908:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800190c:	2b00      	cmp	r3, #0
 800190e:	d111      	bne.n	8001934 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001910:	2019      	movs	r0, #25
 8001912:	f001 f9fb 	bl	8002d0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d808      	bhi.n	800192e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	2019      	movs	r0, #25
 8001922:	f001 f9d7 	bl	8002cd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_InitTick+0xd8>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e002      	b.n	8001934 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001934:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001938:	4618      	mov	r0, r3
 800193a:	3730      	adds	r7, #48	@ 0x30
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000
 8001944:	431bde83 	.word	0x431bde83
 8001948:	20000ab0 	.word	0x20000ab0
 800194c:	40012c00 	.word	0x40012c00
 8001950:	20000014 	.word	0x20000014

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <NMI_Handler+0x4>

0800195c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <MemManage_Handler+0x4>

0800196c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <UsageFault_Handler+0x4>

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001992:	f004 f9c6 	bl	8005d22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000ab0 	.word	0x20000ab0

080019a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <USART1_IRQHandler+0x10>)
 80019a6:	f005 f85b 	bl	8006a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200005c8 	.word	0x200005c8

080019b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <USART2_IRQHandler+0x10>)
 80019ba:	f005 f851 	bl	8006a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000650 	.word	0x20000650

080019c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <USART3_IRQHandler+0x10>)
 80019ce:	f005 f847 	bl	8006a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200006d8 	.word	0x200006d8

080019dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MDM_RING_Pin);
 80019e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80019e4:	f001 fbb2 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80019e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019ec:	f001 fbae 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f007 fbae 	bl	8009184 <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20028000 	.word	0x20028000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	20000afc 	.word	0x20000afc
 8001a5c:	20001958 	.word	0x20001958

08001a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a88:	f7ff ffea 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	@ (8001ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <LoopForever+0xe>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad0 <LoopForever+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f007 fb6d 	bl	8009190 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab6:	f7fe fd9b 	bl	80005f0 <main>

08001aba <LoopForever>:

LoopForever:
    b LoopForever
 8001aba:	e7fe      	b.n	8001aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001abc:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ac8:	08009b64 	.word	0x08009b64
  ldr r2, =_sbss
 8001acc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ad0:	20001958 	.word	0x20001958

08001ad4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_IRQHandler>

08001ad6 <COMPASSACCELERO_IO_Init>:
  * @note   This function is typically empty when using CubeMX, as the
  * initialization is handled by MX_I2C1_Init() in main.c.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
    // The I2C peripheral is initialized in main.c
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr: The register address to write to.
  * @param  Value: The data byte to write.
  * @retval None
  */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af04      	add	r7, sp, #16
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
 8001aee:	460b      	mov	r3, r1
 8001af0:	717b      	strb	r3, [r7, #5]
 8001af2:	4613      	mov	r3, r2
 8001af4:	713b      	strb	r3, [r7, #4]
    // Write one byte to the specified register.
    // The HAL function handles the I2C start, address, register, and stop conditions.
    HAL_I2C_Mem_Write(&hi2c1, DeviceAddr, RegisterAddr, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 8001af6:	797b      	ldrb	r3, [r7, #5]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	88f9      	ldrh	r1, [r7, #6]
 8001afc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2301      	movs	r3, #1
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <COMPASSACCELERO_IO_Write+0x38>)
 8001b0e:	f001 fbdb 	bl	80032c8 <HAL_I2C_Mem_Write>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000394 	.word	0x20000394

08001b20 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: The 8-bit I2C address of the device (shifted).
  * @param  RegisterAddr: The register address to read from.
  * @retval The data byte read from the register.
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af04      	add	r7, sp, #16
 8001b26:	4603      	mov	r3, r0
 8001b28:	460a      	mov	r2, r1
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	717b      	strb	r3, [r7, #5]
    uint8_t value = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
    // Read one byte from the specified register.
    // The HAL function handles the I2C start, address, register, and stop conditions.
    HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, RegisterAddr, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 8001b34:	797b      	ldrb	r3, [r7, #5]
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	88f9      	ldrh	r1, [r7, #6]
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	2301      	movs	r3, #1
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	f107 030f 	add.w	r3, r7, #15
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	4803      	ldr	r0, [pc, #12]	@ (8001b5c <COMPASSACCELERO_IO_Read+0x3c>)
 8001b4e:	f001 fccf 	bl	80034f0 <HAL_I2C_Mem_Read>
    return value;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000394 	.word	0x20000394

08001b60 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001b6e:	f7ff ffb2 	bl	8001ad6 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2120      	movs	r1, #32
 8001b7c:	2032      	movs	r0, #50	@ 0x32
 8001b7e:	f7ff ffb1 	bl	8001ae4 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2123      	movs	r1, #35	@ 0x23
 8001b90:	2032      	movs	r0, #50	@ 0x32
 8001b92:	f7ff ffa7 	bl	8001ae4 <COMPASSACCELERO_IO_Write>
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b088      	sub	sp, #32
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8001bb2:	2123      	movs	r1, #35	@ 0x23
 8001bb4:	2032      	movs	r0, #50	@ 0x32
 8001bb6:	f7ff ffb3 	bl	8001b20 <COMPASSACCELERO_IO_Read>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001bbe:	2124      	movs	r1, #36	@ 0x24
 8001bc0:	2032      	movs	r0, #50	@ 0x32
 8001bc2:	f7ff ffad 	bl	8001b20 <COMPASSACCELERO_IO_Read>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8001bca:	2128      	movs	r1, #40	@ 0x28
 8001bcc:	2032      	movs	r0, #50	@ 0x32
 8001bce:	f7ff ffa7 	bl	8001b20 <COMPASSACCELERO_IO_Read>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001bd8:	2129      	movs	r1, #41	@ 0x29
 8001bda:	2032      	movs	r0, #50	@ 0x32
 8001bdc:	f7ff ffa0 	bl	8001b20 <COMPASSACCELERO_IO_Read>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8001be6:	212a      	movs	r1, #42	@ 0x2a
 8001be8:	2032      	movs	r0, #50	@ 0x32
 8001bea:	f7ff ff99 	bl	8001b20 <COMPASSACCELERO_IO_Read>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8001bf4:	212b      	movs	r1, #43	@ 0x2b
 8001bf6:	2032      	movs	r0, #50	@ 0x32
 8001bf8:	f7ff ff92 	bl	8001b20 <COMPASSACCELERO_IO_Read>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8001c02:	212c      	movs	r1, #44	@ 0x2c
 8001c04:	2032      	movs	r0, #50	@ 0x32
 8001c06:	f7ff ff8b 	bl	8001b20 <COMPASSACCELERO_IO_Read>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001c10:	212d      	movs	r1, #45	@ 0x2d
 8001c12:	2032      	movs	r0, #50	@ 0x32
 8001c14:	f7ff ff84 	bl	8001b20 <COMPASSACCELERO_IO_Read>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	b25b      	sxtb	r3, r3
 8001c1c:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001c1e:	7d3b      	ldrb	r3, [r7, #20]
 8001c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d123      	bne.n	8001c70 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	77fb      	strb	r3, [r7, #31]
 8001c2c:	e01c      	b.n	8001c68 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001c2e:	7ffb      	ldrb	r3, [r7, #31]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	3301      	adds	r3, #1
 8001c34:	3320      	adds	r3, #32
 8001c36:	443b      	add	r3, r7
 8001c38:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	7ffb      	ldrb	r3, [r7, #31]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	3320      	adds	r3, #32
 8001c48:	443b      	add	r3, r7
 8001c4a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	7ffb      	ldrb	r3, [r7, #31]
 8001c56:	b212      	sxth	r2, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	3320      	adds	r3, #32
 8001c5c:	443b      	add	r3, r7
 8001c5e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	3301      	adds	r3, #1
 8001c66:	77fb      	strb	r3, [r7, #31]
 8001c68:	7ffb      	ldrb	r3, [r7, #31]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d9df      	bls.n	8001c2e <LSM303AGR_AccReadXYZ+0x90>
 8001c6e:	e022      	b.n	8001cb6 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	77fb      	strb	r3, [r7, #31]
 8001c74:	e01c      	b.n	8001cb0 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001c76:	7ffb      	ldrb	r3, [r7, #31]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	3320      	adds	r3, #32
 8001c7c:	443b      	add	r3, r7
 8001c7e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	7ffb      	ldrb	r3, [r7, #31]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	3320      	adds	r3, #32
 8001c90:	443b      	add	r3, r7
 8001c92:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
 8001c9e:	b212      	sxth	r2, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	3320      	adds	r3, #32
 8001ca4:	443b      	add	r3, r7
 8001ca6:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001caa:	7ffb      	ldrb	r3, [r7, #31]
 8001cac:	3301      	adds	r3, #1
 8001cae:	77fb      	strb	r3, [r7, #31]
 8001cb0:	7ffb      	ldrb	r3, [r7, #31]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d9df      	bls.n	8001c76 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* High-resolution mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8001cb6:	7d3b      	ldrb	r3, [r7, #20]
 8001cb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001cbc:	2b30      	cmp	r3, #48	@ 0x30
 8001cbe:	d013      	beq.n	8001ce8 <LSM303AGR_AccReadXYZ+0x14a>
 8001cc0:	2b30      	cmp	r3, #48	@ 0x30
 8001cc2:	dc14      	bgt.n	8001cee <LSM303AGR_AccReadXYZ+0x150>
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d00c      	beq.n	8001ce2 <LSM303AGR_AccReadXYZ+0x144>
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	dc10      	bgt.n	8001cee <LSM303AGR_AccReadXYZ+0x150>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <LSM303AGR_AccReadXYZ+0x138>
 8001cd0:	2b10      	cmp	r3, #16
 8001cd2:	d003      	beq.n	8001cdc <LSM303AGR_AccReadXYZ+0x13e>
 8001cd4:	e00b      	b.n	8001cee <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	77bb      	strb	r3, [r7, #30]
    break;
 8001cda:	e008      	b.n	8001cee <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	77bb      	strb	r3, [r7, #30]
    break;
 8001ce0:	e005      	b.n	8001cee <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	77bb      	strb	r3, [r7, #30]
    break;
 8001ce6:	e002      	b.n	8001cee <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8001ce8:	230c      	movs	r3, #12
 8001cea:	77bb      	strb	r3, [r7, #30]
    break;
 8001cec:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	77fb      	strb	r3, [r7, #31]
 8001cf2:	e014      	b.n	8001d1e <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001cf4:	7ffb      	ldrb	r3, [r7, #31]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	3320      	adds	r3, #32
 8001cfa:	443b      	add	r3, r7
 8001cfc:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	7fbb      	ldrb	r3, [r7, #30]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	fb12 f303 	smulbb	r3, r2, r3
 8001d0a:	b299      	uxth	r1, r3
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	b20a      	sxth	r2, r1
 8001d16:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d18:	7ffb      	ldrb	r3, [r7, #31]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	77fb      	strb	r3, [r7, #31]
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d9e7      	bls.n	8001cf4 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f000 ffc0 	bl	8002cbe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fd9a 	bl	8001878 <HAL_InitTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	e001      	b.n	8001d54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d50:	f7ff f934 	bl	8000fbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d54:	79fb      	ldrb	r3, [r7, #7]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_IncTick+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000018 	.word	0x20000018
 8001d84:	20000b00 	.word	0x20000b00

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000b00 	.word	0x20000b00

08001da0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3360      	adds	r3, #96	@ 0x60
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <LL_ADC_SetOffset+0x44>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e40:	bf00      	nop
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	03fff000 	.word	0x03fff000

08001e50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3360      	adds	r3, #96	@ 0x60
 8001e5e:	461a      	mov	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3360      	adds	r3, #96	@ 0x60
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	615a      	str	r2, [r3, #20]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3330      	adds	r3, #48	@ 0x30
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	4413      	add	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	211f      	movs	r1, #31
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0e9b      	lsrs	r3, r3, #26
 8001f10:	f003 011f 	and.w	r1, r3, #31
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f24:	bf00      	nop
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3314      	adds	r3, #20
 8001f40:	461a      	mov	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	0e5b      	lsrs	r3, r3, #25
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	0d1b      	lsrs	r3, r3, #20
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2107      	movs	r1, #7
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	0d1b      	lsrs	r3, r3, #20
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0318 	and.w	r3, r3, #24
 8001faa:	4908      	ldr	r1, [pc, #32]	@ (8001fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fac:	40d9      	lsrs	r1, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	0007ffff 	.word	0x0007ffff

08001fd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002008:	d101      	bne.n	800200e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800202c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002030:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <LL_ADC_IsEnabled+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_IsEnabled+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d101      	bne.n	80020aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d101      	bne.n	80020d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e129      	b.n	800234e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe ff7f 	bl	800100c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff67 	bl	8001ff4 <LL_ADC_IsDeepPowerDownEnabled>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff4d 	bl	8001fd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff82 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d115      	bne.n	8002172 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff66 	bl	800201c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002150:	4b81      	ldr	r3, [pc, #516]	@ (8002358 <HAL_ADC_Init+0x278>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	4a81      	ldr	r2, [pc, #516]	@ (800235c <HAL_ADC_Init+0x27c>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	3301      	adds	r3, #1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002164:	e002      	b.n	800216c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3b01      	subs	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f9      	bne.n	8002166 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff64 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff75 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80021a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 80c2 	bne.w	800233c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80be 	bne.w	800233c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021c8:	f043 0202 	orr.w	r2, r3, #2
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff49 	bl	800206c <LL_ADC_IsEnabled>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e0:	485f      	ldr	r0, [pc, #380]	@ (8002360 <HAL_ADC_Init+0x280>)
 80021e2:	f7ff ff43 	bl	800206c <LL_ADC_IsEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4619      	mov	r1, r3
 80021f2:	485c      	ldr	r0, [pc, #368]	@ (8002364 <HAL_ADC_Init+0x284>)
 80021f4:	f7ff fdd4 	bl	8001da0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e5b      	ldrb	r3, [r3, #25]
 80021fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002202:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002208:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800220e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002216:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d106      	bne.n	8002234 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	3b01      	subs	r3, #1
 800222c:	045b      	lsls	r3, r3, #17
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002248:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	4b44      	ldr	r3, [pc, #272]	@ (8002368 <HAL_ADC_Init+0x288>)
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	430b      	orrs	r3, r1
 8002262:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff25 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 800226e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d140      	bne.n	80022f8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d13d      	bne.n	80022f8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7e1b      	ldrb	r3, [r3, #24]
 8002284:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002286:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800228e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800229e:	f023 0306 	bic.w	r3, r3, #6
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d118      	bne.n	80022e8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022cc:	4311      	orrs	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022d8:	430a      	orrs	r2, r1
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	611a      	str	r2, [r3, #16]
 80022e6:	e007      	b.n	80022f8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10c      	bne.n	800231a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f023 010f 	bic.w	r1, r3, #15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	631a      	str	r2, [r3, #48]	@ 0x30
 8002318:	e007      	b.n	800232a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 020f 	bic.w	r2, r2, #15
 8002328:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	@ 0x58
 800233a:	e007      	b.n	800234c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	f043 0210 	orr.w	r2, r3, #16
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800234c:	7ffb      	ldrb	r3, [r7, #31]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000010 	.word	0x20000010
 800235c:	053e2d63 	.word	0x053e2d63
 8002360:	50040000 	.word	0x50040000
 8002364:	50040300 	.word	0x50040300
 8002368:	fff0c007 	.word	0xfff0c007

0800236c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b0b6      	sub	sp, #216	@ 0xd8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x22>
 800238a:	2302      	movs	r3, #2
 800238c:	e3d5      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x7ce>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fe79 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 83ba 	bne.w	8002b1c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d824      	bhi.n	8002402 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	3b02      	subs	r3, #2
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d81b      	bhi.n	80023fa <HAL_ADC_ConfigChannel+0x8e>
 80023c2:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <HAL_ADC_ConfigChannel+0x5c>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023e1 	.word	0x080023e1
 80023d0:	080023e9 	.word	0x080023e9
 80023d4:	080023f1 	.word	0x080023f1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80023d8:	230c      	movs	r3, #12
 80023da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023de:	e010      	b.n	8002402 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80023e0:	2312      	movs	r3, #18
 80023e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023e6:	e00c      	b.n	8002402 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023e8:	2318      	movs	r3, #24
 80023ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023ee:	e008      	b.n	8002402 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023f8:	e003      	b.n	8002402 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80023fa:	2306      	movs	r3, #6
 80023fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002400:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002410:	f7ff fd62 	bl	8001ed8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe3a 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 800241e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fe46 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 800242c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002434:	2b00      	cmp	r3, #0
 8002436:	f040 81bf 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800243a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 81ba 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800244c:	d10f      	bne.n	800246e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2200      	movs	r2, #0
 8002458:	4619      	mov	r1, r3
 800245a:	f7ff fd69 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fd23 	bl	8001eb2 <LL_ADC_SetSamplingTimeCommonConfig>
 800246c:	e00e      	b.n	800248c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	461a      	mov	r2, r3
 800247c:	f7ff fd58 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fd13 	bl	8001eb2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	08db      	lsrs	r3, r3, #3
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00a      	beq.n	80024c4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6919      	ldr	r1, [r3, #16]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024be:	f7ff fca3 	bl	8001e08 <LL_ADC_SetOffset>
 80024c2:	e179      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fcc0 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x184>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fcb5 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	f003 021f 	and.w	r2, r3, #31
 80024ee:	e01e      	b.n	800252e <HAL_ADC_ConfigChannel+0x1c2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fcaa 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800250e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800251e:	2320      	movs	r3, #32
 8002520:	e004      	b.n	800252c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x1da>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	e018      	b.n	8002578 <HAL_ADC_ConfigChannel+0x20c>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800255a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800255e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002562:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e004      	b.n	8002578 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800256e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fc79 	bl	8001e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2101      	movs	r1, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fc5d 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x24a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fc52 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	e01e      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x288>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2101      	movs	r1, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fc47 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80025d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80025dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e004      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80025e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_ADC_ConfigChannel+0x2a0>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	e018      	b.n	800263e <HAL_ADC_ConfigChannel+0x2d2>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002620:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002630:	2320      	movs	r3, #32
 8002632:	e004      	b.n	800263e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800263e:	429a      	cmp	r2, r3
 8002640:	d106      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fc16 	bl	8001e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2102      	movs	r1, #2
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fbfa 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_ADC_ConfigChannel+0x310>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2102      	movs	r1, #2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fbef 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	f003 021f 	and.w	r2, r3, #31
 800267a:	e01e      	b.n	80026ba <HAL_ADC_ConfigChannel+0x34e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2102      	movs	r1, #2
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fbe4 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800269a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800269e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80026a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e004      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80026ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d105      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x366>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0e9b      	lsrs	r3, r3, #26
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	e014      	b.n	80026fc <HAL_ADC_ConfigChannel+0x390>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80026e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80026ee:	2320      	movs	r3, #32
 80026f0:	e004      	b.n	80026fc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80026f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d106      	bne.n	800270e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2200      	movs	r2, #0
 8002706:	2102      	movs	r1, #2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fbb7 	bl	8001e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2103      	movs	r1, #3
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fb9b 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10a      	bne.n	800273a <HAL_ADC_ConfigChannel+0x3ce>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2103      	movs	r1, #3
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fb90 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	e017      	b.n	800276a <HAL_ADC_ConfigChannel+0x3fe>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2103      	movs	r1, #3
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fb85 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002754:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002756:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e003      	b.n	8002768 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x416>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0e9b      	lsrs	r3, r3, #26
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	e011      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x43a>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002790:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002792:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800279e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2103      	movs	r1, #3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fb62 	bl	8001e7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fc55 	bl	800206c <LL_ADC_IsEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 813f 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f7ff fbd6 	bl	8001f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a8e      	ldr	r2, [pc, #568]	@ (8002a1c <HAL_ADC_ConfigChannel+0x6b0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f040 8130 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x4a4>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2b09      	cmp	r3, #9
 8002806:	bf94      	ite	ls
 8002808:	2301      	movls	r3, #1
 800280a:	2300      	movhi	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e019      	b.n	8002844 <HAL_ADC_ConfigChannel+0x4d8>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800281e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002820:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800282c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	2b09      	cmp	r3, #9
 800283c:	bf94      	ite	ls
 800283e:	2301      	movls	r3, #1
 8002840:	2300      	movhi	r3, #0
 8002842:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002844:	2b00      	cmp	r3, #0
 8002846:	d079      	beq.n	800293c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002850:	2b00      	cmp	r3, #0
 8002852:	d107      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x4f8>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	3301      	adds	r3, #1
 800285c:	069b      	lsls	r3, r3, #26
 800285e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002862:	e015      	b.n	8002890 <HAL_ADC_ConfigChannel+0x524>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002874:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3301      	adds	r3, #1
 800288a:	069b      	lsls	r3, r3, #26
 800288c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x544>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	3301      	adds	r3, #1
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	e017      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x574>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e003      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80028cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	ea42 0103 	orr.w	r1, r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x59a>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	3301      	adds	r3, #1
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	051b      	lsls	r3, r3, #20
 8002904:	e018      	b.n	8002938 <HAL_ADC_ConfigChannel+0x5cc>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002916:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e003      	b.n	800292a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3301      	adds	r3, #1
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002938:	430b      	orrs	r3, r1
 800293a:	e080      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x5ec>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	3301      	adds	r3, #1
 8002950:	069b      	lsls	r3, r3, #26
 8002952:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002956:	e015      	b.n	8002984 <HAL_ADC_ConfigChannel+0x618>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800296a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002970:	2320      	movs	r3, #32
 8002972:	e003      	b.n	800297c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3301      	adds	r3, #1
 800297e:	069b      	lsls	r3, r3, #26
 8002980:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x638>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	e017      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x668>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	61bb      	str	r3, [r7, #24]
  return result;
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80029bc:	2320      	movs	r3, #32
 80029be:	e003      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	ea42 0103 	orr.w	r1, r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10d      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x694>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	3301      	adds	r3, #1
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	3b1e      	subs	r3, #30
 80029f8:	051b      	lsls	r3, r3, #20
 80029fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	e01d      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x6d0>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	60fb      	str	r3, [r7, #12]
  return result;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e005      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x6bc>
 8002a1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	f003 021f 	and.w	r2, r3, #31
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	3b1e      	subs	r3, #30
 8002a36:	051b      	lsls	r3, r3, #20
 8002a38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7ff fa74 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b44 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d06c      	beq.n	8002b2e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a54:	483c      	ldr	r0, [pc, #240]	@ (8002b48 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a56:	f7ff f9c9 	bl	8001dec <LL_ADC_GetCommonPathInternalCh>
 8002a5a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a3a      	ldr	r2, [pc, #232]	@ (8002b4c <HAL_ADC_ConfigChannel+0x7e0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d127      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d121      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a35      	ldr	r2, [pc, #212]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d157      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a86:	4619      	mov	r1, r3
 8002a88:	482f      	ldr	r0, [pc, #188]	@ (8002b48 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a8a:	f7ff f99c 	bl	8001dc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a8e:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <HAL_ADC_ConfigChannel+0x7e8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	4a30      	ldr	r2, [pc, #192]	@ (8002b58 <HAL_ADC_ConfigChannel+0x7ec>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002aa8:	e002      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f9      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ab6:	e03a      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a27      	ldr	r2, [pc, #156]	@ (8002b5c <HAL_ADC_ConfigChannel+0x7f0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d113      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ac6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d12a      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002adc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4819      	ldr	r0, [pc, #100]	@ (8002b48 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ae4:	f7ff f96f 	bl	8001dc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ae8:	e021      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1c      	ldr	r2, [pc, #112]	@ (8002b60 <HAL_ADC_ConfigChannel+0x7f4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d11c      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d116      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d111      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b12:	4619      	mov	r1, r3
 8002b14:	480c      	ldr	r0, [pc, #48]	@ (8002b48 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b16:	f7ff f956 	bl	8001dc6 <LL_ADC_SetCommonPathInternalCh>
 8002b1a:	e008      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b36:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	37d8      	adds	r7, #216	@ 0xd8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	80080000 	.word	0x80080000
 8002b48:	50040300 	.word	0x50040300
 8002b4c:	c7520000 	.word	0xc7520000
 8002b50:	50040000 	.word	0x50040000
 8002b54:	20000010 	.word	0x20000010
 8002b58:	053e2d63 	.word	0x053e2d63
 8002b5c:	cb840000 	.word	0xcb840000
 8002b60:	80000001 	.word	0x80000001

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	@ (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	@ (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	@ (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	@ (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	@ 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	@ 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff4c 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce6:	f7ff ff61 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002cea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f7ff ffb1 	bl	8002c58 <NVIC_EncodePriority>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff ff80 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff ff54 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d008      	beq.n	8002d52 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2204      	movs	r2, #4
 8002d44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e022      	b.n	8002d98 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 020e 	bic.w	r2, r2, #14
 8002d60:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f003 021c 	and.w	r2, r3, #28
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d005      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	e029      	b.n	8002e1c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 020e 	bic.w	r2, r2, #14
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dec:	f003 021c 	and.w	r2, r3, #28
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
    }
  }
  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e36:	e154      	b.n	80030e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	4013      	ands	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8146 	beq.w	80030dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d005      	beq.n	8002e68 <HAL_GPIO_Init+0x40>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d130      	bne.n	8002eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	f003 0201 	and.w	r2, r3, #1
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d017      	beq.n	8002f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d123      	bne.n	8002f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	08da      	lsrs	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3208      	adds	r2, #8
 8002f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	6939      	ldr	r1, [r7, #16]
 8002f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	2203      	movs	r2, #3
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0203 	and.w	r2, r3, #3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80a0 	beq.w	80030dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9c:	4b58      	ldr	r3, [pc, #352]	@ (8003100 <HAL_GPIO_Init+0x2d8>)
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa0:	4a57      	ldr	r2, [pc, #348]	@ (8003100 <HAL_GPIO_Init+0x2d8>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fa8:	4b55      	ldr	r3, [pc, #340]	@ (8003100 <HAL_GPIO_Init+0x2d8>)
 8002faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fb4:	4a53      	ldr	r2, [pc, #332]	@ (8003104 <HAL_GPIO_Init+0x2dc>)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002fde:	d019      	beq.n	8003014 <HAL_GPIO_Init+0x1ec>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a49      	ldr	r2, [pc, #292]	@ (8003108 <HAL_GPIO_Init+0x2e0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <HAL_GPIO_Init+0x1e8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a48      	ldr	r2, [pc, #288]	@ (800310c <HAL_GPIO_Init+0x2e4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00d      	beq.n	800300c <HAL_GPIO_Init+0x1e4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a47      	ldr	r2, [pc, #284]	@ (8003110 <HAL_GPIO_Init+0x2e8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <HAL_GPIO_Init+0x1e0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a46      	ldr	r2, [pc, #280]	@ (8003114 <HAL_GPIO_Init+0x2ec>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_GPIO_Init+0x1dc>
 8003000:	2304      	movs	r3, #4
 8003002:	e008      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003004:	2307      	movs	r3, #7
 8003006:	e006      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003008:	2303      	movs	r3, #3
 800300a:	e004      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 800300c:	2302      	movs	r3, #2
 800300e:	e002      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003014:	2300      	movs	r3, #0
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	f002 0203 	and.w	r2, r2, #3
 800301c:	0092      	lsls	r2, r2, #2
 800301e:	4093      	lsls	r3, r2
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003026:	4937      	ldr	r1, [pc, #220]	@ (8003104 <HAL_GPIO_Init+0x2dc>)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	3302      	adds	r3, #2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003034:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <HAL_GPIO_Init+0x2f0>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003058:	4a2f      	ldr	r2, [pc, #188]	@ (8003118 <HAL_GPIO_Init+0x2f0>)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800305e:	4b2e      	ldr	r3, [pc, #184]	@ (8003118 <HAL_GPIO_Init+0x2f0>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003082:	4a25      	ldr	r2, [pc, #148]	@ (8003118 <HAL_GPIO_Init+0x2f0>)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003088:	4b23      	ldr	r3, [pc, #140]	@ (8003118 <HAL_GPIO_Init+0x2f0>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003118 <HAL_GPIO_Init+0x2f0>)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030b2:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_GPIO_Init+0x2f0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030d6:	4a10      	ldr	r2, [pc, #64]	@ (8003118 <HAL_GPIO_Init+0x2f0>)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	3301      	adds	r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f aea3 	bne.w	8002e38 <HAL_GPIO_Init+0x10>
  }
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40021000 	.word	0x40021000
 8003104:	40010000 	.word	0x40010000
 8003108:	48000400 	.word	0x48000400
 800310c:	48000800 	.word	0x48000800
 8003110:	48000c00 	.word	0x48000c00
 8003114:	48001000 	.word	0x48001000
 8003118:	40010400 	.word	0x40010400

0800311c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	807b      	strh	r3, [r7, #2]
 8003128:	4613      	mov	r3, r2
 800312a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800312c:	787b      	ldrb	r3, [r7, #1]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003138:	e002      	b.n	8003140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003156:	4b08      	ldr	r3, [pc, #32]	@ (8003178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003162:	4a05      	ldr	r2, [pc, #20]	@ (8003178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f806 	bl	800317c <HAL_GPIO_EXTI_Callback>
  }
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40010400 	.word	0x40010400

0800317c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e08d      	b.n	80032c0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fd ff67 	bl	800108c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2224      	movs	r2, #36	@ 0x24
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d107      	bne.n	800320c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	e006      	b.n	800321a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003218:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d108      	bne.n	8003234 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e007      	b.n	8003244 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003242:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003256:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003266:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69d9      	ldr	r1, [r3, #28]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1a      	ldr	r2, [r3, #32]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	460b      	mov	r3, r1
 80032dc:	813b      	strh	r3, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	f040 80f9 	bne.w	80034e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_I2C_Mem_Write+0x34>
 80032f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003302:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0ed      	b.n	80034e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_I2C_Mem_Write+0x4e>
 8003312:	2302      	movs	r3, #2
 8003314:	e0e6      	b.n	80034e4 <HAL_I2C_Mem_Write+0x21c>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800331e:	f7fe fd33 	bl	8001d88 <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	2319      	movs	r3, #25
 800332a:	2201      	movs	r2, #1
 800332c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fac3 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0d1      	b.n	80034e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2221      	movs	r2, #33	@ 0x21
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2240      	movs	r2, #64	@ 0x40
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003360:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003368:	88f8      	ldrh	r0, [r7, #6]
 800336a:	893a      	ldrh	r2, [r7, #8]
 800336c:	8979      	ldrh	r1, [r7, #10]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4603      	mov	r3, r0
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f9d3 	bl	8003724 <I2C_RequestMemoryWrite>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0a9      	b.n	80034e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2bff      	cmp	r3, #255	@ 0xff
 8003398:	d90e      	bls.n	80033b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	22ff      	movs	r2, #255	@ 0xff
 800339e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	8979      	ldrh	r1, [r7, #10]
 80033a8:	2300      	movs	r3, #0
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fc47 	bl	8003c44 <I2C_TransferConfig>
 80033b6:	e00f      	b.n	80033d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	8979      	ldrh	r1, [r7, #10]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fc36 	bl	8003c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fac6 	bl	800396e <I2C_WaitOnTXISFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e07b      	b.n	80034e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d034      	beq.n	8003490 <HAL_I2C_Mem_Write+0x1c8>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	d130      	bne.n	8003490 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003434:	2200      	movs	r2, #0
 8003436:	2180      	movs	r1, #128	@ 0x80
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fa3f 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e04d      	b.n	80034e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	2bff      	cmp	r3, #255	@ 0xff
 8003450:	d90e      	bls.n	8003470 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	22ff      	movs	r2, #255	@ 0xff
 8003456:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345c:	b2da      	uxtb	r2, r3
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	2300      	movs	r3, #0
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fbeb 	bl	8003c44 <I2C_TransferConfig>
 800346e:	e00f      	b.n	8003490 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347e:	b2da      	uxtb	r2, r3
 8003480:	8979      	ldrh	r1, [r7, #10]
 8003482:	2300      	movs	r3, #0
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fbda 	bl	8003c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d19e      	bne.n	80033d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 faac 	bl	80039fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e01a      	b.n	80034e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2220      	movs	r2, #32
 80034b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <HAL_I2C_Mem_Write+0x224>)
 80034c2:	400b      	ands	r3, r1
 80034c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	fe00e800 	.word	0xfe00e800

080034f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	4608      	mov	r0, r1
 80034fa:	4611      	mov	r1, r2
 80034fc:	461a      	mov	r2, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	817b      	strh	r3, [r7, #10]
 8003502:	460b      	mov	r3, r1
 8003504:	813b      	strh	r3, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b20      	cmp	r3, #32
 8003514:	f040 80fd 	bne.w	8003712 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_I2C_Mem_Read+0x34>
 800351e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800352a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0f1      	b.n	8003714 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_I2C_Mem_Read+0x4e>
 800353a:	2302      	movs	r3, #2
 800353c:	e0ea      	b.n	8003714 <HAL_I2C_Mem_Read+0x224>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003546:	f7fe fc1f 	bl	8001d88 <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f9af 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0d5      	b.n	8003714 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2222      	movs	r2, #34	@ 0x22
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2240      	movs	r2, #64	@ 0x40
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a3a      	ldr	r2, [r7, #32]
 8003582:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003588:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003590:	88f8      	ldrh	r0, [r7, #6]
 8003592:	893a      	ldrh	r2, [r7, #8]
 8003594:	8979      	ldrh	r1, [r7, #10]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	4603      	mov	r3, r0
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f913 	bl	80037cc <I2C_RequestMemoryRead>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0ad      	b.n	8003714 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2bff      	cmp	r3, #255	@ 0xff
 80035c0:	d90e      	bls.n	80035e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	8979      	ldrh	r1, [r7, #10]
 80035d0:	4b52      	ldr	r3, [pc, #328]	@ (800371c <HAL_I2C_Mem_Read+0x22c>)
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fb33 	bl	8003c44 <I2C_TransferConfig>
 80035de:	e00f      	b.n	8003600 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	8979      	ldrh	r1, [r7, #10]
 80035f2:	4b4a      	ldr	r3, [pc, #296]	@ (800371c <HAL_I2C_Mem_Read+0x22c>)
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fb22 	bl	8003c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003606:	2200      	movs	r2, #0
 8003608:	2104      	movs	r1, #4
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f956 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e07c      	b.n	8003714 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d034      	beq.n	80036c0 <HAL_I2C_Mem_Read+0x1d0>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d130      	bne.n	80036c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	2200      	movs	r2, #0
 8003666:	2180      	movs	r1, #128	@ 0x80
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f927 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e04d      	b.n	8003714 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	2bff      	cmp	r3, #255	@ 0xff
 8003680:	d90e      	bls.n	80036a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368c:	b2da      	uxtb	r2, r3
 800368e:	8979      	ldrh	r1, [r7, #10]
 8003690:	2300      	movs	r3, #0
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fad3 	bl	8003c44 <I2C_TransferConfig>
 800369e:	e00f      	b.n	80036c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	8979      	ldrh	r1, [r7, #10]
 80036b2:	2300      	movs	r3, #0
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fac2 	bl	8003c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d19a      	bne.n	8003600 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f994 	bl	80039fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e01a      	b.n	8003714 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2220      	movs	r2, #32
 80036e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <HAL_I2C_Mem_Read+0x230>)
 80036f2:	400b      	ands	r3, r1
 80036f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003712:	2302      	movs	r3, #2
  }
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	80002400 	.word	0x80002400
 8003720:	fe00e800 	.word	0xfe00e800

08003724 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	4608      	mov	r0, r1
 800372e:	4611      	mov	r1, r2
 8003730:	461a      	mov	r2, r3
 8003732:	4603      	mov	r3, r0
 8003734:	817b      	strh	r3, [r7, #10]
 8003736:	460b      	mov	r3, r1
 8003738:	813b      	strh	r3, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	8979      	ldrh	r1, [r7, #10]
 8003744:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <I2C_RequestMemoryWrite+0xa4>)
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fa79 	bl	8003c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	69b9      	ldr	r1, [r7, #24]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f909 	bl	800396e <I2C_WaitOnTXISFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e02c      	b.n	80037c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800376c:	893b      	ldrh	r3, [r7, #8]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	629a      	str	r2, [r3, #40]	@ 0x28
 8003776:	e015      	b.n	80037a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003778:	893b      	ldrh	r3, [r7, #8]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	b29b      	uxth	r3, r3
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	69b9      	ldr	r1, [r7, #24]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f8ef 	bl	800396e <I2C_WaitOnTXISFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e012      	b.n	80037c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800379a:	893b      	ldrh	r3, [r7, #8]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2180      	movs	r1, #128	@ 0x80
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f884 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	80002000 	.word	0x80002000

080037cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	460b      	mov	r3, r1
 80037e0:	813b      	strh	r3, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	8979      	ldrh	r1, [r7, #10]
 80037ec:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <I2C_RequestMemoryRead+0xa4>)
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fa26 	bl	8003c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f8b6 	bl	800396e <I2C_WaitOnTXISFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e02c      	b.n	8003866 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d105      	bne.n	800381e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003812:	893b      	ldrh	r3, [r7, #8]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	629a      	str	r2, [r3, #40]	@ 0x28
 800381c:	e015      	b.n	800384a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800381e:	893b      	ldrh	r3, [r7, #8]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	b29b      	uxth	r3, r3
 8003824:	b2da      	uxtb	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	69b9      	ldr	r1, [r7, #24]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f89c 	bl	800396e <I2C_WaitOnTXISFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e012      	b.n	8003866 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003840:	893b      	ldrh	r3, [r7, #8]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2200      	movs	r2, #0
 8003852:	2140      	movs	r1, #64	@ 0x40
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f831 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	80002000 	.word	0x80002000

08003874 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d103      	bne.n	8003892 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d007      	beq.n	80038b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	619a      	str	r2, [r3, #24]
  }
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038cc:	e03b      	b.n	8003946 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	6839      	ldr	r1, [r7, #0]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f8d6 	bl	8003a84 <I2C_IsErrorOccurred>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e041      	b.n	8003966 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d02d      	beq.n	8003946 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7fe fa4d 	bl	8001d88 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <I2C_WaitOnFlagUntilTimeout+0x44>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d122      	bne.n	8003946 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	429a      	cmp	r2, r3
 800391c:	d113      	bne.n	8003946 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e00f      	b.n	8003966 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699a      	ldr	r2, [r3, #24]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d0b4      	beq.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800397a:	e033      	b.n	80039e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f87f 	bl	8003a84 <I2C_IsErrorOccurred>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e031      	b.n	80039f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d025      	beq.n	80039e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003998:	f7fe f9f6 	bl	8001d88 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d302      	bcc.n	80039ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d11a      	bne.n	80039e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d013      	beq.n	80039e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e007      	b.n	80039f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d1c4      	bne.n	800397c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a08:	e02f      	b.n	8003a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f838 	bl	8003a84 <I2C_IsErrorOccurred>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e02d      	b.n	8003a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1e:	f7fe f9b3 	bl	8001d88 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d302      	bcc.n	8003a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d11a      	bne.n	8003a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d013      	beq.n	8003a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e007      	b.n	8003a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d1c8      	bne.n	8003a0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	@ 0x28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d068      	beq.n	8003b82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ab8:	e049      	b.n	8003b4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d045      	beq.n	8003b4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ac2:	f7fe f961 	bl	8001d88 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <I2C_IsErrorOccurred+0x54>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d13a      	bne.n	8003b4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afa:	d121      	bne.n	8003b40 <I2C_IsErrorOccurred+0xbc>
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b02:	d01d      	beq.n	8003b40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d01a      	beq.n	8003b40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b1a:	f7fe f935 	bl	8001d88 <HAL_GetTick>
 8003b1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b20:	e00e      	b.n	8003b40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b22:	f7fe f931 	bl	8001d88 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b19      	cmp	r3, #25
 8003b2e:	d907      	bls.n	8003b40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	f043 0320 	orr.w	r3, r3, #32
 8003b36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003b3e:	e006      	b.n	8003b4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d1e9      	bne.n	8003b22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d003      	beq.n	8003b64 <I2C_IsErrorOccurred+0xe0>
 8003b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0aa      	beq.n	8003aba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2220      	movs	r2, #32
 8003b72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00b      	beq.n	8003bac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f043 0308 	orr.w	r3, r3, #8
 8003bbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01c      	beq.n	8003c32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff fe3b 	bl	8003874 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <I2C_IsErrorOccurred+0x1bc>)
 8003c0a:	400b      	ands	r3, r1
 8003c0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003c32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3728      	adds	r7, #40	@ 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	fe00e800 	.word	0xfe00e800

08003c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	817b      	strh	r3, [r7, #10]
 8003c52:	4613      	mov	r3, r2
 8003c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c5c:	7a7b      	ldrb	r3, [r7, #9]
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	0d5b      	lsrs	r3, r3, #21
 8003c7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c82:	4b08      	ldr	r3, [pc, #32]	@ (8003ca4 <I2C_TransferConfig+0x60>)
 8003c84:	430b      	orrs	r3, r1
 8003c86:	43db      	mvns	r3, r3
 8003c88:	ea02 0103 	and.w	r1, r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	03ff63ff 	.word	0x03ff63ff

08003ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d138      	bne.n	8003d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e032      	b.n	8003d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	@ 0x24
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d139      	bne.n	8003dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e033      	b.n	8003dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2224      	movs	r2, #36	@ 0x24
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0ef      	b.n	8003fc8 <HAL_PCD_Init+0x1f2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fd fcdb 	bl	80017b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2203      	movs	r2, #3
 8003e06:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 fe42 	bl	8007a9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e24:	f003 fe2d 	bl	8007a82 <USB_CoreInit>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2202      	movs	r2, #2
 8003e32:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0c6      	b.n	8003fc8 <HAL_PCD_Init+0x1f2>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f003 fe47 	bl	8007ad4 <USB_SetCurrentMode>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0b7      	b.n	8003fc8 <HAL_PCD_Init+0x1f2>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	e03e      	b.n	8003edc <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3311      	adds	r3, #17
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	440b      	add	r3, r1
 8003e80:	3310      	adds	r3, #16
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e86:	7bfa      	ldrb	r2, [r7, #15]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	440b      	add	r3, r1
 8003e94:	3313      	adds	r3, #19
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3320      	adds	r3, #32
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	440b      	add	r3, r1
 8003ebc:	3324      	adds	r3, #36	@ 0x24
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	440b      	add	r3, r1
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	791b      	ldrb	r3, [r3, #4]
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d3bb      	bcc.n	8003e5e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	e044      	b.n	8003f76 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eec:	7bfa      	ldrb	r2, [r7, #15]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	440b      	add	r3, r1
 8003efa:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f02:	7bfa      	ldrb	r2, [r7, #15]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f14:	7bfa      	ldrb	r2, [r7, #15]
 8003f16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	440b      	add	r3, r1
 8003f26:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f2e:	7bfa      	ldrb	r2, [r7, #15]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	3301      	adds	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	791b      	ldrb	r3, [r3, #4]
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d3b5      	bcc.n	8003eec <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f8a:	f003 fdb0 	bl	8007aee <USB_DevInit>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e013      	b.n	8003fc8 <HAL_PCD_Init+0x1f2>
  }

  hpcd->USB_Address = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7adb      	ldrb	r3, [r3, #11]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d102      	bne.n	8003fbc <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f80a 	bl	8003fd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f003 fdb2 	bl	8007b2a <USB_DevDisconnect>

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004008:	b29b      	uxth	r3, r3
 800400a:	f043 0302 	orr.w	r3, r3, #2
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a04      	ldr	r2, [pc, #16]	@ (8004040 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40007000 	.word	0x40007000

08004044 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004048:	4b04      	ldr	r3, [pc, #16]	@ (800405c <HAL_PWREx_GetVoltageRange+0x18>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40007000 	.word	0x40007000

08004060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800406e:	d130      	bne.n	80040d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004070:	4b23      	ldr	r3, [pc, #140]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800407c:	d038      	beq.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800407e:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004086:	4a1e      	ldr	r2, [pc, #120]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004088:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800408e:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2232      	movs	r2, #50	@ 0x32
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	4a1b      	ldr	r2, [pc, #108]	@ (8004108 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9b      	lsrs	r3, r3, #18
 80040a0:	3301      	adds	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a4:	e002      	b.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ac:	4b14      	ldr	r3, [pc, #80]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b8:	d102      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f2      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040cc:	d110      	bne.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e00f      	b.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040de:	d007      	beq.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040e0:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040e8:	4a05      	ldr	r2, [pc, #20]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40007000 	.word	0x40007000
 8004104:	20000010 	.word	0x20000010
 8004108:	431bde83 	.word	0x431bde83

0800410c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004110:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4a04      	ldr	r2, [pc, #16]	@ (8004128 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800411a:	6053      	str	r3, [r2, #4]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40007000 	.word	0x40007000

0800412c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004134:	f7fd fe28 	bl	8001d88 <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e069      	b.n	8004218 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fc fff5 	bl	8001148 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800415e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f85e 	bl	8004224 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	3b01      	subs	r3, #1
 8004178:	021a      	lsls	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	2120      	movs	r1, #32
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f856 	bl	8004240 <QSPI_WaitFlagStateUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004198:	7afb      	ldrb	r3, [r7, #11]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d137      	bne.n	800420e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041a8:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6852      	ldr	r2, [r2, #4]
 80041b0:	0611      	lsls	r1, r2, #24
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68d2      	ldr	r2, [r2, #12]
 80041b6:	4311      	orrs	r1, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	69d2      	ldr	r2, [r2, #28]
 80041bc:	4311      	orrs	r1, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6a12      	ldr	r2, [r2, #32]
 80041c2:	4311      	orrs	r1, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4b13      	ldr	r3, [pc, #76]	@ (8004220 <HAL_QSPI_Init+0xf4>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6912      	ldr	r2, [r2, #16]
 80041da:	0411      	lsls	r1, r2, #16
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6952      	ldr	r2, [r2, #20]
 80041e0:	4311      	orrs	r1, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6992      	ldr	r2, [r2, #24]
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004216:	7afb      	ldrb	r3, [r7, #11]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	ffe0f8fe 	.word	0xffe0f8fe

08004224 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004250:	e01a      	b.n	8004288 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d016      	beq.n	8004288 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fd fd95 	bl	8001d88 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2204      	movs	r2, #4
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e00e      	b.n	80042a6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf14      	ite	ne
 8004296:	2301      	movne	r3, #1
 8004298:	2300      	moveq	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d1d6      	bne.n	8004252 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f000 bc02 	b.w	8004ac8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c4:	4b96      	ldr	r3, [pc, #600]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ce:	4b94      	ldr	r3, [pc, #592]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80e4 	beq.w	80044ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_RCC_OscConfig+0x4c>
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	f040 808b 	bne.w	800440a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	f040 8087 	bne.w	800440a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042fc:	4b88      	ldr	r3, [pc, #544]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x64>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e3d9      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1a      	ldr	r2, [r3, #32]
 8004318:	4b81      	ldr	r3, [pc, #516]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <HAL_RCC_OscConfig+0x7e>
 8004324:	4b7e      	ldr	r3, [pc, #504]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800432c:	e005      	b.n	800433a <HAL_RCC_OscConfig+0x8a>
 800432e:	4b7c      	ldr	r3, [pc, #496]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800433a:	4293      	cmp	r3, r2
 800433c:	d223      	bcs.n	8004386 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fdf2 	bl	8004f2c <RCC_SetFlashLatencyFromMSIRange>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e3ba      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004352:	4b73      	ldr	r3, [pc, #460]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a72      	ldr	r2, [pc, #456]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004358:	f043 0308 	orr.w	r3, r3, #8
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	4b70      	ldr	r3, [pc, #448]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	496d      	ldr	r1, [pc, #436]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004370:	4b6b      	ldr	r3, [pc, #428]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	4968      	ldr	r1, [pc, #416]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	e025      	b.n	80043d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004386:	4b66      	ldr	r3, [pc, #408]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a65      	ldr	r2, [pc, #404]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 800438c:	f043 0308 	orr.w	r3, r3, #8
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b63      	ldr	r3, [pc, #396]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4960      	ldr	r1, [pc, #384]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	495b      	ldr	r1, [pc, #364]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fdb2 	bl	8004f2c <RCC_SetFlashLatencyFromMSIRange>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e37a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d2:	f000 fcb5 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 80043d6:	4602      	mov	r2, r0
 80043d8:	4b51      	ldr	r3, [pc, #324]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	4950      	ldr	r1, [pc, #320]	@ (8004524 <HAL_RCC_OscConfig+0x274>)
 80043e4:	5ccb      	ldrb	r3, [r1, r3]
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004528 <HAL_RCC_OscConfig+0x278>)
 80043f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043f2:	4b4e      	ldr	r3, [pc, #312]	@ (800452c <HAL_RCC_OscConfig+0x27c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fd fa3e 	bl	8001878 <HAL_InitTick>
 80043fc:	4603      	mov	r3, r0
 80043fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d052      	beq.n	80044ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	e35e      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d032      	beq.n	8004478 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004412:	4b43      	ldr	r3, [pc, #268]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a42      	ldr	r2, [pc, #264]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800441e:	f7fd fcb3 	bl	8001d88 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004426:	f7fd fcaf 	bl	8001d88 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e347      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004438:	4b39      	ldr	r3, [pc, #228]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004444:	4b36      	ldr	r3, [pc, #216]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a35      	ldr	r2, [pc, #212]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 800444a:	f043 0308 	orr.w	r3, r3, #8
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	4b33      	ldr	r3, [pc, #204]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	4930      	ldr	r1, [pc, #192]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004462:	4b2f      	ldr	r3, [pc, #188]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	492b      	ldr	r1, [pc, #172]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
 8004476:	e01a      	b.n	80044ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004478:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a28      	ldr	r2, [pc, #160]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004484:	f7fd fc80 	bl	8001d88 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800448c:	f7fd fc7c 	bl	8001d88 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e314      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800449e:	4b20      	ldr	r3, [pc, #128]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x1dc>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d073      	beq.n	80045a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d005      	beq.n	80044cc <HAL_RCC_OscConfig+0x21c>
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d10e      	bne.n	80044e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d10b      	bne.n	80044e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044cc:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d063      	beq.n	80045a0 <HAL_RCC_OscConfig+0x2f0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d15f      	bne.n	80045a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e2f1      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ec:	d106      	bne.n	80044fc <HAL_RCC_OscConfig+0x24c>
 80044ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e025      	b.n	8004548 <HAL_RCC_OscConfig+0x298>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004504:	d114      	bne.n	8004530 <HAL_RCC_OscConfig+0x280>
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a05      	ldr	r2, [pc, #20]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 800450c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a02      	ldr	r2, [pc, #8]	@ (8004520 <HAL_RCC_OscConfig+0x270>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e013      	b.n	8004548 <HAL_RCC_OscConfig+0x298>
 8004520:	40021000 	.word	0x40021000
 8004524:	08009ad8 	.word	0x08009ad8
 8004528:	20000010 	.word	0x20000010
 800452c:	20000014 	.word	0x20000014
 8004530:	4ba0      	ldr	r3, [pc, #640]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a9f      	ldr	r2, [pc, #636]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b9d      	ldr	r3, [pc, #628]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a9c      	ldr	r2, [pc, #624]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fd fc1a 	bl	8001d88 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7fd fc16 	bl	8001d88 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	@ 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e2ae      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800456a:	4b92      	ldr	r3, [pc, #584]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x2a8>
 8004576:	e014      	b.n	80045a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fd fc06 	bl	8001d88 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004580:	f7fd fc02 	bl	8001d88 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	@ 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e29a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004592:	4b88      	ldr	r3, [pc, #544]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x2d0>
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d060      	beq.n	8004670 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_OscConfig+0x310>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d119      	bne.n	80045ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d116      	bne.n	80045ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c0:	4b7c      	ldr	r3, [pc, #496]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_OscConfig+0x328>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e277      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d8:	4b76      	ldr	r3, [pc, #472]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	4973      	ldr	r1, [pc, #460]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ec:	e040      	b.n	8004670 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d023      	beq.n	800463e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f6:	4b6f      	ldr	r3, [pc, #444]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a6e      	ldr	r2, [pc, #440]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80045fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fd fbc1 	bl	8001d88 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460a:	f7fd fbbd 	bl	8001d88 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e255      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800461c:	4b65      	ldr	r3, [pc, #404]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004628:	4b62      	ldr	r3, [pc, #392]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	495f      	ldr	r1, [pc, #380]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
 800463c:	e018      	b.n	8004670 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463e:	4b5d      	ldr	r3, [pc, #372]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a5c      	ldr	r2, [pc, #368]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fd fb9d 	bl	8001d88 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004652:	f7fd fb99 	bl	8001d88 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e231      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004664:	4b53      	ldr	r3, [pc, #332]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f0      	bne.n	8004652 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d03c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01c      	beq.n	80046be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004684:	4b4b      	ldr	r3, [pc, #300]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468a:	4a4a      	ldr	r2, [pc, #296]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fd fb78 	bl	8001d88 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7fd fb74 	bl	8001d88 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e20c      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ae:	4b41      	ldr	r3, [pc, #260]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80046b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ef      	beq.n	800469c <HAL_RCC_OscConfig+0x3ec>
 80046bc:	e01b      	b.n	80046f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046be:	4b3d      	ldr	r3, [pc, #244]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80046c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046c4:	4a3b      	ldr	r2, [pc, #236]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ce:	f7fd fb5b 	bl	8001d88 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d6:	f7fd fb57 	bl	8001d88 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e1ef      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e8:	4b32      	ldr	r3, [pc, #200]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ef      	bne.n	80046d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80a6 	beq.w	8004850 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004704:	2300      	movs	r3, #0
 8004706:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004708:	4b2a      	ldr	r3, [pc, #168]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10d      	bne.n	8004730 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004714:	4b27      	ldr	r3, [pc, #156]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004718:	4a26      	ldr	r2, [pc, #152]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 800471a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004720:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472c:	2301      	movs	r3, #1
 800472e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004730:	4b21      	ldr	r3, [pc, #132]	@ (80047b8 <HAL_RCC_OscConfig+0x508>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d118      	bne.n	800476e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800473c:	4b1e      	ldr	r3, [pc, #120]	@ (80047b8 <HAL_RCC_OscConfig+0x508>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1d      	ldr	r2, [pc, #116]	@ (80047b8 <HAL_RCC_OscConfig+0x508>)
 8004742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004746:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004748:	f7fd fb1e 	bl	8001d88 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004750:	f7fd fb1a 	bl	8001d88 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e1b2      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004762:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <HAL_RCC_OscConfig+0x508>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d108      	bne.n	8004788 <HAL_RCC_OscConfig+0x4d8>
 8004776:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477c:	4a0d      	ldr	r2, [pc, #52]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004786:	e029      	b.n	80047dc <HAL_RCC_OscConfig+0x52c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b05      	cmp	r3, #5
 800478e:	d115      	bne.n	80047bc <HAL_RCC_OscConfig+0x50c>
 8004790:	4b08      	ldr	r3, [pc, #32]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004796:	4a07      	ldr	r2, [pc, #28]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047a0:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a6:	4a03      	ldr	r2, [pc, #12]	@ (80047b4 <HAL_RCC_OscConfig+0x504>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047b0:	e014      	b.n	80047dc <HAL_RCC_OscConfig+0x52c>
 80047b2:	bf00      	nop
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40007000 	.word	0x40007000
 80047bc:	4b9a      	ldr	r3, [pc, #616]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c2:	4a99      	ldr	r2, [pc, #612]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047cc:	4b96      	ldr	r3, [pc, #600]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d2:	4a95      	ldr	r2, [pc, #596]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80047d4:	f023 0304 	bic.w	r3, r3, #4
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d016      	beq.n	8004812 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e4:	f7fd fad0 	bl	8001d88 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fd facc 	bl	8001d88 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e162      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004802:	4b89      	ldr	r3, [pc, #548]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ed      	beq.n	80047ec <HAL_RCC_OscConfig+0x53c>
 8004810:	e015      	b.n	800483e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fd fab9 	bl	8001d88 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fd fab5 	bl	8001d88 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e14b      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004830:	4b7d      	ldr	r3, [pc, #500]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1ed      	bne.n	800481a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800483e:	7ffb      	ldrb	r3, [r7, #31]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d105      	bne.n	8004850 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004844:	4b78      	ldr	r3, [pc, #480]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004848:	4a77      	ldr	r2, [pc, #476]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 800484a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800484e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d03c      	beq.n	80048d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01c      	beq.n	800489e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004864:	4b70      	ldr	r3, [pc, #448]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004866:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800486a:	4a6f      	ldr	r2, [pc, #444]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fd fa88 	bl	8001d88 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800487c:	f7fd fa84 	bl	8001d88 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e11c      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800488e:	4b66      	ldr	r3, [pc, #408]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004890:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0ef      	beq.n	800487c <HAL_RCC_OscConfig+0x5cc>
 800489c:	e01b      	b.n	80048d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800489e:	4b62      	ldr	r3, [pc, #392]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80048a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048a4:	4a60      	ldr	r2, [pc, #384]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fd fa6b 	bl	8001d88 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b6:	f7fd fa67 	bl	8001d88 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e0ff      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048c8:	4b57      	ldr	r3, [pc, #348]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80048ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ef      	bne.n	80048b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80f3 	beq.w	8004ac6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	f040 80c9 	bne.w	8004a7c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f003 0203 	and.w	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d12c      	bne.n	8004958 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	3b01      	subs	r3, #1
 800490a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d123      	bne.n	8004958 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d11b      	bne.n	8004958 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d113      	bne.n	8004958 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	3b01      	subs	r3, #1
 800493e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d109      	bne.n	8004958 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	3b01      	subs	r3, #1
 8004952:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d06b      	beq.n	8004a30 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d062      	beq.n	8004a24 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800495e:	4b32      	ldr	r3, [pc, #200]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e0ac      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800496e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2d      	ldr	r2, [pc, #180]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004974:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004978:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800497a:	f7fd fa05 	bl	8001d88 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004982:	f7fd fa01 	bl	8001d88 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e099      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004994:	4b24      	ldr	r3, [pc, #144]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a0:	4b21      	ldr	r3, [pc, #132]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	4b21      	ldr	r3, [pc, #132]	@ (8004a2c <HAL_RCC_OscConfig+0x77c>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049b0:	3a01      	subs	r2, #1
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	4311      	orrs	r1, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049ba:	0212      	lsls	r2, r2, #8
 80049bc:	4311      	orrs	r1, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049c2:	0852      	lsrs	r2, r2, #1
 80049c4:	3a01      	subs	r2, #1
 80049c6:	0552      	lsls	r2, r2, #21
 80049c8:	4311      	orrs	r1, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049ce:	0852      	lsrs	r2, r2, #1
 80049d0:	3a01      	subs	r2, #1
 80049d2:	0652      	lsls	r2, r2, #25
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049da:	06d2      	lsls	r2, r2, #27
 80049dc:	430a      	orrs	r2, r1
 80049de:	4912      	ldr	r1, [pc, #72]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049e4:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80049ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 80049f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049fc:	f7fd f9c4 	bl	8001d88 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fd f9c0 	bl	8001d88 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e058      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a16:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <HAL_RCC_OscConfig+0x778>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a22:	e050      	b.n	8004ac6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e04f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a30:	4b27      	ldr	r3, [pc, #156]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d144      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a3c:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a23      	ldr	r2, [pc, #140]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a48:	4b21      	ldr	r3, [pc, #132]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a20      	ldr	r2, [pc, #128]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a54:	f7fd f998 	bl	8001d88 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fd f994 	bl	8001d88 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e02c      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	4b18      	ldr	r3, [pc, #96]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x7ac>
 8004a7a:	e024      	b.n	8004ac6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d01f      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a82:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a12      	ldr	r2, [pc, #72]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004a88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fd f97b 	bl	8001d88 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fd f977 	bl	8001d88 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e00f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa8:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ab4:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	4905      	ldr	r1, [pc, #20]	@ (8004ad0 <HAL_RCC_OscConfig+0x820>)
 8004aba:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <HAL_RCC_OscConfig+0x824>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	60cb      	str	r3, [r1, #12]
 8004ac0:	e001      	b.n	8004ac6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	feeefffc 	.word	0xfeeefffc

08004ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0e7      	b.n	8004cbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aec:	4b75      	ldr	r3, [pc, #468]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d910      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afa:	4b72      	ldr	r3, [pc, #456]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 0207 	bic.w	r2, r3, #7
 8004b02:	4970      	ldr	r1, [pc, #448]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b6e      	ldr	r3, [pc, #440]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0cf      	b.n	8004cbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	4b66      	ldr	r3, [pc, #408]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d908      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b63      	ldr	r3, [pc, #396]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4960      	ldr	r1, [pc, #384]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d04c      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d121      	bne.n	8004bae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0a6      	b.n	8004cbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b76:	4b54      	ldr	r3, [pc, #336]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d115      	bne.n	8004bae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e09a      	b.n	8004cbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e08e      	b.n	8004cbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e086      	b.n	8004cbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bae:	4b46      	ldr	r3, [pc, #280]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 0203 	bic.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4943      	ldr	r1, [pc, #268]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc0:	f7fd f8e2 	bl	8001d88 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc8:	f7fd f8de 	bl	8001d88 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e06e      	b.n	8004cbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 020c 	and.w	r2, r3, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d1eb      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d010      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	4b31      	ldr	r3, [pc, #196]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d208      	bcs.n	8004c1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	492b      	ldr	r1, [pc, #172]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1e:	4b29      	ldr	r3, [pc, #164]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d210      	bcs.n	8004c4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2c:	4b25      	ldr	r3, [pc, #148]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f023 0207 	bic.w	r2, r3, #7
 8004c34:	4923      	ldr	r1, [pc, #140]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3c:	4b21      	ldr	r3, [pc, #132]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d001      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e036      	b.n	8004cbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	4918      	ldr	r1, [pc, #96]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d009      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c78:	4b13      	ldr	r3, [pc, #76]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4910      	ldr	r1, [pc, #64]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c8c:	f000 f858 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	490b      	ldr	r1, [pc, #44]	@ (8004ccc <HAL_RCC_ClockConfig+0x1f4>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca8:	4a09      	ldr	r2, [pc, #36]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004caa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cac:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1fc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fc fde1 	bl	8001878 <HAL_InitTick>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cba:	7afb      	ldrb	r3, [r7, #11]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40022000 	.word	0x40022000
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	08009ad8 	.word	0x08009ad8
 8004cd0:	20000010 	.word	0x20000010
 8004cd4:	20000014 	.word	0x20000014

08004cd8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	@ 0x28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004ce4:	4b15      	ldr	r3, [pc, #84]	@ (8004d3c <HAL_RCC_MCOConfig+0x64>)
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce8:	4a14      	ldr	r2, [pc, #80]	@ (8004d3c <HAL_RCC_MCOConfig+0x64>)
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cf0:	4b12      	ldr	r3, [pc, #72]	@ (8004d3c <HAL_RCC_MCOConfig+0x64>)
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004cfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d02:	2302      	movs	r3, #2
 8004d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d06:	2302      	movs	r3, #2
 8004d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004d12:	f107 0314 	add.w	r3, r7, #20
 8004d16:	4619      	mov	r1, r3
 8004d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d1c:	f7fe f884 	bl	8002e28 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004d20:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <HAL_RCC_MCOConfig+0x64>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	4903      	ldr	r1, [pc, #12]	@ (8004d3c <HAL_RCC_MCOConfig+0x64>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]
}
 8004d34:	bf00      	nop
 8004d36:	3728      	adds	r7, #40	@ 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40021000 	.word	0x40021000

08004d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b089      	sub	sp, #36	@ 0x24
 8004d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d58:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x34>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d121      	bne.n	8004db2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d11e      	bne.n	8004db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d74:	4b34      	ldr	r3, [pc, #208]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d80:	4b31      	ldr	r3, [pc, #196]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	e005      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d90:	4b2d      	ldr	r3, [pc, #180]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d102      	bne.n	8004dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004db8:	4b25      	ldr	r3, [pc, #148]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	e004      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc4:	4b23      	ldr	r3, [pc, #140]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d134      	bne.n	8004e38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dce:	4b1e      	ldr	r3, [pc, #120]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d003      	beq.n	8004de6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d003      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0xac>
 8004de4:	e005      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004de6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004de8:	617b      	str	r3, [r7, #20]
      break;
 8004dea:	e005      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dec:	4b19      	ldr	r3, [pc, #100]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dee:	617b      	str	r3, [r7, #20]
      break;
 8004df0:	e002      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	617b      	str	r3, [r7, #20]
      break;
 8004df6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df8:	4b13      	ldr	r3, [pc, #76]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	3301      	adds	r3, #1
 8004e04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e06:	4b10      	ldr	r3, [pc, #64]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	fb03 f202 	mul.w	r2, r3, r2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	0e5b      	lsrs	r3, r3, #25
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	3301      	adds	r3, #1
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e38:	69bb      	ldr	r3, [r7, #24]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3724      	adds	r7, #36	@ 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	08009af0 	.word	0x08009af0
 8004e50:	00f42400 	.word	0x00f42400
 8004e54:	007a1200 	.word	0x007a1200

08004e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	@ (8004e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000010 	.word	0x20000010

08004e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e74:	f7ff fff0 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4904      	ldr	r1, [pc, #16]	@ (8004e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40021000 	.word	0x40021000
 8004e98:	08009ae8 	.word	0x08009ae8

08004e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ea0:	f7ff ffda 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	0adb      	lsrs	r3, r3, #11
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	4904      	ldr	r1, [pc, #16]	@ (8004ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	08009ae8 	.word	0x08009ae8

08004ec8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	220f      	movs	r2, #15
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004ed8:	4b12      	ldr	r3, [pc, #72]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0203 	and.w	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004efc:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	08db      	lsrs	r3, r3, #3
 8004f02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f0a:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <HAL_RCC_GetClockConfig+0x60>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0207 	and.w	r2, r3, #7
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	601a      	str	r2, [r3, #0]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40022000 	.word	0x40022000

08004f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f38:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f44:	f7ff f87e 	bl	8004044 <HAL_PWREx_GetVoltageRange>
 8004f48:	6178      	str	r0, [r7, #20]
 8004f4a:	e014      	b.n	8004f76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f4c:	4b25      	ldr	r3, [pc, #148]	@ (8004fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f50:	4a24      	ldr	r2, [pc, #144]	@ (8004fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f58:	4b22      	ldr	r3, [pc, #136]	@ (8004fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f64:	f7ff f86e 	bl	8004044 <HAL_PWREx_GetVoltageRange>
 8004f68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7c:	d10b      	bne.n	8004f96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b80      	cmp	r3, #128	@ 0x80
 8004f82:	d919      	bls.n	8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f88:	d902      	bls.n	8004f90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e013      	b.n	8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f90:	2301      	movs	r3, #1
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	e010      	b.n	8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b80      	cmp	r3, #128	@ 0x80
 8004f9a:	d902      	bls.n	8004fa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	e00a      	b.n	8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b80      	cmp	r3, #128	@ 0x80
 8004fa6:	d102      	bne.n	8004fae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fa8:	2302      	movs	r3, #2
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	e004      	b.n	8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b70      	cmp	r3, #112	@ 0x70
 8004fb2:	d101      	bne.n	8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f023 0207 	bic.w	r2, r3, #7
 8004fc0:	4909      	ldr	r1, [pc, #36]	@ (8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fc8:	4b07      	ldr	r3, [pc, #28]	@ (8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d001      	beq.n	8004fda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40022000 	.word	0x40022000

08004fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005004:	2b00      	cmp	r3, #0
 8005006:	d031      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800500c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005010:	d01a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005012:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005016:	d814      	bhi.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800501c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005020:	d10f      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005022:	4b5d      	ldr	r3, [pc, #372]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	4a5c      	ldr	r2, [pc, #368]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800502c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800502e:	e00c      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fa54 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005040:	e003      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	74fb      	strb	r3, [r7, #19]
      break;
 8005046:	e000      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504a:	7cfb      	ldrb	r3, [r7, #19]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005050:	4b51      	ldr	r3, [pc, #324]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005056:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505e:	494e      	ldr	r1, [pc, #312]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005066:	e001      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 809e 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507a:	2300      	movs	r3, #0
 800507c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800507e:	4b46      	ldr	r3, [pc, #280]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800508e:	2300      	movs	r3, #0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00d      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005094:	4b40      	ldr	r3, [pc, #256]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005098:	4a3f      	ldr	r2, [pc, #252]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800509a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509e:	6593      	str	r3, [r2, #88]	@ 0x58
 80050a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ac:	2301      	movs	r3, #1
 80050ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b0:	4b3a      	ldr	r3, [pc, #232]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a39      	ldr	r2, [pc, #228]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80050b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050bc:	f7fc fe64 	bl	8001d88 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050c2:	e009      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c4:	f7fc fe60 	bl	8001d88 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d902      	bls.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	74fb      	strb	r3, [r7, #19]
        break;
 80050d6:	e005      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050d8:	4b30      	ldr	r3, [pc, #192]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ef      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d15a      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01e      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	429a      	cmp	r2, r3
 8005104:	d019      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005106:	4b24      	ldr	r3, [pc, #144]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005110:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005112:	4b21      	ldr	r3, [pc, #132]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005118:	4a1f      	ldr	r2, [pc, #124]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800511a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800511e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005122:	4b1d      	ldr	r3, [pc, #116]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005128:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800512a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800512e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005132:	4a19      	ldr	r2, [pc, #100]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d016      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fc fe20 	bl	8001d88 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514a:	e00b      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514c:	f7fc fe1c 	bl	8001d88 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515a:	4293      	cmp	r3, r2
 800515c:	d902      	bls.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	74fb      	strb	r3, [r7, #19]
            break;
 8005162:	e006      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005164:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0ec      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005178:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005186:	4904      	ldr	r1, [pc, #16]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800518e:	e009      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	74bb      	strb	r3, [r7, #18]
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
 800519c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a4:	7c7b      	ldrb	r3, [r7, #17]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d105      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051aa:	4b9e      	ldr	r3, [pc, #632]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ae:	4a9d      	ldr	r2, [pc, #628]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051c2:	4b98      	ldr	r3, [pc, #608]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c8:	f023 0203 	bic.w	r2, r3, #3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	4994      	ldr	r1, [pc, #592]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051e4:	4b8f      	ldr	r3, [pc, #572]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ea:	f023 020c 	bic.w	r2, r3, #12
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	498c      	ldr	r1, [pc, #560]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005206:	4b87      	ldr	r3, [pc, #540]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	4983      	ldr	r1, [pc, #524]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005228:	4b7e      	ldr	r3, [pc, #504]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	497b      	ldr	r1, [pc, #492]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800524a:	4b76      	ldr	r3, [pc, #472]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005250:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005258:	4972      	ldr	r1, [pc, #456]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800526c:	4b6d      	ldr	r3, [pc, #436]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005272:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	496a      	ldr	r1, [pc, #424]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800528e:	4b65      	ldr	r3, [pc, #404]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005294:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800529c:	4961      	ldr	r1, [pc, #388]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052be:	4959      	ldr	r1, [pc, #356]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052d2:	4b54      	ldr	r3, [pc, #336]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e0:	4950      	ldr	r1, [pc, #320]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005302:	4948      	ldr	r1, [pc, #288]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005316:	4b43      	ldr	r3, [pc, #268]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005318:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800531c:	f023 0203 	bic.w	r2, r3, #3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005324:	493f      	ldr	r1, [pc, #252]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d028      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005338:	4b3a      	ldr	r3, [pc, #232]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005346:	4937      	ldr	r1, [pc, #220]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005356:	d106      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005358:	4b32      	ldr	r3, [pc, #200]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a31      	ldr	r2, [pc, #196]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800535e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005362:	60d3      	str	r3, [r2, #12]
 8005364:	e011      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800536a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800536e:	d10c      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	2101      	movs	r1, #1
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f8b4 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d028      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005396:	4b23      	ldr	r3, [pc, #140]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	491f      	ldr	r1, [pc, #124]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053b4:	d106      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053c0:	60d3      	str	r3, [r2, #12]
 80053c2:	e011      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3304      	adds	r3, #4
 80053d2:	2101      	movs	r1, #1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f885 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d02b      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005402:	4908      	ldr	r1, [pc, #32]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005412:	d109      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005414:	4b03      	ldr	r3, [pc, #12]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4a02      	ldr	r2, [pc, #8]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800541a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800541e:	60d3      	str	r3, [r2, #12]
 8005420:	e014      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005430:	d10c      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f000 f853 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005448:	7cfb      	ldrb	r3, [r7, #19]
 800544a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01c      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005458:	4b19      	ldr	r3, [pc, #100]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005466:	4916      	ldr	r1, [pc, #88]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005476:	d10c      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	2102      	movs	r1, #2
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f830 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005488:	7cfb      	ldrb	r3, [r7, #19]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800549e:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ac:	4904      	ldr	r1, [pc, #16]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000

080054c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80054c8:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a04      	ldr	r2, [pc, #16]	@ (80054e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054ce:	f043 0304 	orr.w	r3, r3, #4
 80054d2:	6013      	str	r3, [r2, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40021000 	.word	0x40021000

080054e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054f2:	4b74      	ldr	r3, [pc, #464]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054fe:	4b71      	ldr	r3, [pc, #452]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0203 	and.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d10d      	bne.n	800552a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
       ||
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005516:	4b6b      	ldr	r3, [pc, #428]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	091b      	lsrs	r3, r3, #4
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
       ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d047      	beq.n	80055ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e044      	b.n	80055ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d018      	beq.n	800556a <RCCEx_PLLSAI1_Config+0x86>
 8005538:	2b03      	cmp	r3, #3
 800553a:	d825      	bhi.n	8005588 <RCCEx_PLLSAI1_Config+0xa4>
 800553c:	2b01      	cmp	r3, #1
 800553e:	d002      	beq.n	8005546 <RCCEx_PLLSAI1_Config+0x62>
 8005540:	2b02      	cmp	r3, #2
 8005542:	d009      	beq.n	8005558 <RCCEx_PLLSAI1_Config+0x74>
 8005544:	e020      	b.n	8005588 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005546:	4b5f      	ldr	r3, [pc, #380]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d11d      	bne.n	800558e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005556:	e01a      	b.n	800558e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005558:	4b5a      	ldr	r3, [pc, #360]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005560:	2b00      	cmp	r3, #0
 8005562:	d116      	bne.n	8005592 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005568:	e013      	b.n	8005592 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800556a:	4b56      	ldr	r3, [pc, #344]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005576:	4b53      	ldr	r3, [pc, #332]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005586:	e006      	b.n	8005596 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
      break;
 800558c:	e004      	b.n	8005598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800558e:	bf00      	nop
 8005590:	e002      	b.n	8005598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005596:	bf00      	nop
    }

    if(status == HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800559e:	4b49      	ldr	r3, [pc, #292]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6819      	ldr	r1, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	430b      	orrs	r3, r1
 80055b4:	4943      	ldr	r1, [pc, #268]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d17c      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055c0:	4b40      	ldr	r3, [pc, #256]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3f      	ldr	r2, [pc, #252]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055cc:	f7fc fbdc 	bl	8001d88 <HAL_GetTick>
 80055d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055d2:	e009      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055d4:	f7fc fbd8 	bl	8001d88 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d902      	bls.n	80055e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	73fb      	strb	r3, [r7, #15]
        break;
 80055e6:	e005      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055e8:	4b36      	ldr	r3, [pc, #216]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ef      	bne.n	80055d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d15f      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d110      	bne.n	8005622 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005600:	4b30      	ldr	r3, [pc, #192]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005608:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6892      	ldr	r2, [r2, #8]
 8005610:	0211      	lsls	r1, r2, #8
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68d2      	ldr	r2, [r2, #12]
 8005616:	06d2      	lsls	r2, r2, #27
 8005618:	430a      	orrs	r2, r1
 800561a:	492a      	ldr	r1, [pc, #168]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800561c:	4313      	orrs	r3, r2
 800561e:	610b      	str	r3, [r1, #16]
 8005620:	e027      	b.n	8005672 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d112      	bne.n	800564e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005628:	4b26      	ldr	r3, [pc, #152]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005630:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6892      	ldr	r2, [r2, #8]
 8005638:	0211      	lsls	r1, r2, #8
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6912      	ldr	r2, [r2, #16]
 800563e:	0852      	lsrs	r2, r2, #1
 8005640:	3a01      	subs	r2, #1
 8005642:	0552      	lsls	r2, r2, #21
 8005644:	430a      	orrs	r2, r1
 8005646:	491f      	ldr	r1, [pc, #124]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005648:	4313      	orrs	r3, r2
 800564a:	610b      	str	r3, [r1, #16]
 800564c:	e011      	b.n	8005672 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800564e:	4b1d      	ldr	r3, [pc, #116]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005656:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6892      	ldr	r2, [r2, #8]
 800565e:	0211      	lsls	r1, r2, #8
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6952      	ldr	r2, [r2, #20]
 8005664:	0852      	lsrs	r2, r2, #1
 8005666:	3a01      	subs	r2, #1
 8005668:	0652      	lsls	r2, r2, #25
 800566a:	430a      	orrs	r2, r1
 800566c:	4915      	ldr	r1, [pc, #84]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800566e:	4313      	orrs	r3, r2
 8005670:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005672:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a13      	ldr	r2, [pc, #76]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005678:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800567c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567e:	f7fc fb83 	bl	8001d88 <HAL_GetTick>
 8005682:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005684:	e009      	b.n	800569a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005686:	f7fc fb7f 	bl	8001d88 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d902      	bls.n	800569a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	73fb      	strb	r3, [r7, #15]
          break;
 8005698:	e005      	b.n	80056a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800569a:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0ef      	beq.n	8005686 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	4903      	ldr	r1, [pc, #12]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000

080056c8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e049      	b.n	800576e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	795b      	ldrb	r3, [r3, #5]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb fd8e 	bl	800120c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0204 	orr.w	r2, r2, #4
 8005704:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	d104      	bne.n	800571e <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2204      	movs	r2, #4
 8005718:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e027      	b.n	800576e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800571e:	f7fc fb33 	bl	8001d88 <HAL_GetTick>
 8005722:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005724:	e015      	b.n	8005752 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005726:	f7fc fb2f 	bl	8001d88 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d90e      	bls.n	8005752 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d007      	beq.n	8005752 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2204      	movs	r2, #4
 8005746:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e00d      	b.n	800576e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b01      	cmp	r3, #1
 800575e:	d1e2      	bne.n	8005726 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d079      	beq.n	800587c <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fb fd55 	bl	800124c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d058      	beq.n	800586a <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	22ca      	movs	r2, #202	@ 0xca
 80057be:	625a      	str	r2, [r3, #36]	@ 0x24
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2253      	movs	r2, #83	@ 0x53
 80057c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f881 	bl	80058d0 <RTC_EnterInitMode>
 80057ce:	4603      	mov	r3, r0
 80057d0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d127      	bne.n	8005828 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80057e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ea:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6899      	ldr	r1, [r3, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68d2      	ldr	r2, [r2, #12]
 8005812:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6919      	ldr	r1, [r3, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	041a      	lsls	r2, r3, #16
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f885 	bl	8005938 <RTC_ExitInitMode>
 800582e:	4603      	mov	r3, r0
 8005830:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d113      	bne.n	8005860 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0203 	bic.w	r2, r2, #3
 8005846:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69da      	ldr	r2, [r3, #28]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	22ff      	movs	r2, #255	@ 0xff
 8005866:	625a      	str	r2, [r3, #36]	@ 0x24
 8005868:	e001      	b.n	800586e <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d103      	bne.n	800587c <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a0d      	ldr	r2, [pc, #52]	@ (80058cc <HAL_RTC_WaitForSynchro+0x44>)
 8005896:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005898:	f7fc fa76 	bl	8001d88 <HAL_GetTick>
 800589c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800589e:	e009      	b.n	80058b4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058a0:	f7fc fa72 	bl	8001d88 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058ae:	d901      	bls.n	80058b4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e007      	b.n	80058c4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0ee      	beq.n	80058a0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	0003ff5f 	.word	0x0003ff5f

080058d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d120      	bne.n	800592c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058f4:	f7fc fa48 	bl	8001d88 <HAL_GetTick>
 80058f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058fa:	e00d      	b.n	8005918 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058fc:	f7fc fa44 	bl	8001d88 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800590a:	d905      	bls.n	8005918 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2203      	movs	r2, #3
 8005914:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <RTC_EnterInitMode+0x5c>
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d1e7      	bne.n	80058fc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005944:	4b1a      	ldr	r3, [pc, #104]	@ (80059b0 <RTC_ExitInitMode+0x78>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4a19      	ldr	r2, [pc, #100]	@ (80059b0 <RTC_ExitInitMode+0x78>)
 800594a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800594e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005950:	4b17      	ldr	r3, [pc, #92]	@ (80059b0 <RTC_ExitInitMode+0x78>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10c      	bne.n	8005976 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ff93 	bl	8005888 <HAL_RTC_WaitForSynchro>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01e      	beq.n	80059a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2203      	movs	r2, #3
 800596c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e017      	b.n	80059a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005976:	4b0e      	ldr	r3, [pc, #56]	@ (80059b0 <RTC_ExitInitMode+0x78>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4a0d      	ldr	r2, [pc, #52]	@ (80059b0 <RTC_ExitInitMode+0x78>)
 800597c:	f023 0320 	bic.w	r3, r3, #32
 8005980:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ff80 	bl	8005888 <HAL_RTC_WaitForSynchro>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2203      	movs	r2, #3
 8005992:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800599a:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <RTC_ExitInitMode+0x78>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	4a04      	ldr	r2, [pc, #16]	@ (80059b0 <RTC_ExitInitMode+0x78>)
 80059a0:	f043 0320 	orr.w	r3, r3, #32
 80059a4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40002800 	.word	0x40002800

080059b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e095      	b.n	8005af2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d108      	bne.n	80059e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059d6:	d009      	beq.n	80059ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	61da      	str	r2, [r3, #28]
 80059de:	e005      	b.n	80059ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fb fc50 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a2c:	d902      	bls.n	8005a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	e002      	b.n	8005a3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a42:	d007      	beq.n	8005a54 <HAL_SPI_Init+0xa0>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a4c:	d002      	beq.n	8005a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a96:	ea42 0103 	orr.w	r1, r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	0c1b      	lsrs	r3, r3, #16
 8005ab0:	f003 0204 	and.w	r2, r3, #4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ad0:	ea42 0103 	orr.w	r1, r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e049      	b.n	8005ba0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f841 	bl	8005ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f000 fb35 	bl	80061a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d001      	beq.n	8005bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e040      	b.n	8005c56 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c64 <HAL_TIM_Base_Start_IT+0xa8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00e      	beq.n	8005c14 <HAL_TIM_Base_Start_IT+0x58>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bfe:	d009      	beq.n	8005c14 <HAL_TIM_Base_Start_IT+0x58>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a18      	ldr	r2, [pc, #96]	@ (8005c68 <HAL_TIM_Base_Start_IT+0xac>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <HAL_TIM_Base_Start_IT+0x58>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a17      	ldr	r2, [pc, #92]	@ (8005c6c <HAL_TIM_Base_Start_IT+0xb0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d115      	bne.n	8005c40 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	4b15      	ldr	r3, [pc, #84]	@ (8005c70 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b06      	cmp	r3, #6
 8005c24:	d015      	beq.n	8005c52 <HAL_TIM_Base_Start_IT+0x96>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2c:	d011      	beq.n	8005c52 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0201 	orr.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3e:	e008      	b.n	8005c52 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	e000      	b.n	8005c54 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40000400 	.word	0x40000400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	00010007 	.word	0x00010007

08005c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e049      	b.n	8005d1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fb fbb8 	bl	8001410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f000 fa78 	bl	80061a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d020      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01b      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f06f 0202 	mvn.w	r2, #2
 8005d56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f9fd 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005d72:	e005      	b.n	8005d80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f9ef 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa00 	bl	8006180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01b      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0204 	mvn.w	r2, #4
 8005da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f9d7 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005dbe:	e005      	b.n	8005dcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9c9 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f9da 	bl	8006180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f003 0308 	and.w	r3, r3, #8
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d020      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d01b      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f06f 0208 	mvn.w	r2, #8
 8005dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2204      	movs	r2, #4
 8005df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f9b1 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005e0a:	e005      	b.n	8005e18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f9a3 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f9b4 	bl	8006180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d020      	beq.n	8005e6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01b      	beq.n	8005e6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0210 	mvn.w	r2, #16
 8005e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2208      	movs	r2, #8
 8005e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f98b 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005e56:	e005      	b.n	8005e64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f97d 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f98e 	bl	8006180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00c      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f06f 0201 	mvn.w	r2, #1
 8005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7fb f87f 	bl	8000f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00c      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fce6 	bl	8006888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fcde 	bl	800689c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f948 	bl	8006194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0220 	mvn.w	r2, #32
 8005f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fca6 	bl	8006874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e0ff      	b.n	800614e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b14      	cmp	r3, #20
 8005f5a:	f200 80f0 	bhi.w	800613e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	0800613f 	.word	0x0800613f
 8005f6c:	0800613f 	.word	0x0800613f
 8005f70:	0800613f 	.word	0x0800613f
 8005f74:	08005ff9 	.word	0x08005ff9
 8005f78:	0800613f 	.word	0x0800613f
 8005f7c:	0800613f 	.word	0x0800613f
 8005f80:	0800613f 	.word	0x0800613f
 8005f84:	0800603b 	.word	0x0800603b
 8005f88:	0800613f 	.word	0x0800613f
 8005f8c:	0800613f 	.word	0x0800613f
 8005f90:	0800613f 	.word	0x0800613f
 8005f94:	0800607b 	.word	0x0800607b
 8005f98:	0800613f 	.word	0x0800613f
 8005f9c:	0800613f 	.word	0x0800613f
 8005fa0:	0800613f 	.word	0x0800613f
 8005fa4:	080060bd 	.word	0x080060bd
 8005fa8:	0800613f 	.word	0x0800613f
 8005fac:	0800613f 	.word	0x0800613f
 8005fb0:	0800613f 	.word	0x0800613f
 8005fb4:	080060fd 	.word	0x080060fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 f96c 	bl	800629c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0204 	bic.w	r2, r2, #4
 8005fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6999      	ldr	r1, [r3, #24]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	619a      	str	r2, [r3, #24]
      break;
 8005ff6:	e0a5      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 f9c8 	bl	8006394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6999      	ldr	r1, [r3, #24]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	619a      	str	r2, [r3, #24]
      break;
 8006038:	e084      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fa21 	bl	8006488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0208 	orr.w	r2, r2, #8
 8006054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0204 	bic.w	r2, r2, #4
 8006064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69d9      	ldr	r1, [r3, #28]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	61da      	str	r2, [r3, #28]
      break;
 8006078:	e064      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fa79 	bl	8006578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	021a      	lsls	r2, r3, #8
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	61da      	str	r2, [r3, #28]
      break;
 80060ba:	e043      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fab6 	bl	8006634 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060fa:	e023      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 faee 	bl	80066e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006116:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006126:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800613c:	e002      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800614c:	7dfb      	ldrb	r3, [r7, #23]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a34      	ldr	r2, [pc, #208]	@ (800628c <TIM_Base_SetConfig+0xe4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d007      	beq.n	80061d0 <TIM_Base_SetConfig+0x28>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c6:	d003      	beq.n	80061d0 <TIM_Base_SetConfig+0x28>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a31      	ldr	r2, [pc, #196]	@ (8006290 <TIM_Base_SetConfig+0xe8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d108      	bne.n	80061e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a29      	ldr	r2, [pc, #164]	@ (800628c <TIM_Base_SetConfig+0xe4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0x62>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0x62>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a26      	ldr	r2, [pc, #152]	@ (8006290 <TIM_Base_SetConfig+0xe8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0x62>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a25      	ldr	r2, [pc, #148]	@ (8006294 <TIM_Base_SetConfig+0xec>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0x62>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a24      	ldr	r2, [pc, #144]	@ (8006298 <TIM_Base_SetConfig+0xf0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a12      	ldr	r2, [pc, #72]	@ (800628c <TIM_Base_SetConfig+0xe4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_Base_SetConfig+0xb0>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a12      	ldr	r2, [pc, #72]	@ (8006294 <TIM_Base_SetConfig+0xec>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0xb0>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a11      	ldr	r2, [pc, #68]	@ (8006298 <TIM_Base_SetConfig+0xf0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d103      	bne.n	8006260 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b01      	cmp	r3, #1
 8006270:	d105      	bne.n	800627e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f023 0201 	bic.w	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	611a      	str	r2, [r3, #16]
  }
}
 800627e:	bf00      	nop
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40000400 	.word	0x40000400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400

0800629c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	f023 0201 	bic.w	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f023 0302 	bic.w	r3, r3, #2
 80062e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a24      	ldr	r2, [pc, #144]	@ (8006388 <TIM_OC1_SetConfig+0xec>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <TIM_OC1_SetConfig+0x70>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a23      	ldr	r2, [pc, #140]	@ (800638c <TIM_OC1_SetConfig+0xf0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_OC1_SetConfig+0x70>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a22      	ldr	r2, [pc, #136]	@ (8006390 <TIM_OC1_SetConfig+0xf4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d10c      	bne.n	8006326 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0308 	bic.w	r3, r3, #8
 8006312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f023 0304 	bic.w	r3, r3, #4
 8006324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a17      	ldr	r2, [pc, #92]	@ (8006388 <TIM_OC1_SetConfig+0xec>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d007      	beq.n	800633e <TIM_OC1_SetConfig+0xa2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a16      	ldr	r2, [pc, #88]	@ (800638c <TIM_OC1_SetConfig+0xf0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC1_SetConfig+0xa2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a15      	ldr	r2, [pc, #84]	@ (8006390 <TIM_OC1_SetConfig+0xf4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d111      	bne.n	8006362 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800634c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	621a      	str	r2, [r3, #32]
}
 800637c:	bf00      	nop
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	40012c00 	.word	0x40012c00
 800638c:	40014000 	.word	0x40014000
 8006390:	40014400 	.word	0x40014400

08006394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f023 0210 	bic.w	r2, r3, #16
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0320 	bic.w	r3, r3, #32
 80063e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a22      	ldr	r2, [pc, #136]	@ (800647c <TIM_OC2_SetConfig+0xe8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d10d      	bne.n	8006414 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006412:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a19      	ldr	r2, [pc, #100]	@ (800647c <TIM_OC2_SetConfig+0xe8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <TIM_OC2_SetConfig+0x98>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <TIM_OC2_SetConfig+0xec>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC2_SetConfig+0x98>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <TIM_OC2_SetConfig+0xf0>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d113      	bne.n	8006454 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40014000 	.word	0x40014000
 8006484:	40014400 	.word	0x40014400

08006488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	021b      	lsls	r3, r3, #8
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a21      	ldr	r2, [pc, #132]	@ (800656c <TIM_OC3_SetConfig+0xe4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10d      	bne.n	8006506 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a18      	ldr	r2, [pc, #96]	@ (800656c <TIM_OC3_SetConfig+0xe4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <TIM_OC3_SetConfig+0x96>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a17      	ldr	r2, [pc, #92]	@ (8006570 <TIM_OC3_SetConfig+0xe8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_OC3_SetConfig+0x96>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a16      	ldr	r2, [pc, #88]	@ (8006574 <TIM_OC3_SetConfig+0xec>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d113      	bne.n	8006546 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800652c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	621a      	str	r2, [r3, #32]
}
 8006560:	bf00      	nop
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40014000 	.word	0x40014000
 8006574:	40014400 	.word	0x40014400

08006578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	031b      	lsls	r3, r3, #12
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a14      	ldr	r2, [pc, #80]	@ (8006628 <TIM_OC4_SetConfig+0xb0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <TIM_OC4_SetConfig+0x74>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a13      	ldr	r2, [pc, #76]	@ (800662c <TIM_OC4_SetConfig+0xb4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC4_SetConfig+0x74>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a12      	ldr	r2, [pc, #72]	@ (8006630 <TIM_OC4_SetConfig+0xb8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d109      	bne.n	8006600 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	019b      	lsls	r3, r3, #6
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40012c00 	.word	0x40012c00
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400

08006634 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006678:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	041b      	lsls	r3, r3, #16
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a13      	ldr	r2, [pc, #76]	@ (80066d8 <TIM_OC5_SetConfig+0xa4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d007      	beq.n	800669e <TIM_OC5_SetConfig+0x6a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a12      	ldr	r2, [pc, #72]	@ (80066dc <TIM_OC5_SetConfig+0xa8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_OC5_SetConfig+0x6a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a11      	ldr	r2, [pc, #68]	@ (80066e0 <TIM_OC5_SetConfig+0xac>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d109      	bne.n	80066b2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400

080066e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800672a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	051b      	lsls	r3, r3, #20
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a14      	ldr	r2, [pc, #80]	@ (800678c <TIM_OC6_SetConfig+0xa8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d007      	beq.n	8006750 <TIM_OC6_SetConfig+0x6c>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a13      	ldr	r2, [pc, #76]	@ (8006790 <TIM_OC6_SetConfig+0xac>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC6_SetConfig+0x6c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a12      	ldr	r2, [pc, #72]	@ (8006794 <TIM_OC6_SetConfig+0xb0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d109      	bne.n	8006764 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	621a      	str	r2, [r3, #32]
}
 800677e:	bf00      	nop
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40014000 	.word	0x40014000
 8006794:	40014400 	.word	0x40014400

08006798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e054      	b.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a24      	ldr	r2, [pc, #144]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80067e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a17      	ldr	r2, [pc, #92]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00e      	beq.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006818:	d009      	beq.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a13      	ldr	r2, [pc, #76]	@ (800686c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a11      	ldr	r2, [pc, #68]	@ (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d10c      	bne.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4313      	orrs	r3, r2
 800683e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40012c00 	.word	0x40012c00
 800686c:	40000400 	.word	0x40000400
 8006870:	40014000 	.word	0x40014000

08006874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e040      	b.n	8006944 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fa fe2a 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2224      	movs	r2, #36	@ 0x24
 80068dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0201 	bic.w	r2, r2, #1
 80068ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fe5e 	bl	80075b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fbd5 	bl	80070ac <UART_SetConfig>
 8006902:	4603      	mov	r3, r0
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e01b      	b.n	8006944 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800691a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800692a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0201 	orr.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fedd 	bl	80076fc <UART_CheckIdleState>
 8006942:	4603      	mov	r3, r0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	@ 0x28
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006960:	2b20      	cmp	r3, #32
 8006962:	d177      	bne.n	8006a54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_UART_Transmit+0x24>
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e070      	b.n	8006a56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2221      	movs	r2, #33	@ 0x21
 8006980:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006982:	f7fb fa01 	bl	8001d88 <HAL_GetTick>
 8006986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	88fa      	ldrh	r2, [r7, #6]
 8006994:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a0:	d108      	bne.n	80069b4 <HAL_UART_Transmit+0x68>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	e003      	b.n	80069bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069bc:	e02f      	b.n	8006a1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2180      	movs	r1, #128	@ 0x80
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 ff3f 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e03b      	b.n	8006a56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10b      	bne.n	80069fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	881a      	ldrh	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069f0:	b292      	uxth	r2, r2
 80069f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	3302      	adds	r3, #2
 80069f8:	61bb      	str	r3, [r7, #24]
 80069fa:	e007      	b.n	8006a0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	781a      	ldrb	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1c9      	bne.n	80069be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2200      	movs	r2, #0
 8006a32:	2140      	movs	r1, #64	@ 0x40
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 ff09 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d004      	beq.n	8006a4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e005      	b.n	8006a56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	e000      	b.n	8006a56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006a54:	2302      	movs	r3, #2
  }
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3720      	adds	r7, #32
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b0ba      	sub	sp, #232	@ 0xe8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a8e:	4013      	ands	r3, r2
 8006a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d115      	bne.n	8006ac8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00f      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d009      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 82ca 	beq.w	8007052 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
      }
      return;
 8006ac6:	e2c4      	b.n	8007052 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8117 	beq.w	8006d00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ade:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ae2:	4b85      	ldr	r3, [pc, #532]	@ (8006cf8 <HAL_UART_IRQHandler+0x298>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 810a 	beq.w	8006d00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d011      	beq.n	8006b1c <HAL_UART_IRQHandler+0xbc>
 8006af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b12:	f043 0201 	orr.w	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d011      	beq.n	8006b4c <HAL_UART_IRQHandler+0xec>
 8006b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b42:	f043 0204 	orr.w	r2, r3, #4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d011      	beq.n	8006b7c <HAL_UART_IRQHandler+0x11c>
 8006b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b72:	f043 0202 	orr.w	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d017      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bae:	f043 0208 	orr.w	r2, r3, #8
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d012      	beq.n	8006bea <HAL_UART_IRQHandler+0x18a>
 8006bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00c      	beq.n	8006bea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006be0:	f043 0220 	orr.w	r2, r3, #32
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8230 	beq.w	8007056 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c32:	2b40      	cmp	r3, #64	@ 0x40
 8006c34:	d005      	beq.n	8006c42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d04f      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fe6f 	bl	8007926 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c52:	2b40      	cmp	r3, #64	@ 0x40
 8006c54:	d141      	bne.n	8006cda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1d9      	bne.n	8006c56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d013      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cae:	4a13      	ldr	r2, [pc, #76]	@ (8006cfc <HAL_UART_IRQHandler+0x29c>)
 8006cb0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fc f874 	bl	8002da4 <HAL_DMA_Abort_IT>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d017      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	e00f      	b.n	8006cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f9d4 	bl	8007080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd8:	e00b      	b.n	8006cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9d0 	bl	8007080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	e007      	b.n	8006cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f9cc 	bl	8007080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006cf0:	e1b1      	b.n	8007056 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf2:	bf00      	nop
    return;
 8006cf4:	e1af      	b.n	8007056 <HAL_UART_IRQHandler+0x5f6>
 8006cf6:	bf00      	nop
 8006cf8:	04000120 	.word	0x04000120
 8006cfc:	080079ef 	.word	0x080079ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	f040 816a 	bne.w	8006fde <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 8163 	beq.w	8006fde <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 815c 	beq.w	8006fde <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2210      	movs	r2, #16
 8006d2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	f040 80d4 	bne.w	8006ee6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80ad 	beq.w	8006eae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	f080 80a5 	bcs.w	8006eae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 8086 	bne.w	8006e8c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006daa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1da      	bne.n	8006d80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3308      	adds	r3, #8
 8006dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e1      	bne.n	8006dca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e3      	bne.n	8006e06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e5c:	f023 0310 	bic.w	r3, r3, #16
 8006e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e4      	bne.n	8006e4c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fb ff4e 	bl	8002d28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f8f4 	bl	8007094 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006eac:	e0d5      	b.n	800705a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006eb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	f040 80ce 	bne.w	800705a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	f040 80c5 	bne.w	800705a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f8d8 	bl	8007094 <HAL_UARTEx_RxEventCallback>
      return;
 8006ee4:	e0b9      	b.n	800705a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 80ab 	beq.w	800705e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80a6 	beq.w	800705e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e4      	bne.n	8006f12 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	623b      	str	r3, [r7, #32]
   return(result);
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3308      	adds	r3, #8
 8006f68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e3      	bne.n	8006f48 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f023 0310 	bic.w	r3, r3, #16
 8006fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fb6:	61fb      	str	r3, [r7, #28]
 8006fb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	69b9      	ldr	r1, [r7, #24]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e4      	bne.n	8006f94 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f85c 	bl	8007094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fdc:	e03f      	b.n	800705e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00e      	beq.n	8007008 <HAL_UART_IRQHandler+0x5a8>
 8006fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d008      	beq.n	8007008 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ffe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fd34 	bl	8007a6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007006:	e02d      	b.n	8007064 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800700c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00e      	beq.n	8007032 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701c:	2b00      	cmp	r3, #0
 800701e:	d008      	beq.n	8007032 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01c      	beq.n	8007062 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	4798      	blx	r3
    }
    return;
 8007030:	e017      	b.n	8007062 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d012      	beq.n	8007064 <HAL_UART_IRQHandler+0x604>
 800703e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00c      	beq.n	8007064 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fce5 	bl	8007a1a <UART_EndTransmit_IT>
    return;
 8007050:	e008      	b.n	8007064 <HAL_UART_IRQHandler+0x604>
      return;
 8007052:	bf00      	nop
 8007054:	e006      	b.n	8007064 <HAL_UART_IRQHandler+0x604>
    return;
 8007056:	bf00      	nop
 8007058:	e004      	b.n	8007064 <HAL_UART_IRQHandler+0x604>
      return;
 800705a:	bf00      	nop
 800705c:	e002      	b.n	8007064 <HAL_UART_IRQHandler+0x604>
      return;
 800705e:	bf00      	nop
 8007060:	e000      	b.n	8007064 <HAL_UART_IRQHandler+0x604>
    return;
 8007062:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007064:	37e8      	adds	r7, #232	@ 0xe8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop

0800706c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b0:	b08a      	sub	sp, #40	@ 0x28
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	431a      	orrs	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	4ba5      	ldr	r3, [pc, #660]	@ (8007370 <UART_SetConfig+0x2c4>)
 80070dc:	4013      	ands	r3, r2
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	6812      	ldr	r2, [r2, #0]
 80070e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070e4:	430b      	orrs	r3, r1
 80070e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a9a      	ldr	r2, [pc, #616]	@ (8007374 <UART_SetConfig+0x2c8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007114:	4313      	orrs	r3, r2
 8007116:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007128:	430a      	orrs	r2, r1
 800712a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a91      	ldr	r2, [pc, #580]	@ (8007378 <UART_SetConfig+0x2cc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d126      	bne.n	8007184 <UART_SetConfig+0xd8>
 8007136:	4b91      	ldr	r3, [pc, #580]	@ (800737c <UART_SetConfig+0x2d0>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	2b03      	cmp	r3, #3
 8007142:	d81b      	bhi.n	800717c <UART_SetConfig+0xd0>
 8007144:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <UART_SetConfig+0xa0>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	0800715d 	.word	0x0800715d
 8007150:	0800716d 	.word	0x0800716d
 8007154:	08007165 	.word	0x08007165
 8007158:	08007175 	.word	0x08007175
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007162:	e0d6      	b.n	8007312 <UART_SetConfig+0x266>
 8007164:	2302      	movs	r3, #2
 8007166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716a:	e0d2      	b.n	8007312 <UART_SetConfig+0x266>
 800716c:	2304      	movs	r3, #4
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007172:	e0ce      	b.n	8007312 <UART_SetConfig+0x266>
 8007174:	2308      	movs	r3, #8
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800717a:	e0ca      	b.n	8007312 <UART_SetConfig+0x266>
 800717c:	2310      	movs	r3, #16
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007182:	e0c6      	b.n	8007312 <UART_SetConfig+0x266>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a7d      	ldr	r2, [pc, #500]	@ (8007380 <UART_SetConfig+0x2d4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d138      	bne.n	8007200 <UART_SetConfig+0x154>
 800718e:	4b7b      	ldr	r3, [pc, #492]	@ (800737c <UART_SetConfig+0x2d0>)
 8007190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007194:	f003 030c 	and.w	r3, r3, #12
 8007198:	2b0c      	cmp	r3, #12
 800719a:	d82d      	bhi.n	80071f8 <UART_SetConfig+0x14c>
 800719c:	a201      	add	r2, pc, #4	@ (adr r2, 80071a4 <UART_SetConfig+0xf8>)
 800719e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a2:	bf00      	nop
 80071a4:	080071d9 	.word	0x080071d9
 80071a8:	080071f9 	.word	0x080071f9
 80071ac:	080071f9 	.word	0x080071f9
 80071b0:	080071f9 	.word	0x080071f9
 80071b4:	080071e9 	.word	0x080071e9
 80071b8:	080071f9 	.word	0x080071f9
 80071bc:	080071f9 	.word	0x080071f9
 80071c0:	080071f9 	.word	0x080071f9
 80071c4:	080071e1 	.word	0x080071e1
 80071c8:	080071f9 	.word	0x080071f9
 80071cc:	080071f9 	.word	0x080071f9
 80071d0:	080071f9 	.word	0x080071f9
 80071d4:	080071f1 	.word	0x080071f1
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071de:	e098      	b.n	8007312 <UART_SetConfig+0x266>
 80071e0:	2302      	movs	r3, #2
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e6:	e094      	b.n	8007312 <UART_SetConfig+0x266>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ee:	e090      	b.n	8007312 <UART_SetConfig+0x266>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f6:	e08c      	b.n	8007312 <UART_SetConfig+0x266>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fe:	e088      	b.n	8007312 <UART_SetConfig+0x266>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a5f      	ldr	r2, [pc, #380]	@ (8007384 <UART_SetConfig+0x2d8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d125      	bne.n	8007256 <UART_SetConfig+0x1aa>
 800720a:	4b5c      	ldr	r3, [pc, #368]	@ (800737c <UART_SetConfig+0x2d0>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007210:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007214:	2b30      	cmp	r3, #48	@ 0x30
 8007216:	d016      	beq.n	8007246 <UART_SetConfig+0x19a>
 8007218:	2b30      	cmp	r3, #48	@ 0x30
 800721a:	d818      	bhi.n	800724e <UART_SetConfig+0x1a2>
 800721c:	2b20      	cmp	r3, #32
 800721e:	d00a      	beq.n	8007236 <UART_SetConfig+0x18a>
 8007220:	2b20      	cmp	r3, #32
 8007222:	d814      	bhi.n	800724e <UART_SetConfig+0x1a2>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <UART_SetConfig+0x182>
 8007228:	2b10      	cmp	r3, #16
 800722a:	d008      	beq.n	800723e <UART_SetConfig+0x192>
 800722c:	e00f      	b.n	800724e <UART_SetConfig+0x1a2>
 800722e:	2300      	movs	r3, #0
 8007230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007234:	e06d      	b.n	8007312 <UART_SetConfig+0x266>
 8007236:	2302      	movs	r3, #2
 8007238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800723c:	e069      	b.n	8007312 <UART_SetConfig+0x266>
 800723e:	2304      	movs	r3, #4
 8007240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007244:	e065      	b.n	8007312 <UART_SetConfig+0x266>
 8007246:	2308      	movs	r3, #8
 8007248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800724c:	e061      	b.n	8007312 <UART_SetConfig+0x266>
 800724e:	2310      	movs	r3, #16
 8007250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007254:	e05d      	b.n	8007312 <UART_SetConfig+0x266>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a4b      	ldr	r2, [pc, #300]	@ (8007388 <UART_SetConfig+0x2dc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d125      	bne.n	80072ac <UART_SetConfig+0x200>
 8007260:	4b46      	ldr	r3, [pc, #280]	@ (800737c <UART_SetConfig+0x2d0>)
 8007262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007266:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800726a:	2bc0      	cmp	r3, #192	@ 0xc0
 800726c:	d016      	beq.n	800729c <UART_SetConfig+0x1f0>
 800726e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007270:	d818      	bhi.n	80072a4 <UART_SetConfig+0x1f8>
 8007272:	2b80      	cmp	r3, #128	@ 0x80
 8007274:	d00a      	beq.n	800728c <UART_SetConfig+0x1e0>
 8007276:	2b80      	cmp	r3, #128	@ 0x80
 8007278:	d814      	bhi.n	80072a4 <UART_SetConfig+0x1f8>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <UART_SetConfig+0x1d8>
 800727e:	2b40      	cmp	r3, #64	@ 0x40
 8007280:	d008      	beq.n	8007294 <UART_SetConfig+0x1e8>
 8007282:	e00f      	b.n	80072a4 <UART_SetConfig+0x1f8>
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728a:	e042      	b.n	8007312 <UART_SetConfig+0x266>
 800728c:	2302      	movs	r3, #2
 800728e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007292:	e03e      	b.n	8007312 <UART_SetConfig+0x266>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800729a:	e03a      	b.n	8007312 <UART_SetConfig+0x266>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a2:	e036      	b.n	8007312 <UART_SetConfig+0x266>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072aa:	e032      	b.n	8007312 <UART_SetConfig+0x266>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a30      	ldr	r2, [pc, #192]	@ (8007374 <UART_SetConfig+0x2c8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d12a      	bne.n	800730c <UART_SetConfig+0x260>
 80072b6:	4b31      	ldr	r3, [pc, #196]	@ (800737c <UART_SetConfig+0x2d0>)
 80072b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072c4:	d01a      	beq.n	80072fc <UART_SetConfig+0x250>
 80072c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072ca:	d81b      	bhi.n	8007304 <UART_SetConfig+0x258>
 80072cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d0:	d00c      	beq.n	80072ec <UART_SetConfig+0x240>
 80072d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d6:	d815      	bhi.n	8007304 <UART_SetConfig+0x258>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <UART_SetConfig+0x238>
 80072dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e0:	d008      	beq.n	80072f4 <UART_SetConfig+0x248>
 80072e2:	e00f      	b.n	8007304 <UART_SetConfig+0x258>
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ea:	e012      	b.n	8007312 <UART_SetConfig+0x266>
 80072ec:	2302      	movs	r3, #2
 80072ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072f2:	e00e      	b.n	8007312 <UART_SetConfig+0x266>
 80072f4:	2304      	movs	r3, #4
 80072f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fa:	e00a      	b.n	8007312 <UART_SetConfig+0x266>
 80072fc:	2308      	movs	r3, #8
 80072fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007302:	e006      	b.n	8007312 <UART_SetConfig+0x266>
 8007304:	2310      	movs	r3, #16
 8007306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800730a:	e002      	b.n	8007312 <UART_SetConfig+0x266>
 800730c:	2310      	movs	r3, #16
 800730e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a17      	ldr	r2, [pc, #92]	@ (8007374 <UART_SetConfig+0x2c8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	f040 808b 	bne.w	8007434 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800731e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007322:	2b08      	cmp	r3, #8
 8007324:	d834      	bhi.n	8007390 <UART_SetConfig+0x2e4>
 8007326:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <UART_SetConfig+0x280>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007351 	.word	0x08007351
 8007330:	08007391 	.word	0x08007391
 8007334:	08007359 	.word	0x08007359
 8007338:	08007391 	.word	0x08007391
 800733c:	0800735f 	.word	0x0800735f
 8007340:	08007391 	.word	0x08007391
 8007344:	08007391 	.word	0x08007391
 8007348:	08007391 	.word	0x08007391
 800734c:	08007367 	.word	0x08007367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fd fd8e 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 8007354:	61f8      	str	r0, [r7, #28]
        break;
 8007356:	e021      	b.n	800739c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007358:	4b0c      	ldr	r3, [pc, #48]	@ (800738c <UART_SetConfig+0x2e0>)
 800735a:	61fb      	str	r3, [r7, #28]
        break;
 800735c:	e01e      	b.n	800739c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735e:	f7fd fcef 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8007362:	61f8      	str	r0, [r7, #28]
        break;
 8007364:	e01a      	b.n	800739c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800736a:	61fb      	str	r3, [r7, #28]
        break;
 800736c:	e016      	b.n	800739c <UART_SetConfig+0x2f0>
 800736e:	bf00      	nop
 8007370:	efff69f3 	.word	0xefff69f3
 8007374:	40008000 	.word	0x40008000
 8007378:	40013800 	.word	0x40013800
 800737c:	40021000 	.word	0x40021000
 8007380:	40004400 	.word	0x40004400
 8007384:	40004800 	.word	0x40004800
 8007388:	40004c00 	.word	0x40004c00
 800738c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800739a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80fa 	beq.w	8007598 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	4613      	mov	r3, r2
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	4413      	add	r3, r2
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d305      	bcc.n	80073c0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d903      	bls.n	80073c8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073c6:	e0e7      	b.n	8007598 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	2200      	movs	r2, #0
 80073cc:	461c      	mov	r4, r3
 80073ce:	4615      	mov	r5, r2
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	022b      	lsls	r3, r5, #8
 80073da:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80073de:	0222      	lsls	r2, r4, #8
 80073e0:	68f9      	ldr	r1, [r7, #12]
 80073e2:	6849      	ldr	r1, [r1, #4]
 80073e4:	0849      	lsrs	r1, r1, #1
 80073e6:	2000      	movs	r0, #0
 80073e8:	4688      	mov	r8, r1
 80073ea:	4681      	mov	r9, r0
 80073ec:	eb12 0a08 	adds.w	sl, r2, r8
 80073f0:	eb43 0b09 	adc.w	fp, r3, r9
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007402:	4650      	mov	r0, sl
 8007404:	4659      	mov	r1, fp
 8007406:	f7f8 ff43 	bl	8000290 <__aeabi_uldivmod>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4613      	mov	r3, r2
 8007410:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007418:	d308      	bcc.n	800742c <UART_SetConfig+0x380>
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007420:	d204      	bcs.n	800742c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	60da      	str	r2, [r3, #12]
 800742a:	e0b5      	b.n	8007598 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007432:	e0b1      	b.n	8007598 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800743c:	d15d      	bne.n	80074fa <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800743e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007442:	2b08      	cmp	r3, #8
 8007444:	d827      	bhi.n	8007496 <UART_SetConfig+0x3ea>
 8007446:	a201      	add	r2, pc, #4	@ (adr r2, 800744c <UART_SetConfig+0x3a0>)
 8007448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744c:	08007471 	.word	0x08007471
 8007450:	08007479 	.word	0x08007479
 8007454:	08007481 	.word	0x08007481
 8007458:	08007497 	.word	0x08007497
 800745c:	08007487 	.word	0x08007487
 8007460:	08007497 	.word	0x08007497
 8007464:	08007497 	.word	0x08007497
 8007468:	08007497 	.word	0x08007497
 800746c:	0800748f 	.word	0x0800748f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007470:	f7fd fcfe 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 8007474:	61f8      	str	r0, [r7, #28]
        break;
 8007476:	e014      	b.n	80074a2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007478:	f7fd fd10 	bl	8004e9c <HAL_RCC_GetPCLK2Freq>
 800747c:	61f8      	str	r0, [r7, #28]
        break;
 800747e:	e010      	b.n	80074a2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007480:	4b4c      	ldr	r3, [pc, #304]	@ (80075b4 <UART_SetConfig+0x508>)
 8007482:	61fb      	str	r3, [r7, #28]
        break;
 8007484:	e00d      	b.n	80074a2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007486:	f7fd fc5b 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 800748a:	61f8      	str	r0, [r7, #28]
        break;
 800748c:	e009      	b.n	80074a2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007492:	61fb      	str	r3, [r7, #28]
        break;
 8007494:	e005      	b.n	80074a2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d077      	beq.n	8007598 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	005a      	lsls	r2, r3, #1
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	441a      	add	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b0f      	cmp	r3, #15
 80074c2:	d916      	bls.n	80074f2 <UART_SetConfig+0x446>
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074ca:	d212      	bcs.n	80074f2 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f023 030f 	bic.w	r3, r3, #15
 80074d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	085b      	lsrs	r3, r3, #1
 80074da:	b29b      	uxth	r3, r3
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	8afb      	ldrh	r3, [r7, #22]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	8afa      	ldrh	r2, [r7, #22]
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	e052      	b.n	8007598 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074f8:	e04e      	b.n	8007598 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d827      	bhi.n	8007552 <UART_SetConfig+0x4a6>
 8007502:	a201      	add	r2, pc, #4	@ (adr r2, 8007508 <UART_SetConfig+0x45c>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	0800752d 	.word	0x0800752d
 800750c:	08007535 	.word	0x08007535
 8007510:	0800753d 	.word	0x0800753d
 8007514:	08007553 	.word	0x08007553
 8007518:	08007543 	.word	0x08007543
 800751c:	08007553 	.word	0x08007553
 8007520:	08007553 	.word	0x08007553
 8007524:	08007553 	.word	0x08007553
 8007528:	0800754b 	.word	0x0800754b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800752c:	f7fd fca0 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 8007530:	61f8      	str	r0, [r7, #28]
        break;
 8007532:	e014      	b.n	800755e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007534:	f7fd fcb2 	bl	8004e9c <HAL_RCC_GetPCLK2Freq>
 8007538:	61f8      	str	r0, [r7, #28]
        break;
 800753a:	e010      	b.n	800755e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800753c:	4b1d      	ldr	r3, [pc, #116]	@ (80075b4 <UART_SetConfig+0x508>)
 800753e:	61fb      	str	r3, [r7, #28]
        break;
 8007540:	e00d      	b.n	800755e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007542:	f7fd fbfd 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8007546:	61f8      	str	r0, [r7, #28]
        break;
 8007548:	e009      	b.n	800755e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800754a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800754e:	61fb      	str	r3, [r7, #28]
        break;
 8007550:	e005      	b.n	800755e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800755c:	bf00      	nop
    }

    if (pclk != 0U)
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d019      	beq.n	8007598 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	085a      	lsrs	r2, r3, #1
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	441a      	add	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	fbb2 f3f3 	udiv	r3, r2, r3
 8007576:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b0f      	cmp	r3, #15
 800757c:	d909      	bls.n	8007592 <UART_SetConfig+0x4e6>
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007584:	d205      	bcs.n	8007592 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60da      	str	r2, [r3, #12]
 8007590:	e002      	b.n	8007598 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80075a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3728      	adds	r7, #40	@ 0x28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075b2:	bf00      	nop
 80075b4:	00f42400 	.word	0x00f42400

080075b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764c:	f003 0310 	and.w	r3, r3, #16
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01a      	beq.n	80076ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076b6:	d10a      	bne.n	80076ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	605a      	str	r2, [r3, #4]
  }
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b098      	sub	sp, #96	@ 0x60
 8007700:	af02      	add	r7, sp, #8
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800770c:	f7fa fb3c 	bl	8001d88 <HAL_GetTick>
 8007710:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b08      	cmp	r3, #8
 800771e:	d12e      	bne.n	800777e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007720:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007728:	2200      	movs	r2, #0
 800772a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f88c 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d021      	beq.n	800777e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800774e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007758:	647b      	str	r3, [r7, #68]	@ 0x44
 800775a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800775e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e6      	bne.n	800773a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e062      	b.n	8007844 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b04      	cmp	r3, #4
 800778a:	d149      	bne.n	8007820 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800778c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007794:	2200      	movs	r2, #0
 8007796:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f856 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d03c      	beq.n	8007820 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	623b      	str	r3, [r7, #32]
   return(result);
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80077c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e6      	bne.n	80077a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077f8:	61fa      	str	r2, [r7, #28]
 80077fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	69b9      	ldr	r1, [r7, #24]
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	617b      	str	r3, [r7, #20]
   return(result);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2220      	movs	r2, #32
 8007810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e011      	b.n	8007844 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3758      	adds	r7, #88	@ 0x58
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	4613      	mov	r3, r2
 800785a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785c:	e04f      	b.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007864:	d04b      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007866:	f7fa fa8f 	bl	8001d88 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	429a      	cmp	r2, r3
 8007874:	d302      	bcc.n	800787c <UART_WaitOnFlagUntilTimeout+0x30>
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e04e      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b00      	cmp	r3, #0
 800788c:	d037      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b80      	cmp	r3, #128	@ 0x80
 8007892:	d034      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b40      	cmp	r3, #64	@ 0x40
 8007898:	d031      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d110      	bne.n	80078ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2208      	movs	r2, #8
 80078ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f838 	bl	8007926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2208      	movs	r2, #8
 80078ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e029      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078d8:	d111      	bne.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f81e 	bl	8007926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e00f      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4013      	ands	r3, r2
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2300      	movne	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	429a      	cmp	r2, r3
 800791a:	d0a0      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007926:	b480      	push	{r7}
 8007928:	b095      	sub	sp, #84	@ 0x54
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800794c:	643b      	str	r3, [r7, #64]	@ 0x40
 800794e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e6      	bne.n	800792e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3308      	adds	r3, #8
 8007966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f023 0301 	bic.w	r3, r3, #1
 8007976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007980:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007982:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e5      	bne.n	8007960 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007998:	2b01      	cmp	r3, #1
 800799a:	d118      	bne.n	80079ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f023 0310 	bic.w	r3, r3, #16
 80079b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6979      	ldr	r1, [r7, #20]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	613b      	str	r3, [r7, #16]
   return(result);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e6      	bne.n	800799c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80079e2:	bf00      	nop
 80079e4:	3754      	adds	r7, #84	@ 0x54
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff fb37 	bl	8007080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b088      	sub	sp, #32
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	e853 3f00 	ldrex	r3, [r3]
 8007a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a36:	61fb      	str	r3, [r7, #28]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6979      	ldr	r1, [r7, #20]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e6      	bne.n	8007a22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fb03 	bl	800706c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a66:	bf00      	nop
 8007a68:	3720      	adds	r7, #32
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007aa6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007aaa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4013      	ands	r3, r2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	4638      	mov	r0, r7
 8007af8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b66:	2b84      	cmp	r3, #132	@ 0x84
 8007b68:	d005      	beq.n	8007b76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4413      	add	r3, r2
 8007b72:	3303      	adds	r3, #3
 8007b74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b76:	68fb      	ldr	r3, [r7, #12]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b88:	f000 fafc 	bl	8008184 <vTaskStartScheduler>
  
  return osOK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b94:	b089      	sub	sp, #36	@ 0x24
 8007b96:	af04      	add	r7, sp, #16
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d020      	beq.n	8007be6 <osThreadCreate+0x54>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d01c      	beq.n	8007be6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685c      	ldr	r4, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691e      	ldr	r6, [r3, #16]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff ffc8 	bl	8007b54 <makeFreeRtosPriority>
 8007bc4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bce:	9202      	str	r2, [sp, #8]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	9100      	str	r1, [sp, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 f8ed 	bl	8007dba <xTaskCreateStatic>
 8007be0:	4603      	mov	r3, r0
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e01c      	b.n	8007c20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685c      	ldr	r4, [r3, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bf2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff ffaa 	bl	8007b54 <makeFreeRtosPriority>
 8007c00:	4602      	mov	r2, r0
 8007c02:	f107 030c 	add.w	r3, r7, #12
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	9200      	str	r2, [sp, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	4629      	mov	r1, r5
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 f932 	bl	8007e7a <xTaskCreate>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d001      	beq.n	8007c20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e000      	b.n	8007c22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c20:	68fb      	ldr	r3, [r7, #12]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <osDelay+0x16>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	e000      	b.n	8007c42 <osDelay+0x18>
 8007c40:	2301      	movs	r3, #1
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fa68 	bl	8008118 <vTaskDelay>
  
  return osOK;
 8007c48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f103 0208 	add.w	r2, r3, #8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f103 0208 	add.w	r2, r3, #8
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f103 0208 	add.w	r2, r3, #8
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d103      	bne.n	8007d14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	e00c      	b.n	8007d2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3308      	adds	r3, #8
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e002      	b.n	8007d22 <vListInsert+0x2e>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d2f6      	bcs.n	8007d1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	601a      	str	r2, [r3, #0]
}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6892      	ldr	r2, [r2, #8]
 8007d7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6852      	ldr	r2, [r2, #4]
 8007d86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d103      	bne.n	8007d9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	1e5a      	subs	r2, r3, #1
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b08e      	sub	sp, #56	@ 0x38
 8007dbe:	af04      	add	r7, sp, #16
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
 8007dc6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	e7fd      	b.n	8007de2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10b      	bne.n	8007e04 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	61fb      	str	r3, [r7, #28]
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	e7fd      	b.n	8007e00 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e04:	23a0      	movs	r3, #160	@ 0xa0
 8007e06:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2ba0      	cmp	r3, #160	@ 0xa0
 8007e0c:	d00b      	beq.n	8007e26 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61bb      	str	r3, [r7, #24]
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	e7fd      	b.n	8007e22 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d01e      	beq.n	8007e6c <xTaskCreateStatic+0xb2>
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01b      	beq.n	8007e6c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e3c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	2202      	movs	r2, #2
 8007e42:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e46:	2300      	movs	r3, #0
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	9302      	str	r3, [sp, #8]
 8007e4e:	f107 0314 	add.w	r3, r7, #20
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f850 	bl	8007f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e66:	f000 f8ed 	bl	8008044 <prvAddNewTaskToReadyList>
 8007e6a:	e001      	b.n	8007e70 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e70:	697b      	ldr	r3, [r7, #20]
	}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3728      	adds	r7, #40	@ 0x28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b08c      	sub	sp, #48	@ 0x30
 8007e7e:	af04      	add	r7, sp, #16
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	603b      	str	r3, [r7, #0]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 ff02 	bl	8008c98 <pvPortMalloc>
 8007e94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00e      	beq.n	8007eba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e9c:	20a0      	movs	r0, #160	@ 0xa0
 8007e9e:	f000 fefb 	bl	8008c98 <pvPortMalloc>
 8007ea2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	631a      	str	r2, [r3, #48]	@ 0x30
 8007eb0:	e005      	b.n	8007ebe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eb2:	6978      	ldr	r0, [r7, #20]
 8007eb4:	f000 ffbe 	bl	8008e34 <vPortFree>
 8007eb8:	e001      	b.n	8007ebe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d017      	beq.n	8007ef4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ecc:	88fa      	ldrh	r2, [r7, #6]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9303      	str	r3, [sp, #12]
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	9302      	str	r3, [sp, #8]
 8007ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f80e 	bl	8007f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ee8:	69f8      	ldr	r0, [r7, #28]
 8007eea:	f000 f8ab 	bl	8008044 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	61bb      	str	r3, [r7, #24]
 8007ef2:	e002      	b.n	8007efa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007efa:	69bb      	ldr	r3, [r7, #24]
	}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3720      	adds	r7, #32
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00b      	beq.n	8007f4e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	617b      	str	r3, [r7, #20]
}
 8007f48:	bf00      	nop
 8007f4a:	bf00      	nop
 8007f4c:	e7fd      	b.n	8007f4a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d01f      	beq.n	8007f94 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f54:	2300      	movs	r3, #0
 8007f56:	61fb      	str	r3, [r7, #28]
 8007f58:	e012      	b.n	8007f80 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	4413      	add	r3, r2
 8007f60:	7819      	ldrb	r1, [r3, #0]
 8007f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	3334      	adds	r3, #52	@ 0x34
 8007f6a:	460a      	mov	r2, r1
 8007f6c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	4413      	add	r3, r2
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d006      	beq.n	8007f88 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	2b0f      	cmp	r3, #15
 8007f84:	d9e9      	bls.n	8007f5a <prvInitialiseNewTask+0x56>
 8007f86:	e000      	b.n	8007f8a <prvInitialiseNewTask+0x86>
			{
				break;
 8007f88:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f92:	e003      	b.n	8007f9c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9e:	2b06      	cmp	r3, #6
 8007fa0:	d901      	bls.n	8007fa6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fa2:	2306      	movs	r3, #6
 8007fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007faa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fb0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff fe68 	bl	8007c92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff fe63 	bl	8007c92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd4:	f1c3 0207 	rsb	r2, r3, #7
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	334c      	adds	r3, #76	@ 0x4c
 8007ff6:	224c      	movs	r2, #76	@ 0x4c
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 f85c 	bl	80090b8 <memset>
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	4a0d      	ldr	r2, [pc, #52]	@ (8008038 <prvInitialiseNewTask+0x134>)
 8008004:	651a      	str	r2, [r3, #80]	@ 0x50
 8008006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008008:	4a0c      	ldr	r2, [pc, #48]	@ (800803c <prvInitialiseNewTask+0x138>)
 800800a:	655a      	str	r2, [r3, #84]	@ 0x54
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	4a0c      	ldr	r2, [pc, #48]	@ (8008040 <prvInitialiseNewTask+0x13c>)
 8008010:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	68f9      	ldr	r1, [r7, #12]
 8008016:	69b8      	ldr	r0, [r7, #24]
 8008018:	f000 fc2a 	bl	8008870 <pxPortInitialiseStack>
 800801c:	4602      	mov	r2, r0
 800801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008020:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800802c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800802e:	bf00      	nop
 8008030:	3720      	adds	r7, #32
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20001810 	.word	0x20001810
 800803c:	20001878 	.word	0x20001878
 8008040:	200018e0 	.word	0x200018e0

08008044 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800804c:	f000 fd44 	bl	8008ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008050:	4b2a      	ldr	r3, [pc, #168]	@ (80080fc <prvAddNewTaskToReadyList+0xb8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3301      	adds	r3, #1
 8008056:	4a29      	ldr	r2, [pc, #164]	@ (80080fc <prvAddNewTaskToReadyList+0xb8>)
 8008058:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800805a:	4b29      	ldr	r3, [pc, #164]	@ (8008100 <prvAddNewTaskToReadyList+0xbc>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008062:	4a27      	ldr	r2, [pc, #156]	@ (8008100 <prvAddNewTaskToReadyList+0xbc>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008068:	4b24      	ldr	r3, [pc, #144]	@ (80080fc <prvAddNewTaskToReadyList+0xb8>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d110      	bne.n	8008092 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008070:	f000 fad4 	bl	800861c <prvInitialiseTaskLists>
 8008074:	e00d      	b.n	8008092 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008076:	4b23      	ldr	r3, [pc, #140]	@ (8008104 <prvAddNewTaskToReadyList+0xc0>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800807e:	4b20      	ldr	r3, [pc, #128]	@ (8008100 <prvAddNewTaskToReadyList+0xbc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	429a      	cmp	r2, r3
 800808a:	d802      	bhi.n	8008092 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800808c:	4a1c      	ldr	r2, [pc, #112]	@ (8008100 <prvAddNewTaskToReadyList+0xbc>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008092:	4b1d      	ldr	r3, [pc, #116]	@ (8008108 <prvAddNewTaskToReadyList+0xc4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3301      	adds	r3, #1
 8008098:	4a1b      	ldr	r2, [pc, #108]	@ (8008108 <prvAddNewTaskToReadyList+0xc4>)
 800809a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a0:	2201      	movs	r2, #1
 80080a2:	409a      	lsls	r2, r3
 80080a4:	4b19      	ldr	r3, [pc, #100]	@ (800810c <prvAddNewTaskToReadyList+0xc8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	4a18      	ldr	r2, [pc, #96]	@ (800810c <prvAddNewTaskToReadyList+0xc8>)
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4a15      	ldr	r2, [pc, #84]	@ (8008110 <prvAddNewTaskToReadyList+0xcc>)
 80080bc:	441a      	add	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f7ff fdf1 	bl	8007cac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080ca:	f000 fd37 	bl	8008b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <prvAddNewTaskToReadyList+0xc0>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00e      	beq.n	80080f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008100 <prvAddNewTaskToReadyList+0xbc>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d207      	bcs.n	80080f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <prvAddNewTaskToReadyList+0xd0>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20000c04 	.word	0x20000c04
 8008100:	20000b04 	.word	0x20000b04
 8008104:	20000c10 	.word	0x20000c10
 8008108:	20000c20 	.word	0x20000c20
 800810c:	20000c0c 	.word	0x20000c0c
 8008110:	20000b08 	.word	0x20000b08
 8008114:	e000ed04 	.word	0xe000ed04

08008118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d018      	beq.n	800815c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800812a:	4b14      	ldr	r3, [pc, #80]	@ (800817c <vTaskDelay+0x64>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00b      	beq.n	800814a <vTaskDelay+0x32>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	60bb      	str	r3, [r7, #8]
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop
 8008148:	e7fd      	b.n	8008146 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800814a:	f000 f885 	bl	8008258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800814e:	2100      	movs	r1, #0
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fb27 	bl	80087a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008156:	f000 f88d 	bl	8008274 <xTaskResumeAll>
 800815a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d107      	bne.n	8008172 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008162:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <vTaskDelay+0x68>)
 8008164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008172:	bf00      	nop
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20000c2c 	.word	0x20000c2c
 8008180:	e000ed04 	.word	0xe000ed04

08008184 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08a      	sub	sp, #40	@ 0x28
 8008188:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800818e:	2300      	movs	r3, #0
 8008190:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008192:	463a      	mov	r2, r7
 8008194:	1d39      	adds	r1, r7, #4
 8008196:	f107 0308 	add.w	r3, r7, #8
 800819a:	4618      	mov	r0, r3
 800819c:	f7f8 fa0e 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	9202      	str	r2, [sp, #8]
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	2300      	movs	r3, #0
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	2300      	movs	r3, #0
 80081b0:	460a      	mov	r2, r1
 80081b2:	4921      	ldr	r1, [pc, #132]	@ (8008238 <vTaskStartScheduler+0xb4>)
 80081b4:	4821      	ldr	r0, [pc, #132]	@ (800823c <vTaskStartScheduler+0xb8>)
 80081b6:	f7ff fe00 	bl	8007dba <xTaskCreateStatic>
 80081ba:	4603      	mov	r3, r0
 80081bc:	4a20      	ldr	r2, [pc, #128]	@ (8008240 <vTaskStartScheduler+0xbc>)
 80081be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008240 <vTaskStartScheduler+0xbc>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081c8:	2301      	movs	r3, #1
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	e001      	b.n	80081d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d11b      	bne.n	8008210 <vTaskStartScheduler+0x8c>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	613b      	str	r3, [r7, #16]
}
 80081ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081ec:	4b15      	ldr	r3, [pc, #84]	@ (8008244 <vTaskStartScheduler+0xc0>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	334c      	adds	r3, #76	@ 0x4c
 80081f2:	4a15      	ldr	r2, [pc, #84]	@ (8008248 <vTaskStartScheduler+0xc4>)
 80081f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081f6:	4b15      	ldr	r3, [pc, #84]	@ (800824c <vTaskStartScheduler+0xc8>)
 80081f8:	f04f 32ff 	mov.w	r2, #4294967295
 80081fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081fe:	4b14      	ldr	r3, [pc, #80]	@ (8008250 <vTaskStartScheduler+0xcc>)
 8008200:	2201      	movs	r2, #1
 8008202:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008204:	4b13      	ldr	r3, [pc, #76]	@ (8008254 <vTaskStartScheduler+0xd0>)
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800820a:	f000 fbc1 	bl	8008990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800820e:	e00f      	b.n	8008230 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008216:	d10b      	bne.n	8008230 <vTaskStartScheduler+0xac>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	60fb      	str	r3, [r7, #12]
}
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	e7fd      	b.n	800822c <vTaskStartScheduler+0xa8>
}
 8008230:	bf00      	nop
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	08009ad0 	.word	0x08009ad0
 800823c:	080085ed 	.word	0x080085ed
 8008240:	20000c28 	.word	0x20000c28
 8008244:	20000b04 	.word	0x20000b04
 8008248:	20000020 	.word	0x20000020
 800824c:	20000c24 	.word	0x20000c24
 8008250:	20000c10 	.word	0x20000c10
 8008254:	20000c08 	.word	0x20000c08

08008258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008258:	b480      	push	{r7}
 800825a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800825c:	4b04      	ldr	r3, [pc, #16]	@ (8008270 <vTaskSuspendAll+0x18>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3301      	adds	r3, #1
 8008262:	4a03      	ldr	r2, [pc, #12]	@ (8008270 <vTaskSuspendAll+0x18>)
 8008264:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008266:	bf00      	nop
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	20000c2c 	.word	0x20000c2c

08008274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008282:	4b42      	ldr	r3, [pc, #264]	@ (800838c <xTaskResumeAll+0x118>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10b      	bne.n	80082a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	603b      	str	r3, [r7, #0]
}
 800829c:	bf00      	nop
 800829e:	bf00      	nop
 80082a0:	e7fd      	b.n	800829e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082a2:	f000 fc19 	bl	8008ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082a6:	4b39      	ldr	r3, [pc, #228]	@ (800838c <xTaskResumeAll+0x118>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	4a37      	ldr	r2, [pc, #220]	@ (800838c <xTaskResumeAll+0x118>)
 80082ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082b0:	4b36      	ldr	r3, [pc, #216]	@ (800838c <xTaskResumeAll+0x118>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d161      	bne.n	800837c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082b8:	4b35      	ldr	r3, [pc, #212]	@ (8008390 <xTaskResumeAll+0x11c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d05d      	beq.n	800837c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082c0:	e02e      	b.n	8008320 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082c2:	4b34      	ldr	r3, [pc, #208]	@ (8008394 <xTaskResumeAll+0x120>)
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3318      	adds	r3, #24
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fd49 	bl	8007d66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3304      	adds	r3, #4
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff fd44 	bl	8007d66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	2201      	movs	r2, #1
 80082e4:	409a      	lsls	r2, r3
 80082e6:	4b2c      	ldr	r3, [pc, #176]	@ (8008398 <xTaskResumeAll+0x124>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008398 <xTaskResumeAll+0x124>)
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4a27      	ldr	r2, [pc, #156]	@ (800839c <xTaskResumeAll+0x128>)
 80082fe:	441a      	add	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f7ff fcd0 	bl	8007cac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008310:	4b23      	ldr	r3, [pc, #140]	@ (80083a0 <xTaskResumeAll+0x12c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800831a:	4b22      	ldr	r3, [pc, #136]	@ (80083a4 <xTaskResumeAll+0x130>)
 800831c:	2201      	movs	r2, #1
 800831e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008320:	4b1c      	ldr	r3, [pc, #112]	@ (8008394 <xTaskResumeAll+0x120>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1cc      	bne.n	80082c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800832e:	f000 fa19 	bl	8008764 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008332:	4b1d      	ldr	r3, [pc, #116]	@ (80083a8 <xTaskResumeAll+0x134>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d010      	beq.n	8008360 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800833e:	f000 f837 	bl	80083b0 <xTaskIncrementTick>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008348:	4b16      	ldr	r3, [pc, #88]	@ (80083a4 <xTaskResumeAll+0x130>)
 800834a:	2201      	movs	r2, #1
 800834c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3b01      	subs	r3, #1
 8008352:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1f1      	bne.n	800833e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800835a:	4b13      	ldr	r3, [pc, #76]	@ (80083a8 <xTaskResumeAll+0x134>)
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008360:	4b10      	ldr	r3, [pc, #64]	@ (80083a4 <xTaskResumeAll+0x130>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008368:	2301      	movs	r3, #1
 800836a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800836c:	4b0f      	ldr	r3, [pc, #60]	@ (80083ac <xTaskResumeAll+0x138>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800837c:	f000 fbde 	bl	8008b3c <vPortExitCritical>

	return xAlreadyYielded;
 8008380:	68bb      	ldr	r3, [r7, #8]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20000c2c 	.word	0x20000c2c
 8008390:	20000c04 	.word	0x20000c04
 8008394:	20000bc4 	.word	0x20000bc4
 8008398:	20000c0c 	.word	0x20000c0c
 800839c:	20000b08 	.word	0x20000b08
 80083a0:	20000b04 	.word	0x20000b04
 80083a4:	20000c18 	.word	0x20000c18
 80083a8:	20000c14 	.word	0x20000c14
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ba:	4b4f      	ldr	r3, [pc, #316]	@ (80084f8 <xTaskIncrementTick+0x148>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f040 808f 	bne.w	80084e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083c4:	4b4d      	ldr	r3, [pc, #308]	@ (80084fc <xTaskIncrementTick+0x14c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3301      	adds	r3, #1
 80083ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083cc:	4a4b      	ldr	r2, [pc, #300]	@ (80084fc <xTaskIncrementTick+0x14c>)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d121      	bne.n	800841c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80083d8:	4b49      	ldr	r3, [pc, #292]	@ (8008500 <xTaskIncrementTick+0x150>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	603b      	str	r3, [r7, #0]
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop
 80083f8:	e7fd      	b.n	80083f6 <xTaskIncrementTick+0x46>
 80083fa:	4b41      	ldr	r3, [pc, #260]	@ (8008500 <xTaskIncrementTick+0x150>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	4b40      	ldr	r3, [pc, #256]	@ (8008504 <xTaskIncrementTick+0x154>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a3e      	ldr	r2, [pc, #248]	@ (8008500 <xTaskIncrementTick+0x150>)
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	4a3e      	ldr	r2, [pc, #248]	@ (8008504 <xTaskIncrementTick+0x154>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	4b3e      	ldr	r3, [pc, #248]	@ (8008508 <xTaskIncrementTick+0x158>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3301      	adds	r3, #1
 8008414:	4a3c      	ldr	r2, [pc, #240]	@ (8008508 <xTaskIncrementTick+0x158>)
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	f000 f9a4 	bl	8008764 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800841c:	4b3b      	ldr	r3, [pc, #236]	@ (800850c <xTaskIncrementTick+0x15c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	429a      	cmp	r2, r3
 8008424:	d348      	bcc.n	80084b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008426:	4b36      	ldr	r3, [pc, #216]	@ (8008500 <xTaskIncrementTick+0x150>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008430:	4b36      	ldr	r3, [pc, #216]	@ (800850c <xTaskIncrementTick+0x15c>)
 8008432:	f04f 32ff 	mov.w	r2, #4294967295
 8008436:	601a      	str	r2, [r3, #0]
					break;
 8008438:	e03e      	b.n	80084b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800843a:	4b31      	ldr	r3, [pc, #196]	@ (8008500 <xTaskIncrementTick+0x150>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	429a      	cmp	r2, r3
 8008450:	d203      	bcs.n	800845a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008452:	4a2e      	ldr	r2, [pc, #184]	@ (800850c <xTaskIncrementTick+0x15c>)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008458:	e02e      	b.n	80084b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	3304      	adds	r3, #4
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff fc81 	bl	8007d66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008468:	2b00      	cmp	r3, #0
 800846a:	d004      	beq.n	8008476 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	3318      	adds	r3, #24
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff fc78 	bl	8007d66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847a:	2201      	movs	r2, #1
 800847c:	409a      	lsls	r2, r3
 800847e:	4b24      	ldr	r3, [pc, #144]	@ (8008510 <xTaskIncrementTick+0x160>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4313      	orrs	r3, r2
 8008484:	4a22      	ldr	r2, [pc, #136]	@ (8008510 <xTaskIncrementTick+0x160>)
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800848c:	4613      	mov	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4a1f      	ldr	r2, [pc, #124]	@ (8008514 <xTaskIncrementTick+0x164>)
 8008496:	441a      	add	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3304      	adds	r3, #4
 800849c:	4619      	mov	r1, r3
 800849e:	4610      	mov	r0, r2
 80084a0:	f7ff fc04 	bl	8007cac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008518 <xTaskIncrementTick+0x168>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d3b9      	bcc.n	8008426 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084b2:	2301      	movs	r3, #1
 80084b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084b6:	e7b6      	b.n	8008426 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084b8:	4b17      	ldr	r3, [pc, #92]	@ (8008518 <xTaskIncrementTick+0x168>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4915      	ldr	r1, [pc, #84]	@ (8008514 <xTaskIncrementTick+0x164>)
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d901      	bls.n	80084d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80084d0:	2301      	movs	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084d4:	4b11      	ldr	r3, [pc, #68]	@ (800851c <xTaskIncrementTick+0x16c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d007      	beq.n	80084ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80084dc:	2301      	movs	r3, #1
 80084de:	617b      	str	r3, [r7, #20]
 80084e0:	e004      	b.n	80084ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008520 <xTaskIncrementTick+0x170>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3301      	adds	r3, #1
 80084e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008520 <xTaskIncrementTick+0x170>)
 80084ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80084ec:	697b      	ldr	r3, [r7, #20]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000c2c 	.word	0x20000c2c
 80084fc:	20000c08 	.word	0x20000c08
 8008500:	20000bbc 	.word	0x20000bbc
 8008504:	20000bc0 	.word	0x20000bc0
 8008508:	20000c1c 	.word	0x20000c1c
 800850c:	20000c24 	.word	0x20000c24
 8008510:	20000c0c 	.word	0x20000c0c
 8008514:	20000b08 	.word	0x20000b08
 8008518:	20000b04 	.word	0x20000b04
 800851c:	20000c18 	.word	0x20000c18
 8008520:	20000c14 	.word	0x20000c14

08008524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800852a:	4b2a      	ldr	r3, [pc, #168]	@ (80085d4 <vTaskSwitchContext+0xb0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008532:	4b29      	ldr	r3, [pc, #164]	@ (80085d8 <vTaskSwitchContext+0xb4>)
 8008534:	2201      	movs	r2, #1
 8008536:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008538:	e045      	b.n	80085c6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800853a:	4b27      	ldr	r3, [pc, #156]	@ (80085d8 <vTaskSwitchContext+0xb4>)
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008540:	4b26      	ldr	r3, [pc, #152]	@ (80085dc <vTaskSwitchContext+0xb8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	fab3 f383 	clz	r3, r3
 800854c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800854e:	7afb      	ldrb	r3, [r7, #11]
 8008550:	f1c3 031f 	rsb	r3, r3, #31
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	4922      	ldr	r1, [pc, #136]	@ (80085e0 <vTaskSwitchContext+0xbc>)
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <vTaskSwitchContext+0x5e>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	607b      	str	r3, [r7, #4]
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	e7fd      	b.n	800857e <vTaskSwitchContext+0x5a>
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4a14      	ldr	r2, [pc, #80]	@ (80085e0 <vTaskSwitchContext+0xbc>)
 800858e:	4413      	add	r3, r2
 8008590:	613b      	str	r3, [r7, #16]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	3308      	adds	r3, #8
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d104      	bne.n	80085b2 <vTaskSwitchContext+0x8e>
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	605a      	str	r2, [r3, #4]
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	4a0a      	ldr	r2, [pc, #40]	@ (80085e4 <vTaskSwitchContext+0xc0>)
 80085ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085bc:	4b09      	ldr	r3, [pc, #36]	@ (80085e4 <vTaskSwitchContext+0xc0>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	334c      	adds	r3, #76	@ 0x4c
 80085c2:	4a09      	ldr	r2, [pc, #36]	@ (80085e8 <vTaskSwitchContext+0xc4>)
 80085c4:	6013      	str	r3, [r2, #0]
}
 80085c6:	bf00      	nop
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000c2c 	.word	0x20000c2c
 80085d8:	20000c18 	.word	0x20000c18
 80085dc:	20000c0c 	.word	0x20000c0c
 80085e0:	20000b08 	.word	0x20000b08
 80085e4:	20000b04 	.word	0x20000b04
 80085e8:	20000020 	.word	0x20000020

080085ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085f4:	f000 f852 	bl	800869c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085f8:	4b06      	ldr	r3, [pc, #24]	@ (8008614 <prvIdleTask+0x28>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d9f9      	bls.n	80085f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008600:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <prvIdleTask+0x2c>)
 8008602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008610:	e7f0      	b.n	80085f4 <prvIdleTask+0x8>
 8008612:	bf00      	nop
 8008614:	20000b08 	.word	0x20000b08
 8008618:	e000ed04 	.word	0xe000ed04

0800861c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008622:	2300      	movs	r3, #0
 8008624:	607b      	str	r3, [r7, #4]
 8008626:	e00c      	b.n	8008642 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4a12      	ldr	r2, [pc, #72]	@ (800867c <prvInitialiseTaskLists+0x60>)
 8008634:	4413      	add	r3, r2
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff fb0b 	bl	8007c52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3301      	adds	r3, #1
 8008640:	607b      	str	r3, [r7, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b06      	cmp	r3, #6
 8008646:	d9ef      	bls.n	8008628 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008648:	480d      	ldr	r0, [pc, #52]	@ (8008680 <prvInitialiseTaskLists+0x64>)
 800864a:	f7ff fb02 	bl	8007c52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800864e:	480d      	ldr	r0, [pc, #52]	@ (8008684 <prvInitialiseTaskLists+0x68>)
 8008650:	f7ff faff 	bl	8007c52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008654:	480c      	ldr	r0, [pc, #48]	@ (8008688 <prvInitialiseTaskLists+0x6c>)
 8008656:	f7ff fafc 	bl	8007c52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800865a:	480c      	ldr	r0, [pc, #48]	@ (800868c <prvInitialiseTaskLists+0x70>)
 800865c:	f7ff faf9 	bl	8007c52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008660:	480b      	ldr	r0, [pc, #44]	@ (8008690 <prvInitialiseTaskLists+0x74>)
 8008662:	f7ff faf6 	bl	8007c52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008666:	4b0b      	ldr	r3, [pc, #44]	@ (8008694 <prvInitialiseTaskLists+0x78>)
 8008668:	4a05      	ldr	r2, [pc, #20]	@ (8008680 <prvInitialiseTaskLists+0x64>)
 800866a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800866c:	4b0a      	ldr	r3, [pc, #40]	@ (8008698 <prvInitialiseTaskLists+0x7c>)
 800866e:	4a05      	ldr	r2, [pc, #20]	@ (8008684 <prvInitialiseTaskLists+0x68>)
 8008670:	601a      	str	r2, [r3, #0]
}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000b08 	.word	0x20000b08
 8008680:	20000b94 	.word	0x20000b94
 8008684:	20000ba8 	.word	0x20000ba8
 8008688:	20000bc4 	.word	0x20000bc4
 800868c:	20000bd8 	.word	0x20000bd8
 8008690:	20000bf0 	.word	0x20000bf0
 8008694:	20000bbc 	.word	0x20000bbc
 8008698:	20000bc0 	.word	0x20000bc0

0800869c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086a2:	e019      	b.n	80086d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086a4:	f000 fa18 	bl	8008ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086a8:	4b10      	ldr	r3, [pc, #64]	@ (80086ec <prvCheckTasksWaitingTermination+0x50>)
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fb56 	bl	8007d66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086ba:	4b0d      	ldr	r3, [pc, #52]	@ (80086f0 <prvCheckTasksWaitingTermination+0x54>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3b01      	subs	r3, #1
 80086c0:	4a0b      	ldr	r2, [pc, #44]	@ (80086f0 <prvCheckTasksWaitingTermination+0x54>)
 80086c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086c4:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <prvCheckTasksWaitingTermination+0x58>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	4a0a      	ldr	r2, [pc, #40]	@ (80086f4 <prvCheckTasksWaitingTermination+0x58>)
 80086cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086ce:	f000 fa35 	bl	8008b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f810 	bl	80086f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086d8:	4b06      	ldr	r3, [pc, #24]	@ (80086f4 <prvCheckTasksWaitingTermination+0x58>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e1      	bne.n	80086a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20000bd8 	.word	0x20000bd8
 80086f0:	20000c04 	.word	0x20000c04
 80086f4:	20000bec 	.word	0x20000bec

080086f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	334c      	adds	r3, #76	@ 0x4c
 8008704:	4618      	mov	r0, r3
 8008706:	f000 fcdf 	bl	80090c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008710:	2b00      	cmp	r3, #0
 8008712:	d108      	bne.n	8008726 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fb8b 	bl	8008e34 <vPortFree>
				vPortFree( pxTCB );
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fb88 	bl	8008e34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008724:	e019      	b.n	800875a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800872c:	2b01      	cmp	r3, #1
 800872e:	d103      	bne.n	8008738 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fb7f 	bl	8008e34 <vPortFree>
	}
 8008736:	e010      	b.n	800875a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800873e:	2b02      	cmp	r3, #2
 8008740:	d00b      	beq.n	800875a <prvDeleteTCB+0x62>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60fb      	str	r3, [r7, #12]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <prvDeleteTCB+0x5e>
	}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800876a:	4b0c      	ldr	r3, [pc, #48]	@ (800879c <prvResetNextTaskUnblockTime+0x38>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d104      	bne.n	800877e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008774:	4b0a      	ldr	r3, [pc, #40]	@ (80087a0 <prvResetNextTaskUnblockTime+0x3c>)
 8008776:	f04f 32ff 	mov.w	r2, #4294967295
 800877a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800877c:	e008      	b.n	8008790 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800877e:	4b07      	ldr	r3, [pc, #28]	@ (800879c <prvResetNextTaskUnblockTime+0x38>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	4a04      	ldr	r2, [pc, #16]	@ (80087a0 <prvResetNextTaskUnblockTime+0x3c>)
 800878e:	6013      	str	r3, [r2, #0]
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	20000bbc 	.word	0x20000bbc
 80087a0:	20000c24 	.word	0x20000c24

080087a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087ae:	4b29      	ldr	r3, [pc, #164]	@ (8008854 <prvAddCurrentTaskToDelayedList+0xb0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087b4:	4b28      	ldr	r3, [pc, #160]	@ (8008858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff fad3 	bl	8007d66 <uxListRemove>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80087c6:	4b24      	ldr	r3, [pc, #144]	@ (8008858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087cc:	2201      	movs	r2, #1
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	43da      	mvns	r2, r3
 80087d4:	4b21      	ldr	r3, [pc, #132]	@ (800885c <prvAddCurrentTaskToDelayedList+0xb8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4013      	ands	r3, r2
 80087da:	4a20      	ldr	r2, [pc, #128]	@ (800885c <prvAddCurrentTaskToDelayedList+0xb8>)
 80087dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e4:	d10a      	bne.n	80087fc <prvAddCurrentTaskToDelayedList+0x58>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3304      	adds	r3, #4
 80087f2:	4619      	mov	r1, r3
 80087f4:	481a      	ldr	r0, [pc, #104]	@ (8008860 <prvAddCurrentTaskToDelayedList+0xbc>)
 80087f6:	f7ff fa59 	bl	8007cac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087fa:	e026      	b.n	800884a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008804:	4b14      	ldr	r3, [pc, #80]	@ (8008858 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	429a      	cmp	r2, r3
 8008812:	d209      	bcs.n	8008828 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008814:	4b13      	ldr	r3, [pc, #76]	@ (8008864 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	4b0f      	ldr	r3, [pc, #60]	@ (8008858 <prvAddCurrentTaskToDelayedList+0xb4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3304      	adds	r3, #4
 800881e:	4619      	mov	r1, r3
 8008820:	4610      	mov	r0, r2
 8008822:	f7ff fa67 	bl	8007cf4 <vListInsert>
}
 8008826:	e010      	b.n	800884a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008828:	4b0f      	ldr	r3, [pc, #60]	@ (8008868 <prvAddCurrentTaskToDelayedList+0xc4>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	4b0a      	ldr	r3, [pc, #40]	@ (8008858 <prvAddCurrentTaskToDelayedList+0xb4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3304      	adds	r3, #4
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f7ff fa5d 	bl	8007cf4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800883a:	4b0c      	ldr	r3, [pc, #48]	@ (800886c <prvAddCurrentTaskToDelayedList+0xc8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	429a      	cmp	r2, r3
 8008842:	d202      	bcs.n	800884a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008844:	4a09      	ldr	r2, [pc, #36]	@ (800886c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6013      	str	r3, [r2, #0]
}
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000c08 	.word	0x20000c08
 8008858:	20000b04 	.word	0x20000b04
 800885c:	20000c0c 	.word	0x20000c0c
 8008860:	20000bf0 	.word	0x20000bf0
 8008864:	20000bc0 	.word	0x20000bc0
 8008868:	20000bbc 	.word	0x20000bbc
 800886c:	20000c24 	.word	0x20000c24

08008870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3b04      	subs	r3, #4
 8008880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3b04      	subs	r3, #4
 800888e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f023 0201 	bic.w	r2, r3, #1
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3b04      	subs	r3, #4
 800889e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088a0:	4a0c      	ldr	r2, [pc, #48]	@ (80088d4 <pxPortInitialiseStack+0x64>)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3b14      	subs	r3, #20
 80088aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f06f 0202 	mvn.w	r2, #2
 80088be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3b20      	subs	r3, #32
 80088c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088c6:	68fb      	ldr	r3, [r7, #12]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	080088d9 	.word	0x080088d9

080088d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088e2:	4b13      	ldr	r3, [pc, #76]	@ (8008930 <prvTaskExitError+0x58>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ea:	d00b      	beq.n	8008904 <prvTaskExitError+0x2c>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	60fb      	str	r3, [r7, #12]
}
 80088fe:	bf00      	nop
 8008900:	bf00      	nop
 8008902:	e7fd      	b.n	8008900 <prvTaskExitError+0x28>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	60bb      	str	r3, [r7, #8]
}
 8008916:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008918:	bf00      	nop
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0fc      	beq.n	800891a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008920:	bf00      	nop
 8008922:	bf00      	nop
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	2000001c 	.word	0x2000001c
	...

08008940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008940:	4b07      	ldr	r3, [pc, #28]	@ (8008960 <pxCurrentTCBConst2>)
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	6808      	ldr	r0, [r1, #0]
 8008946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	f380 8809 	msr	PSP, r0
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f04f 0000 	mov.w	r0, #0
 8008956:	f380 8811 	msr	BASEPRI, r0
 800895a:	4770      	bx	lr
 800895c:	f3af 8000 	nop.w

08008960 <pxCurrentTCBConst2>:
 8008960:	20000b04 	.word	0x20000b04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008968:	4808      	ldr	r0, [pc, #32]	@ (800898c <prvPortStartFirstTask+0x24>)
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	6800      	ldr	r0, [r0, #0]
 800896e:	f380 8808 	msr	MSP, r0
 8008972:	f04f 0000 	mov.w	r0, #0
 8008976:	f380 8814 	msr	CONTROL, r0
 800897a:	b662      	cpsie	i
 800897c:	b661      	cpsie	f
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	df00      	svc	0
 8008988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800898a:	bf00      	nop
 800898c:	e000ed08 	.word	0xe000ed08

08008990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008996:	4b47      	ldr	r3, [pc, #284]	@ (8008ab4 <xPortStartScheduler+0x124>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a47      	ldr	r2, [pc, #284]	@ (8008ab8 <xPortStartScheduler+0x128>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d10b      	bne.n	80089b8 <xPortStartScheduler+0x28>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	60fb      	str	r3, [r7, #12]
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089b8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ab4 <xPortStartScheduler+0x124>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a3f      	ldr	r2, [pc, #252]	@ (8008abc <xPortStartScheduler+0x12c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d10b      	bne.n	80089da <xPortStartScheduler+0x4a>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	613b      	str	r3, [r7, #16]
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	e7fd      	b.n	80089d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089da:	4b39      	ldr	r3, [pc, #228]	@ (8008ac0 <xPortStartScheduler+0x130>)
 80089dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	22ff      	movs	r2, #255	@ 0xff
 80089ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	4b31      	ldr	r3, [pc, #196]	@ (8008ac4 <xPortStartScheduler+0x134>)
 8008a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a02:	4b31      	ldr	r3, [pc, #196]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a04:	2207      	movs	r2, #7
 8008a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a08:	e009      	b.n	8008a1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	4a2d      	ldr	r2, [pc, #180]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a26:	2b80      	cmp	r3, #128	@ 0x80
 8008a28:	d0ef      	beq.n	8008a0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a2a:	4b27      	ldr	r3, [pc, #156]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f1c3 0307 	rsb	r3, r3, #7
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d00b      	beq.n	8008a4e <xPortStartScheduler+0xbe>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60bb      	str	r3, [r7, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a58:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a60:	4a19      	ldr	r2, [pc, #100]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a6c:	4b17      	ldr	r3, [pc, #92]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a16      	ldr	r2, [pc, #88]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a78:	4b14      	ldr	r3, [pc, #80]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a13      	ldr	r2, [pc, #76]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a84:	f000 f8da 	bl	8008c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a88:	4b11      	ldr	r3, [pc, #68]	@ (8008ad0 <xPortStartScheduler+0x140>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a8e:	f000 f8f9 	bl	8008c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a92:	4b10      	ldr	r3, [pc, #64]	@ (8008ad4 <xPortStartScheduler+0x144>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a0f      	ldr	r2, [pc, #60]	@ (8008ad4 <xPortStartScheduler+0x144>)
 8008a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a9e:	f7ff ff63 	bl	8008968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008aa2:	f7ff fd3f 	bl	8008524 <vTaskSwitchContext>
	prvTaskExitError();
 8008aa6:	f7ff ff17 	bl	80088d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	e000ed00 	.word	0xe000ed00
 8008ab8:	410fc271 	.word	0x410fc271
 8008abc:	410fc270 	.word	0x410fc270
 8008ac0:	e000e400 	.word	0xe000e400
 8008ac4:	20000c30 	.word	0x20000c30
 8008ac8:	20000c34 	.word	0x20000c34
 8008acc:	e000ed20 	.word	0xe000ed20
 8008ad0:	2000001c 	.word	0x2000001c
 8008ad4:	e000ef34 	.word	0xe000ef34

08008ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	607b      	str	r3, [r7, #4]
}
 8008af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008af2:	4b10      	ldr	r3, [pc, #64]	@ (8008b34 <vPortEnterCritical+0x5c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3301      	adds	r3, #1
 8008af8:	4a0e      	ldr	r2, [pc, #56]	@ (8008b34 <vPortEnterCritical+0x5c>)
 8008afa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008afc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <vPortEnterCritical+0x5c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d110      	bne.n	8008b26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b04:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <vPortEnterCritical+0x60>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <vPortEnterCritical+0x4e>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	603b      	str	r3, [r7, #0]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <vPortEnterCritical+0x4a>
	}
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	2000001c 	.word	0x2000001c
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b42:	4b12      	ldr	r3, [pc, #72]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10b      	bne.n	8008b62 <vPortExitCritical+0x26>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	607b      	str	r3, [r7, #4]
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	e7fd      	b.n	8008b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b62:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	4a08      	ldr	r2, [pc, #32]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b6c:	4b07      	ldr	r3, [pc, #28]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <vPortExitCritical+0x44>
 8008b74:	2300      	movs	r3, #0
 8008b76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	2000001c 	.word	0x2000001c

08008b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b90:	f3ef 8009 	mrs	r0, PSP
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	4b15      	ldr	r3, [pc, #84]	@ (8008bf0 <pxCurrentTCBConst>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	f01e 0f10 	tst.w	lr, #16
 8008ba0:	bf08      	it	eq
 8008ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	6010      	str	r0, [r2, #0]
 8008bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008bb4:	f380 8811 	msr	BASEPRI, r0
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f7ff fcb0 	bl	8008524 <vTaskSwitchContext>
 8008bc4:	f04f 0000 	mov.w	r0, #0
 8008bc8:	f380 8811 	msr	BASEPRI, r0
 8008bcc:	bc09      	pop	{r0, r3}
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	6808      	ldr	r0, [r1, #0]
 8008bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd6:	f01e 0f10 	tst.w	lr, #16
 8008bda:	bf08      	it	eq
 8008bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008be0:	f380 8809 	msr	PSP, r0
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst>:
 8008bf0:	20000b04 	.word	0x20000b04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c12:	f7ff fbcd 	bl	80083b0 <xTaskIncrementTick>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <SysTick_Handler+0x40>)
 8008c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	f383 8811 	msr	BASEPRI, r3
}
 8008c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	e000ed04 	.word	0xe000ed04

08008c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c40:	4b0b      	ldr	r3, [pc, #44]	@ (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c46:	4b0b      	ldr	r3, [pc, #44]	@ (8008c74 <vPortSetupTimerInterrupt+0x38>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c78 <vPortSetupTimerInterrupt+0x3c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a0a      	ldr	r2, [pc, #40]	@ (8008c7c <vPortSetupTimerInterrupt+0x40>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	099b      	lsrs	r3, r3, #6
 8008c58:	4a09      	ldr	r2, [pc, #36]	@ (8008c80 <vPortSetupTimerInterrupt+0x44>)
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c5e:	4b04      	ldr	r3, [pc, #16]	@ (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c60:	2207      	movs	r2, #7
 8008c62:	601a      	str	r2, [r3, #0]
}
 8008c64:	bf00      	nop
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	e000e010 	.word	0xe000e010
 8008c74:	e000e018 	.word	0xe000e018
 8008c78:	20000010 	.word	0x20000010
 8008c7c:	10624dd3 	.word	0x10624dd3
 8008c80:	e000e014 	.word	0xe000e014

08008c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c94 <vPortEnableVFP+0x10>
 8008c88:	6801      	ldr	r1, [r0, #0]
 8008c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c8e:	6001      	str	r1, [r0, #0]
 8008c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c92:	bf00      	nop
 8008c94:	e000ed88 	.word	0xe000ed88

08008c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08a      	sub	sp, #40	@ 0x28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ca4:	f7ff fad8 	bl	8008258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8008e1c <pvPortMalloc+0x184>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cb0:	f000 f924 	bl	8008efc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8008e20 <pvPortMalloc+0x188>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f040 8095 	bne.w	8008dec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01e      	beq.n	8008d06 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008cc8:	2208      	movs	r2, #8
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4413      	add	r3, r2
 8008cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d015      	beq.n	8008d06 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f023 0307 	bic.w	r3, r3, #7
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <pvPortMalloc+0x6e>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	617b      	str	r3, [r7, #20]
}
 8008d00:	bf00      	nop
 8008d02:	bf00      	nop
 8008d04:	e7fd      	b.n	8008d02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d06f      	beq.n	8008dec <pvPortMalloc+0x154>
 8008d0c:	4b45      	ldr	r3, [pc, #276]	@ (8008e24 <pvPortMalloc+0x18c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d86a      	bhi.n	8008dec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d16:	4b44      	ldr	r3, [pc, #272]	@ (8008e28 <pvPortMalloc+0x190>)
 8008d18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d1a:	4b43      	ldr	r3, [pc, #268]	@ (8008e28 <pvPortMalloc+0x190>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d20:	e004      	b.n	8008d2c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d903      	bls.n	8008d3e <pvPortMalloc+0xa6>
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1f1      	bne.n	8008d22 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d3e:	4b37      	ldr	r3, [pc, #220]	@ (8008e1c <pvPortMalloc+0x184>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d051      	beq.n	8008dec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2208      	movs	r2, #8
 8008d4e:	4413      	add	r3, r2
 8008d50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	1ad2      	subs	r2, r2, r3
 8008d62:	2308      	movs	r3, #8
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d920      	bls.n	8008dac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4413      	add	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	f003 0307 	and.w	r3, r3, #7
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00b      	beq.n	8008d94 <pvPortMalloc+0xfc>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	613b      	str	r3, [r7, #16]
}
 8008d8e:	bf00      	nop
 8008d90:	bf00      	nop
 8008d92:	e7fd      	b.n	8008d90 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	1ad2      	subs	r2, r2, r3
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008da6:	69b8      	ldr	r0, [r7, #24]
 8008da8:	f000 f90a 	bl	8008fc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dac:	4b1d      	ldr	r3, [pc, #116]	@ (8008e24 <pvPortMalloc+0x18c>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	4a1b      	ldr	r2, [pc, #108]	@ (8008e24 <pvPortMalloc+0x18c>)
 8008db8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dba:	4b1a      	ldr	r3, [pc, #104]	@ (8008e24 <pvPortMalloc+0x18c>)
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8008e2c <pvPortMalloc+0x194>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d203      	bcs.n	8008dce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dc6:	4b17      	ldr	r3, [pc, #92]	@ (8008e24 <pvPortMalloc+0x18c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a18      	ldr	r2, [pc, #96]	@ (8008e2c <pvPortMalloc+0x194>)
 8008dcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	4b13      	ldr	r3, [pc, #76]	@ (8008e20 <pvPortMalloc+0x188>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008de2:	4b13      	ldr	r3, [pc, #76]	@ (8008e30 <pvPortMalloc+0x198>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3301      	adds	r3, #1
 8008de8:	4a11      	ldr	r2, [pc, #68]	@ (8008e30 <pvPortMalloc+0x198>)
 8008dea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dec:	f7ff fa42 	bl	8008274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00b      	beq.n	8008e12 <pvPortMalloc+0x17a>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	60fb      	str	r3, [r7, #12]
}
 8008e0c:	bf00      	nop
 8008e0e:	bf00      	nop
 8008e10:	e7fd      	b.n	8008e0e <pvPortMalloc+0x176>
	return pvReturn;
 8008e12:	69fb      	ldr	r3, [r7, #28]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3728      	adds	r7, #40	@ 0x28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	200017f8 	.word	0x200017f8
 8008e20:	2000180c 	.word	0x2000180c
 8008e24:	200017fc 	.word	0x200017fc
 8008e28:	200017f0 	.word	0x200017f0
 8008e2c:	20001800 	.word	0x20001800
 8008e30:	20001804 	.word	0x20001804

08008e34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d04f      	beq.n	8008ee6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e46:	2308      	movs	r3, #8
 8008e48:	425b      	negs	r3, r3
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	4b25      	ldr	r3, [pc, #148]	@ (8008ef0 <vPortFree+0xbc>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10b      	bne.n	8008e7a <vPortFree+0x46>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	60fb      	str	r3, [r7, #12]
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	e7fd      	b.n	8008e76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <vPortFree+0x66>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60bb      	str	r3, [r7, #8]
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
 8008e98:	e7fd      	b.n	8008e96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	4b14      	ldr	r3, [pc, #80]	@ (8008ef0 <vPortFree+0xbc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d01e      	beq.n	8008ee6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d11a      	bne.n	8008ee6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef0 <vPortFree+0xbc>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	401a      	ands	r2, r3
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ec0:	f7ff f9ca 	bl	8008258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <vPortFree+0xc0>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4413      	add	r3, r2
 8008ece:	4a09      	ldr	r2, [pc, #36]	@ (8008ef4 <vPortFree+0xc0>)
 8008ed0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ed2:	6938      	ldr	r0, [r7, #16]
 8008ed4:	f000 f874 	bl	8008fc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ed8:	4b07      	ldr	r3, [pc, #28]	@ (8008ef8 <vPortFree+0xc4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3301      	adds	r3, #1
 8008ede:	4a06      	ldr	r2, [pc, #24]	@ (8008ef8 <vPortFree+0xc4>)
 8008ee0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ee2:	f7ff f9c7 	bl	8008274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	2000180c 	.word	0x2000180c
 8008ef4:	200017fc 	.word	0x200017fc
 8008ef8:	20001808 	.word	0x20001808

08008efc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f02:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008f06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f08:	4b27      	ldr	r3, [pc, #156]	@ (8008fa8 <prvHeapInit+0xac>)
 8008f0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f003 0307 	and.w	r3, r3, #7
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00c      	beq.n	8008f30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3307      	adds	r3, #7
 8008f1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0307 	bic.w	r3, r3, #7
 8008f22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa8 <prvHeapInit+0xac>)
 8008f2c:	4413      	add	r3, r2
 8008f2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f34:	4a1d      	ldr	r2, [pc, #116]	@ (8008fac <prvHeapInit+0xb0>)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8008fac <prvHeapInit+0xb0>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	4413      	add	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f48:	2208      	movs	r2, #8
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	1a9b      	subs	r3, r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 0307 	bic.w	r3, r3, #7
 8008f56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4a15      	ldr	r2, [pc, #84]	@ (8008fb0 <prvHeapInit+0xb4>)
 8008f5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f5e:	4b14      	ldr	r3, [pc, #80]	@ (8008fb0 <prvHeapInit+0xb4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2200      	movs	r2, #0
 8008f64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f66:	4b12      	ldr	r3, [pc, #72]	@ (8008fb0 <prvHeapInit+0xb4>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	1ad2      	subs	r2, r2, r3
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb0 <prvHeapInit+0xb4>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb4 <prvHeapInit+0xb8>)
 8008f8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	4a09      	ldr	r2, [pc, #36]	@ (8008fb8 <prvHeapInit+0xbc>)
 8008f92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f94:	4b09      	ldr	r3, [pc, #36]	@ (8008fbc <prvHeapInit+0xc0>)
 8008f96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f9a:	601a      	str	r2, [r3, #0]
}
 8008f9c:	bf00      	nop
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	20000c38 	.word	0x20000c38
 8008fac:	200017f0 	.word	0x200017f0
 8008fb0:	200017f8 	.word	0x200017f8
 8008fb4:	20001800 	.word	0x20001800
 8008fb8:	200017fc 	.word	0x200017fc
 8008fbc:	2000180c 	.word	0x2000180c

08008fc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fc8:	4b28      	ldr	r3, [pc, #160]	@ (800906c <prvInsertBlockIntoFreeList+0xac>)
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	e002      	b.n	8008fd4 <prvInsertBlockIntoFreeList+0x14>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d8f7      	bhi.n	8008fce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	4413      	add	r3, r2
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d108      	bne.n	8009002 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	441a      	add	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	441a      	add	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d118      	bne.n	8009048 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b15      	ldr	r3, [pc, #84]	@ (8009070 <prvInsertBlockIntoFreeList+0xb0>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	429a      	cmp	r2, r3
 8009020:	d00d      	beq.n	800903e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	441a      	add	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	e008      	b.n	8009050 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800903e:	4b0c      	ldr	r3, [pc, #48]	@ (8009070 <prvInsertBlockIntoFreeList+0xb0>)
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	e003      	b.n	8009050 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	d002      	beq.n	800905e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800905e:	bf00      	nop
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	200017f0 	.word	0x200017f0
 8009070:	200017f8 	.word	0x200017f8

08009074 <siprintf>:
 8009074:	b40e      	push	{r1, r2, r3}
 8009076:	b510      	push	{r4, lr}
 8009078:	b09d      	sub	sp, #116	@ 0x74
 800907a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800907c:	9002      	str	r0, [sp, #8]
 800907e:	9006      	str	r0, [sp, #24]
 8009080:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009084:	480a      	ldr	r0, [pc, #40]	@ (80090b0 <siprintf+0x3c>)
 8009086:	9107      	str	r1, [sp, #28]
 8009088:	9104      	str	r1, [sp, #16]
 800908a:	490a      	ldr	r1, [pc, #40]	@ (80090b4 <siprintf+0x40>)
 800908c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009090:	9105      	str	r1, [sp, #20]
 8009092:	2400      	movs	r4, #0
 8009094:	a902      	add	r1, sp, #8
 8009096:	6800      	ldr	r0, [r0, #0]
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800909c:	f000 fa00 	bl	80094a0 <_svfiprintf_r>
 80090a0:	9b02      	ldr	r3, [sp, #8]
 80090a2:	701c      	strb	r4, [r3, #0]
 80090a4:	b01d      	add	sp, #116	@ 0x74
 80090a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090aa:	b003      	add	sp, #12
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	20000020 	.word	0x20000020
 80090b4:	ffff0208 	.word	0xffff0208

080090b8 <memset>:
 80090b8:	4402      	add	r2, r0
 80090ba:	4603      	mov	r3, r0
 80090bc:	4293      	cmp	r3, r2
 80090be:	d100      	bne.n	80090c2 <memset+0xa>
 80090c0:	4770      	bx	lr
 80090c2:	f803 1b01 	strb.w	r1, [r3], #1
 80090c6:	e7f9      	b.n	80090bc <memset+0x4>

080090c8 <_reclaim_reent>:
 80090c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009180 <_reclaim_reent+0xb8>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4283      	cmp	r3, r0
 80090ce:	b570      	push	{r4, r5, r6, lr}
 80090d0:	4604      	mov	r4, r0
 80090d2:	d053      	beq.n	800917c <_reclaim_reent+0xb4>
 80090d4:	69c3      	ldr	r3, [r0, #28]
 80090d6:	b31b      	cbz	r3, 8009120 <_reclaim_reent+0x58>
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	b163      	cbz	r3, 80090f6 <_reclaim_reent+0x2e>
 80090dc:	2500      	movs	r5, #0
 80090de:	69e3      	ldr	r3, [r4, #28]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	5959      	ldr	r1, [r3, r5]
 80090e4:	b9b1      	cbnz	r1, 8009114 <_reclaim_reent+0x4c>
 80090e6:	3504      	adds	r5, #4
 80090e8:	2d80      	cmp	r5, #128	@ 0x80
 80090ea:	d1f8      	bne.n	80090de <_reclaim_reent+0x16>
 80090ec:	69e3      	ldr	r3, [r4, #28]
 80090ee:	4620      	mov	r0, r4
 80090f0:	68d9      	ldr	r1, [r3, #12]
 80090f2:	f000 f881 	bl	80091f8 <_free_r>
 80090f6:	69e3      	ldr	r3, [r4, #28]
 80090f8:	6819      	ldr	r1, [r3, #0]
 80090fa:	b111      	cbz	r1, 8009102 <_reclaim_reent+0x3a>
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 f87b 	bl	80091f8 <_free_r>
 8009102:	69e3      	ldr	r3, [r4, #28]
 8009104:	689d      	ldr	r5, [r3, #8]
 8009106:	b15d      	cbz	r5, 8009120 <_reclaim_reent+0x58>
 8009108:	4629      	mov	r1, r5
 800910a:	4620      	mov	r0, r4
 800910c:	682d      	ldr	r5, [r5, #0]
 800910e:	f000 f873 	bl	80091f8 <_free_r>
 8009112:	e7f8      	b.n	8009106 <_reclaim_reent+0x3e>
 8009114:	680e      	ldr	r6, [r1, #0]
 8009116:	4620      	mov	r0, r4
 8009118:	f000 f86e 	bl	80091f8 <_free_r>
 800911c:	4631      	mov	r1, r6
 800911e:	e7e1      	b.n	80090e4 <_reclaim_reent+0x1c>
 8009120:	6961      	ldr	r1, [r4, #20]
 8009122:	b111      	cbz	r1, 800912a <_reclaim_reent+0x62>
 8009124:	4620      	mov	r0, r4
 8009126:	f000 f867 	bl	80091f8 <_free_r>
 800912a:	69e1      	ldr	r1, [r4, #28]
 800912c:	b111      	cbz	r1, 8009134 <_reclaim_reent+0x6c>
 800912e:	4620      	mov	r0, r4
 8009130:	f000 f862 	bl	80091f8 <_free_r>
 8009134:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009136:	b111      	cbz	r1, 800913e <_reclaim_reent+0x76>
 8009138:	4620      	mov	r0, r4
 800913a:	f000 f85d 	bl	80091f8 <_free_r>
 800913e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009140:	b111      	cbz	r1, 8009148 <_reclaim_reent+0x80>
 8009142:	4620      	mov	r0, r4
 8009144:	f000 f858 	bl	80091f8 <_free_r>
 8009148:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800914a:	b111      	cbz	r1, 8009152 <_reclaim_reent+0x8a>
 800914c:	4620      	mov	r0, r4
 800914e:	f000 f853 	bl	80091f8 <_free_r>
 8009152:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009154:	b111      	cbz	r1, 800915c <_reclaim_reent+0x94>
 8009156:	4620      	mov	r0, r4
 8009158:	f000 f84e 	bl	80091f8 <_free_r>
 800915c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800915e:	b111      	cbz	r1, 8009166 <_reclaim_reent+0x9e>
 8009160:	4620      	mov	r0, r4
 8009162:	f000 f849 	bl	80091f8 <_free_r>
 8009166:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009168:	b111      	cbz	r1, 8009170 <_reclaim_reent+0xa8>
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f844 	bl	80091f8 <_free_r>
 8009170:	6a23      	ldr	r3, [r4, #32]
 8009172:	b11b      	cbz	r3, 800917c <_reclaim_reent+0xb4>
 8009174:	4620      	mov	r0, r4
 8009176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800917a:	4718      	bx	r3
 800917c:	bd70      	pop	{r4, r5, r6, pc}
 800917e:	bf00      	nop
 8009180:	20000020 	.word	0x20000020

08009184 <__errno>:
 8009184:	4b01      	ldr	r3, [pc, #4]	@ (800918c <__errno+0x8>)
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	20000020 	.word	0x20000020

08009190 <__libc_init_array>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	4d0d      	ldr	r5, [pc, #52]	@ (80091c8 <__libc_init_array+0x38>)
 8009194:	4c0d      	ldr	r4, [pc, #52]	@ (80091cc <__libc_init_array+0x3c>)
 8009196:	1b64      	subs	r4, r4, r5
 8009198:	10a4      	asrs	r4, r4, #2
 800919a:	2600      	movs	r6, #0
 800919c:	42a6      	cmp	r6, r4
 800919e:	d109      	bne.n	80091b4 <__libc_init_array+0x24>
 80091a0:	4d0b      	ldr	r5, [pc, #44]	@ (80091d0 <__libc_init_array+0x40>)
 80091a2:	4c0c      	ldr	r4, [pc, #48]	@ (80091d4 <__libc_init_array+0x44>)
 80091a4:	f000 fc64 	bl	8009a70 <_init>
 80091a8:	1b64      	subs	r4, r4, r5
 80091aa:	10a4      	asrs	r4, r4, #2
 80091ac:	2600      	movs	r6, #0
 80091ae:	42a6      	cmp	r6, r4
 80091b0:	d105      	bne.n	80091be <__libc_init_array+0x2e>
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b8:	4798      	blx	r3
 80091ba:	3601      	adds	r6, #1
 80091bc:	e7ee      	b.n	800919c <__libc_init_array+0xc>
 80091be:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c2:	4798      	blx	r3
 80091c4:	3601      	adds	r6, #1
 80091c6:	e7f2      	b.n	80091ae <__libc_init_array+0x1e>
 80091c8:	08009b5c 	.word	0x08009b5c
 80091cc:	08009b5c 	.word	0x08009b5c
 80091d0:	08009b5c 	.word	0x08009b5c
 80091d4:	08009b60 	.word	0x08009b60

080091d8 <__retarget_lock_acquire_recursive>:
 80091d8:	4770      	bx	lr

080091da <__retarget_lock_release_recursive>:
 80091da:	4770      	bx	lr

080091dc <memcpy>:
 80091dc:	440a      	add	r2, r1
 80091de:	4291      	cmp	r1, r2
 80091e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80091e4:	d100      	bne.n	80091e8 <memcpy+0xc>
 80091e6:	4770      	bx	lr
 80091e8:	b510      	push	{r4, lr}
 80091ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f2:	4291      	cmp	r1, r2
 80091f4:	d1f9      	bne.n	80091ea <memcpy+0xe>
 80091f6:	bd10      	pop	{r4, pc}

080091f8 <_free_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4605      	mov	r5, r0
 80091fc:	2900      	cmp	r1, #0
 80091fe:	d041      	beq.n	8009284 <_free_r+0x8c>
 8009200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009204:	1f0c      	subs	r4, r1, #4
 8009206:	2b00      	cmp	r3, #0
 8009208:	bfb8      	it	lt
 800920a:	18e4      	addlt	r4, r4, r3
 800920c:	f000 f8e0 	bl	80093d0 <__malloc_lock>
 8009210:	4a1d      	ldr	r2, [pc, #116]	@ (8009288 <_free_r+0x90>)
 8009212:	6813      	ldr	r3, [r2, #0]
 8009214:	b933      	cbnz	r3, 8009224 <_free_r+0x2c>
 8009216:	6063      	str	r3, [r4, #4]
 8009218:	6014      	str	r4, [r2, #0]
 800921a:	4628      	mov	r0, r5
 800921c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009220:	f000 b8dc 	b.w	80093dc <__malloc_unlock>
 8009224:	42a3      	cmp	r3, r4
 8009226:	d908      	bls.n	800923a <_free_r+0x42>
 8009228:	6820      	ldr	r0, [r4, #0]
 800922a:	1821      	adds	r1, r4, r0
 800922c:	428b      	cmp	r3, r1
 800922e:	bf01      	itttt	eq
 8009230:	6819      	ldreq	r1, [r3, #0]
 8009232:	685b      	ldreq	r3, [r3, #4]
 8009234:	1809      	addeq	r1, r1, r0
 8009236:	6021      	streq	r1, [r4, #0]
 8009238:	e7ed      	b.n	8009216 <_free_r+0x1e>
 800923a:	461a      	mov	r2, r3
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	b10b      	cbz	r3, 8009244 <_free_r+0x4c>
 8009240:	42a3      	cmp	r3, r4
 8009242:	d9fa      	bls.n	800923a <_free_r+0x42>
 8009244:	6811      	ldr	r1, [r2, #0]
 8009246:	1850      	adds	r0, r2, r1
 8009248:	42a0      	cmp	r0, r4
 800924a:	d10b      	bne.n	8009264 <_free_r+0x6c>
 800924c:	6820      	ldr	r0, [r4, #0]
 800924e:	4401      	add	r1, r0
 8009250:	1850      	adds	r0, r2, r1
 8009252:	4283      	cmp	r3, r0
 8009254:	6011      	str	r1, [r2, #0]
 8009256:	d1e0      	bne.n	800921a <_free_r+0x22>
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	6053      	str	r3, [r2, #4]
 800925e:	4408      	add	r0, r1
 8009260:	6010      	str	r0, [r2, #0]
 8009262:	e7da      	b.n	800921a <_free_r+0x22>
 8009264:	d902      	bls.n	800926c <_free_r+0x74>
 8009266:	230c      	movs	r3, #12
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	e7d6      	b.n	800921a <_free_r+0x22>
 800926c:	6820      	ldr	r0, [r4, #0]
 800926e:	1821      	adds	r1, r4, r0
 8009270:	428b      	cmp	r3, r1
 8009272:	bf04      	itt	eq
 8009274:	6819      	ldreq	r1, [r3, #0]
 8009276:	685b      	ldreq	r3, [r3, #4]
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	bf04      	itt	eq
 800927c:	1809      	addeq	r1, r1, r0
 800927e:	6021      	streq	r1, [r4, #0]
 8009280:	6054      	str	r4, [r2, #4]
 8009282:	e7ca      	b.n	800921a <_free_r+0x22>
 8009284:	bd38      	pop	{r3, r4, r5, pc}
 8009286:	bf00      	nop
 8009288:	20001954 	.word	0x20001954

0800928c <sbrk_aligned>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	4e0f      	ldr	r6, [pc, #60]	@ (80092cc <sbrk_aligned+0x40>)
 8009290:	460c      	mov	r4, r1
 8009292:	6831      	ldr	r1, [r6, #0]
 8009294:	4605      	mov	r5, r0
 8009296:	b911      	cbnz	r1, 800929e <sbrk_aligned+0x12>
 8009298:	f000 fba4 	bl	80099e4 <_sbrk_r>
 800929c:	6030      	str	r0, [r6, #0]
 800929e:	4621      	mov	r1, r4
 80092a0:	4628      	mov	r0, r5
 80092a2:	f000 fb9f 	bl	80099e4 <_sbrk_r>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	d103      	bne.n	80092b2 <sbrk_aligned+0x26>
 80092aa:	f04f 34ff 	mov.w	r4, #4294967295
 80092ae:	4620      	mov	r0, r4
 80092b0:	bd70      	pop	{r4, r5, r6, pc}
 80092b2:	1cc4      	adds	r4, r0, #3
 80092b4:	f024 0403 	bic.w	r4, r4, #3
 80092b8:	42a0      	cmp	r0, r4
 80092ba:	d0f8      	beq.n	80092ae <sbrk_aligned+0x22>
 80092bc:	1a21      	subs	r1, r4, r0
 80092be:	4628      	mov	r0, r5
 80092c0:	f000 fb90 	bl	80099e4 <_sbrk_r>
 80092c4:	3001      	adds	r0, #1
 80092c6:	d1f2      	bne.n	80092ae <sbrk_aligned+0x22>
 80092c8:	e7ef      	b.n	80092aa <sbrk_aligned+0x1e>
 80092ca:	bf00      	nop
 80092cc:	20001950 	.word	0x20001950

080092d0 <_malloc_r>:
 80092d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d4:	1ccd      	adds	r5, r1, #3
 80092d6:	f025 0503 	bic.w	r5, r5, #3
 80092da:	3508      	adds	r5, #8
 80092dc:	2d0c      	cmp	r5, #12
 80092de:	bf38      	it	cc
 80092e0:	250c      	movcc	r5, #12
 80092e2:	2d00      	cmp	r5, #0
 80092e4:	4606      	mov	r6, r0
 80092e6:	db01      	blt.n	80092ec <_malloc_r+0x1c>
 80092e8:	42a9      	cmp	r1, r5
 80092ea:	d904      	bls.n	80092f6 <_malloc_r+0x26>
 80092ec:	230c      	movs	r3, #12
 80092ee:	6033      	str	r3, [r6, #0]
 80092f0:	2000      	movs	r0, #0
 80092f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093cc <_malloc_r+0xfc>
 80092fa:	f000 f869 	bl	80093d0 <__malloc_lock>
 80092fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009302:	461c      	mov	r4, r3
 8009304:	bb44      	cbnz	r4, 8009358 <_malloc_r+0x88>
 8009306:	4629      	mov	r1, r5
 8009308:	4630      	mov	r0, r6
 800930a:	f7ff ffbf 	bl	800928c <sbrk_aligned>
 800930e:	1c43      	adds	r3, r0, #1
 8009310:	4604      	mov	r4, r0
 8009312:	d158      	bne.n	80093c6 <_malloc_r+0xf6>
 8009314:	f8d8 4000 	ldr.w	r4, [r8]
 8009318:	4627      	mov	r7, r4
 800931a:	2f00      	cmp	r7, #0
 800931c:	d143      	bne.n	80093a6 <_malloc_r+0xd6>
 800931e:	2c00      	cmp	r4, #0
 8009320:	d04b      	beq.n	80093ba <_malloc_r+0xea>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	4639      	mov	r1, r7
 8009326:	4630      	mov	r0, r6
 8009328:	eb04 0903 	add.w	r9, r4, r3
 800932c:	f000 fb5a 	bl	80099e4 <_sbrk_r>
 8009330:	4581      	cmp	r9, r0
 8009332:	d142      	bne.n	80093ba <_malloc_r+0xea>
 8009334:	6821      	ldr	r1, [r4, #0]
 8009336:	1a6d      	subs	r5, r5, r1
 8009338:	4629      	mov	r1, r5
 800933a:	4630      	mov	r0, r6
 800933c:	f7ff ffa6 	bl	800928c <sbrk_aligned>
 8009340:	3001      	adds	r0, #1
 8009342:	d03a      	beq.n	80093ba <_malloc_r+0xea>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	442b      	add	r3, r5
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	f8d8 3000 	ldr.w	r3, [r8]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	bb62      	cbnz	r2, 80093ac <_malloc_r+0xdc>
 8009352:	f8c8 7000 	str.w	r7, [r8]
 8009356:	e00f      	b.n	8009378 <_malloc_r+0xa8>
 8009358:	6822      	ldr	r2, [r4, #0]
 800935a:	1b52      	subs	r2, r2, r5
 800935c:	d420      	bmi.n	80093a0 <_malloc_r+0xd0>
 800935e:	2a0b      	cmp	r2, #11
 8009360:	d917      	bls.n	8009392 <_malloc_r+0xc2>
 8009362:	1961      	adds	r1, r4, r5
 8009364:	42a3      	cmp	r3, r4
 8009366:	6025      	str	r5, [r4, #0]
 8009368:	bf18      	it	ne
 800936a:	6059      	strne	r1, [r3, #4]
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	bf08      	it	eq
 8009370:	f8c8 1000 	streq.w	r1, [r8]
 8009374:	5162      	str	r2, [r4, r5]
 8009376:	604b      	str	r3, [r1, #4]
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f82f 	bl	80093dc <__malloc_unlock>
 800937e:	f104 000b 	add.w	r0, r4, #11
 8009382:	1d23      	adds	r3, r4, #4
 8009384:	f020 0007 	bic.w	r0, r0, #7
 8009388:	1ac2      	subs	r2, r0, r3
 800938a:	bf1c      	itt	ne
 800938c:	1a1b      	subne	r3, r3, r0
 800938e:	50a3      	strne	r3, [r4, r2]
 8009390:	e7af      	b.n	80092f2 <_malloc_r+0x22>
 8009392:	6862      	ldr	r2, [r4, #4]
 8009394:	42a3      	cmp	r3, r4
 8009396:	bf0c      	ite	eq
 8009398:	f8c8 2000 	streq.w	r2, [r8]
 800939c:	605a      	strne	r2, [r3, #4]
 800939e:	e7eb      	b.n	8009378 <_malloc_r+0xa8>
 80093a0:	4623      	mov	r3, r4
 80093a2:	6864      	ldr	r4, [r4, #4]
 80093a4:	e7ae      	b.n	8009304 <_malloc_r+0x34>
 80093a6:	463c      	mov	r4, r7
 80093a8:	687f      	ldr	r7, [r7, #4]
 80093aa:	e7b6      	b.n	800931a <_malloc_r+0x4a>
 80093ac:	461a      	mov	r2, r3
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	42a3      	cmp	r3, r4
 80093b2:	d1fb      	bne.n	80093ac <_malloc_r+0xdc>
 80093b4:	2300      	movs	r3, #0
 80093b6:	6053      	str	r3, [r2, #4]
 80093b8:	e7de      	b.n	8009378 <_malloc_r+0xa8>
 80093ba:	230c      	movs	r3, #12
 80093bc:	6033      	str	r3, [r6, #0]
 80093be:	4630      	mov	r0, r6
 80093c0:	f000 f80c 	bl	80093dc <__malloc_unlock>
 80093c4:	e794      	b.n	80092f0 <_malloc_r+0x20>
 80093c6:	6005      	str	r5, [r0, #0]
 80093c8:	e7d6      	b.n	8009378 <_malloc_r+0xa8>
 80093ca:	bf00      	nop
 80093cc:	20001954 	.word	0x20001954

080093d0 <__malloc_lock>:
 80093d0:	4801      	ldr	r0, [pc, #4]	@ (80093d8 <__malloc_lock+0x8>)
 80093d2:	f7ff bf01 	b.w	80091d8 <__retarget_lock_acquire_recursive>
 80093d6:	bf00      	nop
 80093d8:	2000194c 	.word	0x2000194c

080093dc <__malloc_unlock>:
 80093dc:	4801      	ldr	r0, [pc, #4]	@ (80093e4 <__malloc_unlock+0x8>)
 80093de:	f7ff befc 	b.w	80091da <__retarget_lock_release_recursive>
 80093e2:	bf00      	nop
 80093e4:	2000194c 	.word	0x2000194c

080093e8 <__ssputs_r>:
 80093e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ec:	688e      	ldr	r6, [r1, #8]
 80093ee:	461f      	mov	r7, r3
 80093f0:	42be      	cmp	r6, r7
 80093f2:	680b      	ldr	r3, [r1, #0]
 80093f4:	4682      	mov	sl, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	4690      	mov	r8, r2
 80093fa:	d82d      	bhi.n	8009458 <__ssputs_r+0x70>
 80093fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009400:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009404:	d026      	beq.n	8009454 <__ssputs_r+0x6c>
 8009406:	6965      	ldr	r5, [r4, #20]
 8009408:	6909      	ldr	r1, [r1, #16]
 800940a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800940e:	eba3 0901 	sub.w	r9, r3, r1
 8009412:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009416:	1c7b      	adds	r3, r7, #1
 8009418:	444b      	add	r3, r9
 800941a:	106d      	asrs	r5, r5, #1
 800941c:	429d      	cmp	r5, r3
 800941e:	bf38      	it	cc
 8009420:	461d      	movcc	r5, r3
 8009422:	0553      	lsls	r3, r2, #21
 8009424:	d527      	bpl.n	8009476 <__ssputs_r+0x8e>
 8009426:	4629      	mov	r1, r5
 8009428:	f7ff ff52 	bl	80092d0 <_malloc_r>
 800942c:	4606      	mov	r6, r0
 800942e:	b360      	cbz	r0, 800948a <__ssputs_r+0xa2>
 8009430:	6921      	ldr	r1, [r4, #16]
 8009432:	464a      	mov	r2, r9
 8009434:	f7ff fed2 	bl	80091dc <memcpy>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800943e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	6126      	str	r6, [r4, #16]
 8009446:	6165      	str	r5, [r4, #20]
 8009448:	444e      	add	r6, r9
 800944a:	eba5 0509 	sub.w	r5, r5, r9
 800944e:	6026      	str	r6, [r4, #0]
 8009450:	60a5      	str	r5, [r4, #8]
 8009452:	463e      	mov	r6, r7
 8009454:	42be      	cmp	r6, r7
 8009456:	d900      	bls.n	800945a <__ssputs_r+0x72>
 8009458:	463e      	mov	r6, r7
 800945a:	6820      	ldr	r0, [r4, #0]
 800945c:	4632      	mov	r2, r6
 800945e:	4641      	mov	r1, r8
 8009460:	f000 faa6 	bl	80099b0 <memmove>
 8009464:	68a3      	ldr	r3, [r4, #8]
 8009466:	1b9b      	subs	r3, r3, r6
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	4433      	add	r3, r6
 800946e:	6023      	str	r3, [r4, #0]
 8009470:	2000      	movs	r0, #0
 8009472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009476:	462a      	mov	r2, r5
 8009478:	f000 fac4 	bl	8009a04 <_realloc_r>
 800947c:	4606      	mov	r6, r0
 800947e:	2800      	cmp	r0, #0
 8009480:	d1e0      	bne.n	8009444 <__ssputs_r+0x5c>
 8009482:	6921      	ldr	r1, [r4, #16]
 8009484:	4650      	mov	r0, sl
 8009486:	f7ff feb7 	bl	80091f8 <_free_r>
 800948a:	230c      	movs	r3, #12
 800948c:	f8ca 3000 	str.w	r3, [sl]
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	e7e9      	b.n	8009472 <__ssputs_r+0x8a>
	...

080094a0 <_svfiprintf_r>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	4698      	mov	r8, r3
 80094a6:	898b      	ldrh	r3, [r1, #12]
 80094a8:	061b      	lsls	r3, r3, #24
 80094aa:	b09d      	sub	sp, #116	@ 0x74
 80094ac:	4607      	mov	r7, r0
 80094ae:	460d      	mov	r5, r1
 80094b0:	4614      	mov	r4, r2
 80094b2:	d510      	bpl.n	80094d6 <_svfiprintf_r+0x36>
 80094b4:	690b      	ldr	r3, [r1, #16]
 80094b6:	b973      	cbnz	r3, 80094d6 <_svfiprintf_r+0x36>
 80094b8:	2140      	movs	r1, #64	@ 0x40
 80094ba:	f7ff ff09 	bl	80092d0 <_malloc_r>
 80094be:	6028      	str	r0, [r5, #0]
 80094c0:	6128      	str	r0, [r5, #16]
 80094c2:	b930      	cbnz	r0, 80094d2 <_svfiprintf_r+0x32>
 80094c4:	230c      	movs	r3, #12
 80094c6:	603b      	str	r3, [r7, #0]
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295
 80094cc:	b01d      	add	sp, #116	@ 0x74
 80094ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d2:	2340      	movs	r3, #64	@ 0x40
 80094d4:	616b      	str	r3, [r5, #20]
 80094d6:	2300      	movs	r3, #0
 80094d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094da:	2320      	movs	r3, #32
 80094dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80094e4:	2330      	movs	r3, #48	@ 0x30
 80094e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009684 <_svfiprintf_r+0x1e4>
 80094ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094ee:	f04f 0901 	mov.w	r9, #1
 80094f2:	4623      	mov	r3, r4
 80094f4:	469a      	mov	sl, r3
 80094f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094fa:	b10a      	cbz	r2, 8009500 <_svfiprintf_r+0x60>
 80094fc:	2a25      	cmp	r2, #37	@ 0x25
 80094fe:	d1f9      	bne.n	80094f4 <_svfiprintf_r+0x54>
 8009500:	ebba 0b04 	subs.w	fp, sl, r4
 8009504:	d00b      	beq.n	800951e <_svfiprintf_r+0x7e>
 8009506:	465b      	mov	r3, fp
 8009508:	4622      	mov	r2, r4
 800950a:	4629      	mov	r1, r5
 800950c:	4638      	mov	r0, r7
 800950e:	f7ff ff6b 	bl	80093e8 <__ssputs_r>
 8009512:	3001      	adds	r0, #1
 8009514:	f000 80a7 	beq.w	8009666 <_svfiprintf_r+0x1c6>
 8009518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800951a:	445a      	add	r2, fp
 800951c:	9209      	str	r2, [sp, #36]	@ 0x24
 800951e:	f89a 3000 	ldrb.w	r3, [sl]
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 809f 	beq.w	8009666 <_svfiprintf_r+0x1c6>
 8009528:	2300      	movs	r3, #0
 800952a:	f04f 32ff 	mov.w	r2, #4294967295
 800952e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009532:	f10a 0a01 	add.w	sl, sl, #1
 8009536:	9304      	str	r3, [sp, #16]
 8009538:	9307      	str	r3, [sp, #28]
 800953a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800953e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009540:	4654      	mov	r4, sl
 8009542:	2205      	movs	r2, #5
 8009544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009548:	484e      	ldr	r0, [pc, #312]	@ (8009684 <_svfiprintf_r+0x1e4>)
 800954a:	f7f6 fe51 	bl	80001f0 <memchr>
 800954e:	9a04      	ldr	r2, [sp, #16]
 8009550:	b9d8      	cbnz	r0, 800958a <_svfiprintf_r+0xea>
 8009552:	06d0      	lsls	r0, r2, #27
 8009554:	bf44      	itt	mi
 8009556:	2320      	movmi	r3, #32
 8009558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800955c:	0711      	lsls	r1, r2, #28
 800955e:	bf44      	itt	mi
 8009560:	232b      	movmi	r3, #43	@ 0x2b
 8009562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009566:	f89a 3000 	ldrb.w	r3, [sl]
 800956a:	2b2a      	cmp	r3, #42	@ 0x2a
 800956c:	d015      	beq.n	800959a <_svfiprintf_r+0xfa>
 800956e:	9a07      	ldr	r2, [sp, #28]
 8009570:	4654      	mov	r4, sl
 8009572:	2000      	movs	r0, #0
 8009574:	f04f 0c0a 	mov.w	ip, #10
 8009578:	4621      	mov	r1, r4
 800957a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800957e:	3b30      	subs	r3, #48	@ 0x30
 8009580:	2b09      	cmp	r3, #9
 8009582:	d94b      	bls.n	800961c <_svfiprintf_r+0x17c>
 8009584:	b1b0      	cbz	r0, 80095b4 <_svfiprintf_r+0x114>
 8009586:	9207      	str	r2, [sp, #28]
 8009588:	e014      	b.n	80095b4 <_svfiprintf_r+0x114>
 800958a:	eba0 0308 	sub.w	r3, r0, r8
 800958e:	fa09 f303 	lsl.w	r3, r9, r3
 8009592:	4313      	orrs	r3, r2
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	46a2      	mov	sl, r4
 8009598:	e7d2      	b.n	8009540 <_svfiprintf_r+0xa0>
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	1d19      	adds	r1, r3, #4
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	9103      	str	r1, [sp, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bfbb      	ittet	lt
 80095a6:	425b      	neglt	r3, r3
 80095a8:	f042 0202 	orrlt.w	r2, r2, #2
 80095ac:	9307      	strge	r3, [sp, #28]
 80095ae:	9307      	strlt	r3, [sp, #28]
 80095b0:	bfb8      	it	lt
 80095b2:	9204      	strlt	r2, [sp, #16]
 80095b4:	7823      	ldrb	r3, [r4, #0]
 80095b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80095b8:	d10a      	bne.n	80095d0 <_svfiprintf_r+0x130>
 80095ba:	7863      	ldrb	r3, [r4, #1]
 80095bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80095be:	d132      	bne.n	8009626 <_svfiprintf_r+0x186>
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	1d1a      	adds	r2, r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	9203      	str	r2, [sp, #12]
 80095c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095cc:	3402      	adds	r4, #2
 80095ce:	9305      	str	r3, [sp, #20]
 80095d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009694 <_svfiprintf_r+0x1f4>
 80095d4:	7821      	ldrb	r1, [r4, #0]
 80095d6:	2203      	movs	r2, #3
 80095d8:	4650      	mov	r0, sl
 80095da:	f7f6 fe09 	bl	80001f0 <memchr>
 80095de:	b138      	cbz	r0, 80095f0 <_svfiprintf_r+0x150>
 80095e0:	9b04      	ldr	r3, [sp, #16]
 80095e2:	eba0 000a 	sub.w	r0, r0, sl
 80095e6:	2240      	movs	r2, #64	@ 0x40
 80095e8:	4082      	lsls	r2, r0
 80095ea:	4313      	orrs	r3, r2
 80095ec:	3401      	adds	r4, #1
 80095ee:	9304      	str	r3, [sp, #16]
 80095f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f4:	4824      	ldr	r0, [pc, #144]	@ (8009688 <_svfiprintf_r+0x1e8>)
 80095f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095fa:	2206      	movs	r2, #6
 80095fc:	f7f6 fdf8 	bl	80001f0 <memchr>
 8009600:	2800      	cmp	r0, #0
 8009602:	d036      	beq.n	8009672 <_svfiprintf_r+0x1d2>
 8009604:	4b21      	ldr	r3, [pc, #132]	@ (800968c <_svfiprintf_r+0x1ec>)
 8009606:	bb1b      	cbnz	r3, 8009650 <_svfiprintf_r+0x1b0>
 8009608:	9b03      	ldr	r3, [sp, #12]
 800960a:	3307      	adds	r3, #7
 800960c:	f023 0307 	bic.w	r3, r3, #7
 8009610:	3308      	adds	r3, #8
 8009612:	9303      	str	r3, [sp, #12]
 8009614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009616:	4433      	add	r3, r6
 8009618:	9309      	str	r3, [sp, #36]	@ 0x24
 800961a:	e76a      	b.n	80094f2 <_svfiprintf_r+0x52>
 800961c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009620:	460c      	mov	r4, r1
 8009622:	2001      	movs	r0, #1
 8009624:	e7a8      	b.n	8009578 <_svfiprintf_r+0xd8>
 8009626:	2300      	movs	r3, #0
 8009628:	3401      	adds	r4, #1
 800962a:	9305      	str	r3, [sp, #20]
 800962c:	4619      	mov	r1, r3
 800962e:	f04f 0c0a 	mov.w	ip, #10
 8009632:	4620      	mov	r0, r4
 8009634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009638:	3a30      	subs	r2, #48	@ 0x30
 800963a:	2a09      	cmp	r2, #9
 800963c:	d903      	bls.n	8009646 <_svfiprintf_r+0x1a6>
 800963e:	2b00      	cmp	r3, #0
 8009640:	d0c6      	beq.n	80095d0 <_svfiprintf_r+0x130>
 8009642:	9105      	str	r1, [sp, #20]
 8009644:	e7c4      	b.n	80095d0 <_svfiprintf_r+0x130>
 8009646:	fb0c 2101 	mla	r1, ip, r1, r2
 800964a:	4604      	mov	r4, r0
 800964c:	2301      	movs	r3, #1
 800964e:	e7f0      	b.n	8009632 <_svfiprintf_r+0x192>
 8009650:	ab03      	add	r3, sp, #12
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	462a      	mov	r2, r5
 8009656:	4b0e      	ldr	r3, [pc, #56]	@ (8009690 <_svfiprintf_r+0x1f0>)
 8009658:	a904      	add	r1, sp, #16
 800965a:	4638      	mov	r0, r7
 800965c:	f3af 8000 	nop.w
 8009660:	1c42      	adds	r2, r0, #1
 8009662:	4606      	mov	r6, r0
 8009664:	d1d6      	bne.n	8009614 <_svfiprintf_r+0x174>
 8009666:	89ab      	ldrh	r3, [r5, #12]
 8009668:	065b      	lsls	r3, r3, #25
 800966a:	f53f af2d 	bmi.w	80094c8 <_svfiprintf_r+0x28>
 800966e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009670:	e72c      	b.n	80094cc <_svfiprintf_r+0x2c>
 8009672:	ab03      	add	r3, sp, #12
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	462a      	mov	r2, r5
 8009678:	4b05      	ldr	r3, [pc, #20]	@ (8009690 <_svfiprintf_r+0x1f0>)
 800967a:	a904      	add	r1, sp, #16
 800967c:	4638      	mov	r0, r7
 800967e:	f000 f879 	bl	8009774 <_printf_i>
 8009682:	e7ed      	b.n	8009660 <_svfiprintf_r+0x1c0>
 8009684:	08009b20 	.word	0x08009b20
 8009688:	08009b2a 	.word	0x08009b2a
 800968c:	00000000 	.word	0x00000000
 8009690:	080093e9 	.word	0x080093e9
 8009694:	08009b26 	.word	0x08009b26

08009698 <_printf_common>:
 8009698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	4616      	mov	r6, r2
 800969e:	4698      	mov	r8, r3
 80096a0:	688a      	ldr	r2, [r1, #8]
 80096a2:	690b      	ldr	r3, [r1, #16]
 80096a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	bfb8      	it	lt
 80096ac:	4613      	movlt	r3, r2
 80096ae:	6033      	str	r3, [r6, #0]
 80096b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096b4:	4607      	mov	r7, r0
 80096b6:	460c      	mov	r4, r1
 80096b8:	b10a      	cbz	r2, 80096be <_printf_common+0x26>
 80096ba:	3301      	adds	r3, #1
 80096bc:	6033      	str	r3, [r6, #0]
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	0699      	lsls	r1, r3, #26
 80096c2:	bf42      	ittt	mi
 80096c4:	6833      	ldrmi	r3, [r6, #0]
 80096c6:	3302      	addmi	r3, #2
 80096c8:	6033      	strmi	r3, [r6, #0]
 80096ca:	6825      	ldr	r5, [r4, #0]
 80096cc:	f015 0506 	ands.w	r5, r5, #6
 80096d0:	d106      	bne.n	80096e0 <_printf_common+0x48>
 80096d2:	f104 0a19 	add.w	sl, r4, #25
 80096d6:	68e3      	ldr	r3, [r4, #12]
 80096d8:	6832      	ldr	r2, [r6, #0]
 80096da:	1a9b      	subs	r3, r3, r2
 80096dc:	42ab      	cmp	r3, r5
 80096de:	dc26      	bgt.n	800972e <_printf_common+0x96>
 80096e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096e4:	6822      	ldr	r2, [r4, #0]
 80096e6:	3b00      	subs	r3, #0
 80096e8:	bf18      	it	ne
 80096ea:	2301      	movne	r3, #1
 80096ec:	0692      	lsls	r2, r2, #26
 80096ee:	d42b      	bmi.n	8009748 <_printf_common+0xb0>
 80096f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096f4:	4641      	mov	r1, r8
 80096f6:	4638      	mov	r0, r7
 80096f8:	47c8      	blx	r9
 80096fa:	3001      	adds	r0, #1
 80096fc:	d01e      	beq.n	800973c <_printf_common+0xa4>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	6922      	ldr	r2, [r4, #16]
 8009702:	f003 0306 	and.w	r3, r3, #6
 8009706:	2b04      	cmp	r3, #4
 8009708:	bf02      	ittt	eq
 800970a:	68e5      	ldreq	r5, [r4, #12]
 800970c:	6833      	ldreq	r3, [r6, #0]
 800970e:	1aed      	subeq	r5, r5, r3
 8009710:	68a3      	ldr	r3, [r4, #8]
 8009712:	bf0c      	ite	eq
 8009714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009718:	2500      	movne	r5, #0
 800971a:	4293      	cmp	r3, r2
 800971c:	bfc4      	itt	gt
 800971e:	1a9b      	subgt	r3, r3, r2
 8009720:	18ed      	addgt	r5, r5, r3
 8009722:	2600      	movs	r6, #0
 8009724:	341a      	adds	r4, #26
 8009726:	42b5      	cmp	r5, r6
 8009728:	d11a      	bne.n	8009760 <_printf_common+0xc8>
 800972a:	2000      	movs	r0, #0
 800972c:	e008      	b.n	8009740 <_printf_common+0xa8>
 800972e:	2301      	movs	r3, #1
 8009730:	4652      	mov	r2, sl
 8009732:	4641      	mov	r1, r8
 8009734:	4638      	mov	r0, r7
 8009736:	47c8      	blx	r9
 8009738:	3001      	adds	r0, #1
 800973a:	d103      	bne.n	8009744 <_printf_common+0xac>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009744:	3501      	adds	r5, #1
 8009746:	e7c6      	b.n	80096d6 <_printf_common+0x3e>
 8009748:	18e1      	adds	r1, r4, r3
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	2030      	movs	r0, #48	@ 0x30
 800974e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009752:	4422      	add	r2, r4
 8009754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800975c:	3302      	adds	r3, #2
 800975e:	e7c7      	b.n	80096f0 <_printf_common+0x58>
 8009760:	2301      	movs	r3, #1
 8009762:	4622      	mov	r2, r4
 8009764:	4641      	mov	r1, r8
 8009766:	4638      	mov	r0, r7
 8009768:	47c8      	blx	r9
 800976a:	3001      	adds	r0, #1
 800976c:	d0e6      	beq.n	800973c <_printf_common+0xa4>
 800976e:	3601      	adds	r6, #1
 8009770:	e7d9      	b.n	8009726 <_printf_common+0x8e>
	...

08009774 <_printf_i>:
 8009774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009778:	7e0f      	ldrb	r7, [r1, #24]
 800977a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800977c:	2f78      	cmp	r7, #120	@ 0x78
 800977e:	4691      	mov	r9, r2
 8009780:	4680      	mov	r8, r0
 8009782:	460c      	mov	r4, r1
 8009784:	469a      	mov	sl, r3
 8009786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800978a:	d807      	bhi.n	800979c <_printf_i+0x28>
 800978c:	2f62      	cmp	r7, #98	@ 0x62
 800978e:	d80a      	bhi.n	80097a6 <_printf_i+0x32>
 8009790:	2f00      	cmp	r7, #0
 8009792:	f000 80d1 	beq.w	8009938 <_printf_i+0x1c4>
 8009796:	2f58      	cmp	r7, #88	@ 0x58
 8009798:	f000 80b8 	beq.w	800990c <_printf_i+0x198>
 800979c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097a4:	e03a      	b.n	800981c <_printf_i+0xa8>
 80097a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097aa:	2b15      	cmp	r3, #21
 80097ac:	d8f6      	bhi.n	800979c <_printf_i+0x28>
 80097ae:	a101      	add	r1, pc, #4	@ (adr r1, 80097b4 <_printf_i+0x40>)
 80097b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097b4:	0800980d 	.word	0x0800980d
 80097b8:	08009821 	.word	0x08009821
 80097bc:	0800979d 	.word	0x0800979d
 80097c0:	0800979d 	.word	0x0800979d
 80097c4:	0800979d 	.word	0x0800979d
 80097c8:	0800979d 	.word	0x0800979d
 80097cc:	08009821 	.word	0x08009821
 80097d0:	0800979d 	.word	0x0800979d
 80097d4:	0800979d 	.word	0x0800979d
 80097d8:	0800979d 	.word	0x0800979d
 80097dc:	0800979d 	.word	0x0800979d
 80097e0:	0800991f 	.word	0x0800991f
 80097e4:	0800984b 	.word	0x0800984b
 80097e8:	080098d9 	.word	0x080098d9
 80097ec:	0800979d 	.word	0x0800979d
 80097f0:	0800979d 	.word	0x0800979d
 80097f4:	08009941 	.word	0x08009941
 80097f8:	0800979d 	.word	0x0800979d
 80097fc:	0800984b 	.word	0x0800984b
 8009800:	0800979d 	.word	0x0800979d
 8009804:	0800979d 	.word	0x0800979d
 8009808:	080098e1 	.word	0x080098e1
 800980c:	6833      	ldr	r3, [r6, #0]
 800980e:	1d1a      	adds	r2, r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6032      	str	r2, [r6, #0]
 8009814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800981c:	2301      	movs	r3, #1
 800981e:	e09c      	b.n	800995a <_printf_i+0x1e6>
 8009820:	6833      	ldr	r3, [r6, #0]
 8009822:	6820      	ldr	r0, [r4, #0]
 8009824:	1d19      	adds	r1, r3, #4
 8009826:	6031      	str	r1, [r6, #0]
 8009828:	0606      	lsls	r6, r0, #24
 800982a:	d501      	bpl.n	8009830 <_printf_i+0xbc>
 800982c:	681d      	ldr	r5, [r3, #0]
 800982e:	e003      	b.n	8009838 <_printf_i+0xc4>
 8009830:	0645      	lsls	r5, r0, #25
 8009832:	d5fb      	bpl.n	800982c <_printf_i+0xb8>
 8009834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009838:	2d00      	cmp	r5, #0
 800983a:	da03      	bge.n	8009844 <_printf_i+0xd0>
 800983c:	232d      	movs	r3, #45	@ 0x2d
 800983e:	426d      	negs	r5, r5
 8009840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009844:	4858      	ldr	r0, [pc, #352]	@ (80099a8 <_printf_i+0x234>)
 8009846:	230a      	movs	r3, #10
 8009848:	e011      	b.n	800986e <_printf_i+0xfa>
 800984a:	6821      	ldr	r1, [r4, #0]
 800984c:	6833      	ldr	r3, [r6, #0]
 800984e:	0608      	lsls	r0, r1, #24
 8009850:	f853 5b04 	ldr.w	r5, [r3], #4
 8009854:	d402      	bmi.n	800985c <_printf_i+0xe8>
 8009856:	0649      	lsls	r1, r1, #25
 8009858:	bf48      	it	mi
 800985a:	b2ad      	uxthmi	r5, r5
 800985c:	2f6f      	cmp	r7, #111	@ 0x6f
 800985e:	4852      	ldr	r0, [pc, #328]	@ (80099a8 <_printf_i+0x234>)
 8009860:	6033      	str	r3, [r6, #0]
 8009862:	bf14      	ite	ne
 8009864:	230a      	movne	r3, #10
 8009866:	2308      	moveq	r3, #8
 8009868:	2100      	movs	r1, #0
 800986a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800986e:	6866      	ldr	r6, [r4, #4]
 8009870:	60a6      	str	r6, [r4, #8]
 8009872:	2e00      	cmp	r6, #0
 8009874:	db05      	blt.n	8009882 <_printf_i+0x10e>
 8009876:	6821      	ldr	r1, [r4, #0]
 8009878:	432e      	orrs	r6, r5
 800987a:	f021 0104 	bic.w	r1, r1, #4
 800987e:	6021      	str	r1, [r4, #0]
 8009880:	d04b      	beq.n	800991a <_printf_i+0x1a6>
 8009882:	4616      	mov	r6, r2
 8009884:	fbb5 f1f3 	udiv	r1, r5, r3
 8009888:	fb03 5711 	mls	r7, r3, r1, r5
 800988c:	5dc7      	ldrb	r7, [r0, r7]
 800988e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009892:	462f      	mov	r7, r5
 8009894:	42bb      	cmp	r3, r7
 8009896:	460d      	mov	r5, r1
 8009898:	d9f4      	bls.n	8009884 <_printf_i+0x110>
 800989a:	2b08      	cmp	r3, #8
 800989c:	d10b      	bne.n	80098b6 <_printf_i+0x142>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	07df      	lsls	r7, r3, #31
 80098a2:	d508      	bpl.n	80098b6 <_printf_i+0x142>
 80098a4:	6923      	ldr	r3, [r4, #16]
 80098a6:	6861      	ldr	r1, [r4, #4]
 80098a8:	4299      	cmp	r1, r3
 80098aa:	bfde      	ittt	le
 80098ac:	2330      	movle	r3, #48	@ 0x30
 80098ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098b6:	1b92      	subs	r2, r2, r6
 80098b8:	6122      	str	r2, [r4, #16]
 80098ba:	f8cd a000 	str.w	sl, [sp]
 80098be:	464b      	mov	r3, r9
 80098c0:	aa03      	add	r2, sp, #12
 80098c2:	4621      	mov	r1, r4
 80098c4:	4640      	mov	r0, r8
 80098c6:	f7ff fee7 	bl	8009698 <_printf_common>
 80098ca:	3001      	adds	r0, #1
 80098cc:	d14a      	bne.n	8009964 <_printf_i+0x1f0>
 80098ce:	f04f 30ff 	mov.w	r0, #4294967295
 80098d2:	b004      	add	sp, #16
 80098d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	f043 0320 	orr.w	r3, r3, #32
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	4832      	ldr	r0, [pc, #200]	@ (80099ac <_printf_i+0x238>)
 80098e2:	2778      	movs	r7, #120	@ 0x78
 80098e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	6831      	ldr	r1, [r6, #0]
 80098ec:	061f      	lsls	r7, r3, #24
 80098ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80098f2:	d402      	bmi.n	80098fa <_printf_i+0x186>
 80098f4:	065f      	lsls	r7, r3, #25
 80098f6:	bf48      	it	mi
 80098f8:	b2ad      	uxthmi	r5, r5
 80098fa:	6031      	str	r1, [r6, #0]
 80098fc:	07d9      	lsls	r1, r3, #31
 80098fe:	bf44      	itt	mi
 8009900:	f043 0320 	orrmi.w	r3, r3, #32
 8009904:	6023      	strmi	r3, [r4, #0]
 8009906:	b11d      	cbz	r5, 8009910 <_printf_i+0x19c>
 8009908:	2310      	movs	r3, #16
 800990a:	e7ad      	b.n	8009868 <_printf_i+0xf4>
 800990c:	4826      	ldr	r0, [pc, #152]	@ (80099a8 <_printf_i+0x234>)
 800990e:	e7e9      	b.n	80098e4 <_printf_i+0x170>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	f023 0320 	bic.w	r3, r3, #32
 8009916:	6023      	str	r3, [r4, #0]
 8009918:	e7f6      	b.n	8009908 <_printf_i+0x194>
 800991a:	4616      	mov	r6, r2
 800991c:	e7bd      	b.n	800989a <_printf_i+0x126>
 800991e:	6833      	ldr	r3, [r6, #0]
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	6961      	ldr	r1, [r4, #20]
 8009924:	1d18      	adds	r0, r3, #4
 8009926:	6030      	str	r0, [r6, #0]
 8009928:	062e      	lsls	r6, r5, #24
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	d501      	bpl.n	8009932 <_printf_i+0x1be>
 800992e:	6019      	str	r1, [r3, #0]
 8009930:	e002      	b.n	8009938 <_printf_i+0x1c4>
 8009932:	0668      	lsls	r0, r5, #25
 8009934:	d5fb      	bpl.n	800992e <_printf_i+0x1ba>
 8009936:	8019      	strh	r1, [r3, #0]
 8009938:	2300      	movs	r3, #0
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	4616      	mov	r6, r2
 800993e:	e7bc      	b.n	80098ba <_printf_i+0x146>
 8009940:	6833      	ldr	r3, [r6, #0]
 8009942:	1d1a      	adds	r2, r3, #4
 8009944:	6032      	str	r2, [r6, #0]
 8009946:	681e      	ldr	r6, [r3, #0]
 8009948:	6862      	ldr	r2, [r4, #4]
 800994a:	2100      	movs	r1, #0
 800994c:	4630      	mov	r0, r6
 800994e:	f7f6 fc4f 	bl	80001f0 <memchr>
 8009952:	b108      	cbz	r0, 8009958 <_printf_i+0x1e4>
 8009954:	1b80      	subs	r0, r0, r6
 8009956:	6060      	str	r0, [r4, #4]
 8009958:	6863      	ldr	r3, [r4, #4]
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	2300      	movs	r3, #0
 800995e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009962:	e7aa      	b.n	80098ba <_printf_i+0x146>
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	4632      	mov	r2, r6
 8009968:	4649      	mov	r1, r9
 800996a:	4640      	mov	r0, r8
 800996c:	47d0      	blx	sl
 800996e:	3001      	adds	r0, #1
 8009970:	d0ad      	beq.n	80098ce <_printf_i+0x15a>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	079b      	lsls	r3, r3, #30
 8009976:	d413      	bmi.n	80099a0 <_printf_i+0x22c>
 8009978:	68e0      	ldr	r0, [r4, #12]
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	4298      	cmp	r0, r3
 800997e:	bfb8      	it	lt
 8009980:	4618      	movlt	r0, r3
 8009982:	e7a6      	b.n	80098d2 <_printf_i+0x15e>
 8009984:	2301      	movs	r3, #1
 8009986:	4632      	mov	r2, r6
 8009988:	4649      	mov	r1, r9
 800998a:	4640      	mov	r0, r8
 800998c:	47d0      	blx	sl
 800998e:	3001      	adds	r0, #1
 8009990:	d09d      	beq.n	80098ce <_printf_i+0x15a>
 8009992:	3501      	adds	r5, #1
 8009994:	68e3      	ldr	r3, [r4, #12]
 8009996:	9903      	ldr	r1, [sp, #12]
 8009998:	1a5b      	subs	r3, r3, r1
 800999a:	42ab      	cmp	r3, r5
 800999c:	dcf2      	bgt.n	8009984 <_printf_i+0x210>
 800999e:	e7eb      	b.n	8009978 <_printf_i+0x204>
 80099a0:	2500      	movs	r5, #0
 80099a2:	f104 0619 	add.w	r6, r4, #25
 80099a6:	e7f5      	b.n	8009994 <_printf_i+0x220>
 80099a8:	08009b31 	.word	0x08009b31
 80099ac:	08009b42 	.word	0x08009b42

080099b0 <memmove>:
 80099b0:	4288      	cmp	r0, r1
 80099b2:	b510      	push	{r4, lr}
 80099b4:	eb01 0402 	add.w	r4, r1, r2
 80099b8:	d902      	bls.n	80099c0 <memmove+0x10>
 80099ba:	4284      	cmp	r4, r0
 80099bc:	4623      	mov	r3, r4
 80099be:	d807      	bhi.n	80099d0 <memmove+0x20>
 80099c0:	1e43      	subs	r3, r0, #1
 80099c2:	42a1      	cmp	r1, r4
 80099c4:	d008      	beq.n	80099d8 <memmove+0x28>
 80099c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099ce:	e7f8      	b.n	80099c2 <memmove+0x12>
 80099d0:	4402      	add	r2, r0
 80099d2:	4601      	mov	r1, r0
 80099d4:	428a      	cmp	r2, r1
 80099d6:	d100      	bne.n	80099da <memmove+0x2a>
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099e2:	e7f7      	b.n	80099d4 <memmove+0x24>

080099e4 <_sbrk_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d06      	ldr	r5, [pc, #24]	@ (8009a00 <_sbrk_r+0x1c>)
 80099e8:	2300      	movs	r3, #0
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	f7f8 f800 	bl	80019f4 <_sbrk>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_sbrk_r+0x1a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_sbrk_r+0x1a>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	20001948 	.word	0x20001948

08009a04 <_realloc_r>:
 8009a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a08:	4607      	mov	r7, r0
 8009a0a:	4614      	mov	r4, r2
 8009a0c:	460d      	mov	r5, r1
 8009a0e:	b921      	cbnz	r1, 8009a1a <_realloc_r+0x16>
 8009a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	4611      	mov	r1, r2
 8009a16:	f7ff bc5b 	b.w	80092d0 <_malloc_r>
 8009a1a:	b92a      	cbnz	r2, 8009a28 <_realloc_r+0x24>
 8009a1c:	f7ff fbec 	bl	80091f8 <_free_r>
 8009a20:	4625      	mov	r5, r4
 8009a22:	4628      	mov	r0, r5
 8009a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a28:	f000 f81a 	bl	8009a60 <_malloc_usable_size_r>
 8009a2c:	4284      	cmp	r4, r0
 8009a2e:	4606      	mov	r6, r0
 8009a30:	d802      	bhi.n	8009a38 <_realloc_r+0x34>
 8009a32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a36:	d8f4      	bhi.n	8009a22 <_realloc_r+0x1e>
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4638      	mov	r0, r7
 8009a3c:	f7ff fc48 	bl	80092d0 <_malloc_r>
 8009a40:	4680      	mov	r8, r0
 8009a42:	b908      	cbnz	r0, 8009a48 <_realloc_r+0x44>
 8009a44:	4645      	mov	r5, r8
 8009a46:	e7ec      	b.n	8009a22 <_realloc_r+0x1e>
 8009a48:	42b4      	cmp	r4, r6
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	bf28      	it	cs
 8009a50:	4632      	movcs	r2, r6
 8009a52:	f7ff fbc3 	bl	80091dc <memcpy>
 8009a56:	4629      	mov	r1, r5
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f7ff fbcd 	bl	80091f8 <_free_r>
 8009a5e:	e7f1      	b.n	8009a44 <_realloc_r+0x40>

08009a60 <_malloc_usable_size_r>:
 8009a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a64:	1f18      	subs	r0, r3, #4
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	bfbc      	itt	lt
 8009a6a:	580b      	ldrlt	r3, [r1, r0]
 8009a6c:	18c0      	addlt	r0, r0, r3
 8009a6e:	4770      	bx	lr

08009a70 <_init>:
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	bf00      	nop
 8009a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a76:	bc08      	pop	{r3}
 8009a78:	469e      	mov	lr, r3
 8009a7a:	4770      	bx	lr

08009a7c <_fini>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	bf00      	nop
 8009a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a82:	bc08      	pop	{r3}
 8009a84:	469e      	mov	lr, r3
 8009a86:	4770      	bx	lr
