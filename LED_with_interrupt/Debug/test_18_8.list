
test_18_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008090  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008230  08008230  00009230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a8  080082a8  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080082a8  080082a8  000092a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b0  080082b0  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b0  080082b0  000092b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082b4  080082b4  000092b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080082b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001870  20000060  08008318  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018d0  08008318  0000a8d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027466  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c5f  00000000  00000000  000314f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e0  00000000  00000000  00036158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a5d  00000000  00000000  00038338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f02  00000000  00000000  00039d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e3a  00000000  00000000  00063c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103f62  00000000  00000000  0008bad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fa33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009428  00000000  00000000  0018fa78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00198ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008218 	.word	0x08008218

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08008218 	.word	0x08008218

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <HAL_GPIO_EXTI_Callback>:
  * @brief  The application entry point.
  * @retval int
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800054a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800054e:	4803      	ldr	r0, [pc, #12]	@ (800055c <HAL_GPIO_EXTI_Callback+0x1c>)
 8000550:	f002 fc42 	bl	8002dd8 <HAL_GPIO_TogglePin>

}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	48000400 	.word	0x48000400

08000560 <main>:

int main(void)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f001 fa04 	bl	8001972 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f837 	bl	80005dc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800056e:	f000 f89d 	bl	80006ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 fbc1 	bl	8000cf8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000576:	f000 f8cb 	bl	8000710 <MX_ADC1_Init>
  MX_I2C1_Init();
 800057a:	f000 f92f 	bl	80007dc <MX_I2C1_Init>
  MX_QUADSPI_Init();
 800057e:	f000 f96b 	bl	8000858 <MX_QUADSPI_Init>
  MX_RNG_Init();
 8000582:	f000 f995 	bl	80008b0 <MX_RNG_Init>
  MX_RTC_Init();
 8000586:	f000 f9a7 	bl	80008d8 <MX_RTC_Init>
  MX_SPI1_Init();
 800058a:	f000 f9cd 	bl	8000928 <MX_SPI1_Init>
  MX_SPI3_Init();
 800058e:	f000 fa09 	bl	80009a4 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000592:	f000 fa45 	bl	8000a20 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000596:	f000 fa9d 	bl	8000ad4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800059a:	f000 faf5 	bl	8000b88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800059e:	f000 fb23 	bl	8000be8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005a2:	f000 fb51 	bl	8000c48 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80005a6:	f000 fb7f 	bl	8000ca8 <MX_USB_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <main+0x74>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f006 fbc2 	bl	8006d4a <osThreadCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a03      	ldr	r2, [pc, #12]	@ (80005d8 <main+0x78>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f006 fbb6 	bl	8006d3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x70>
 80005d4:	0800823c 	.word	0x0800823c
 80005d8:	20000a30 	.word	0x20000a30

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	@ 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	@ 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f007 fd32 	bl	8008054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000602:	f002 fe93 	bl	800332c <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 fc54 	bl	8000eb8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000610:	f002 fe6e 	bl	80032f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000614:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800061a:	4a23      	ldr	r2, [pc, #140]	@ (80006a8 <SystemClock_Config+0xcc>)
 800061c:	f023 0318 	bic.w	r3, r3, #24
 8000620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000624:	2314      	movs	r3, #20
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000634:	2360      	movs	r3, #96	@ 0x60
 8000636:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800063c:	2301      	movs	r3, #1
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000640:	2301      	movs	r3, #1
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000644:	2328      	movs	r3, #40	@ 0x28
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000648:	2307      	movs	r3, #7
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4618      	mov	r0, r3
 800065a:	f002 ff8f 	bl	800357c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000664:	f000 fc28 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2303      	movs	r3, #3
 800066e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	2104      	movs	r1, #4
 8000680:	4618      	mov	r0, r3
 8000682:	f003 fb8f 	bl	8003da4 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800068c:	f000 fc14 	bl	8000eb8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000690:	2200      	movs	r2, #0
 8000692:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000696:	2000      	movs	r0, #0
 8000698:	f003 fc84 	bl	8003fa4 <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800069c:	f004 f878 	bl	8004790 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a0:	bf00      	nop
 80006a2:	3758      	adds	r7, #88	@ 0x58
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000

080006ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09a      	sub	sp, #104	@ 0x68
 80006b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2268      	movs	r2, #104	@ 0x68
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f007 fccb 	bl	8008054 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG
 80006be:	f44f 238c 	mov.w	r3, #286720	@ 0x46000
 80006c2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006c4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006ce:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80006d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006de:	2318      	movs	r3, #24
 80006e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006e2:	2307      	movs	r3, #7
 80006e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006ee:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 80006f2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 fdde 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000702:	f000 fbd9 	bl	8000eb8 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3768      	adds	r7, #104	@ 0x68
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000726:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000728:	4a29      	ldr	r2, [pc, #164]	@ (80007d0 <MX_ADC1_Init+0xc0>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <MX_ADC1_Init+0xbc>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <MX_ADC1_Init+0xbc>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000746:	2204      	movs	r2, #4
 8000748:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800074a:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <MX_ADC1_Init+0xbc>)
 800074c:	2200      	movs	r2, #0
 800074e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000750:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000752:	2200      	movs	r2, #0
 8000754:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000758:	2201      	movs	r2, #1
 800075a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075c:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <MX_ADC1_Init+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000764:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <MX_ADC1_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000770:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_ADC1_Init+0xbc>)
 800077a:	2200      	movs	r2, #0
 800077c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000786:	4811      	ldr	r0, [pc, #68]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000788:	f001 faf0 	bl	8001d6c <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000792:	f000 fb91 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_ADC1_Init+0xc4>)
 8000798:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079a:	2306      	movs	r3, #6
 800079c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <MX_ADC1_Init+0xc8>)
 80007a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a6:	2304      	movs	r3, #4
 80007a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	@ (80007cc <MX_ADC1_Init+0xbc>)
 80007b4:	f001 fc20 	bl	8001ff8 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007be:	f000 fb7b 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000031c 	.word	0x2000031c
 80007d0:	50040000 	.word	0x50040000
 80007d4:	04300002 	.word	0x04300002
 80007d8:	407f0000 	.word	0x407f0000

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	f640 6214 	movw	r2, #3604	@ 0xe14
 80007ec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080c:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000818:	480d      	ldr	r0, [pc, #52]	@ (8000850 <MX_I2C1_Init+0x74>)
 800081a:	f002 fb0f 	bl	8002e3c <HAL_I2C_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000824:	f000 fb48 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4809      	ldr	r0, [pc, #36]	@ (8000850 <MX_I2C1_Init+0x74>)
 800082c:	f002 fba1 	bl	8002f72 <HAL_I2CEx_ConfigAnalogFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000836:	f000 fb3f 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_I2C1_Init+0x74>)
 800083e:	f002 fbe3 	bl	8003008 <HAL_I2CEx_ConfigDigitalFilter>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000848:	f000 fb36 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000384 	.word	0x20000384
 8000854:	40005400 	.word	0x40005400

08000858 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <MX_QUADSPI_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 8000864:	22ff      	movs	r2, #255	@ 0xff
 8000866:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 800086a:	2201      	movs	r2, #1
 800086c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 8000876:	2201      	movs	r2, #1
 8000878:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_QUADSPI_Init+0x50>)
 8000894:	f002 fdb0 	bl	80033f8 <HAL_QSPI_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800089e:	f000 fb0b 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200003d8 	.word	0x200003d8
 80008ac:	a0001000 	.word	0xa0001000

080008b0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_RNG_Init+0x20>)
 80008b6:	4a07      	ldr	r2, [pc, #28]	@ (80008d4 <MX_RNG_Init+0x24>)
 80008b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_RNG_Init+0x20>)
 80008bc:	f004 f86a 	bl	8004994 <HAL_RNG_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80008c6:	f000 faf7 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000424 	.word	0x20000424
 80008d4:	50060800 	.word	0x50060800

080008d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008dc:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <MX_RTC_Init+0x48>)
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <MX_RTC_Init+0x4c>)
 80008e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_RTC_Init+0x48>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_RTC_Init+0x48>)
 80008ea:	227f      	movs	r2, #127	@ 0x7f
 80008ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_RTC_Init+0x48>)
 80008f0:	22ff      	movs	r2, #255	@ 0xff
 80008f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_RTC_Init+0x48>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_RTC_Init+0x48>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_RTC_Init+0x48>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_RTC_Init+0x48>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_RTC_Init+0x48>)
 800090e:	f004 f898 	bl	8004a42 <HAL_RTC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000918:	f000 face 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000434 	.word	0x20000434
 8000924:	40002800 	.word	0x40002800

08000928 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_SPI1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <MX_SPI1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_SPI1_Init+0x74>)
 8000934:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000940:	4b16      	ldr	r3, [pc, #88]	@ (800099c <MX_SPI1_Init+0x74>)
 8000942:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000946:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_SPI1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_SPI1_Init+0x74>)
 8000956:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800095a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_SPI1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_SPI1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_SPI1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_SPI1_Init+0x74>)
 8000976:	2207      	movs	r2, #7
 8000978:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_SPI1_Init+0x74>)
 8000982:	2208      	movs	r2, #8
 8000984:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_SPI1_Init+0x74>)
 8000988:	f004 f97a 	bl	8004c80 <HAL_SPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 fa91 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000458 	.word	0x20000458
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <MX_SPI3_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009bc:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009be:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c4:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ca:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009d0:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009f2:	2207      	movs	r2, #7
 80009f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_SPI3_Init+0x74>)
 80009fe:	2208      	movs	r2, #8
 8000a00:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_SPI3_Init+0x74>)
 8000a04:	f004 f93c 	bl	8004c80 <HAL_SPI_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 fa53 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200004bc 	.word	0x200004bc
 8000a1c:	40003c00 	.word	0x40003c00

08000a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a6c:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000a6e:	f004 fa67 	bl	8004f40 <HAL_TIM_PWM_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a78:	f000 fa1e 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000a8c:	f004 ffea 	bl	8005a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a96:	f000 fa0f 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9a:	2360      	movs	r3, #96	@ 0x60
 8000a9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2204      	movs	r2, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000ab2:	f004 fba3 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000abc:	f000 f9fc 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <MX_TIM2_Init+0xb0>)
 8000ac2:	f000 fc5b 	bl	800137c <HAL_TIM_MspPostInit>

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	@ 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000520 	.word	0x20000520

08000ad4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	615a      	str	r2, [r3, #20]
 8000af6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af8:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000afa:	4a22      	ldr	r2, [pc, #136]	@ (8000b84 <MX_TIM3_Init+0xb0>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000afe:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000b0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b1e:	4818      	ldr	r0, [pc, #96]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000b20:	f004 fa0e 	bl	8004f40 <HAL_TIM_PWM_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b2a:	f000 f9c5 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4810      	ldr	r0, [pc, #64]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000b3e:	f004 ff91 	bl	8005a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b48:	f000 f9b6 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4c:	2360      	movs	r3, #96	@ 0x60
 8000b4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	220c      	movs	r2, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000b64:	f004 fb4a 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000b6e:	f000 f9a3 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <MX_TIM3_Init+0xac>)
 8000b74:	f000 fc02 	bl	800137c <HAL_TIM_MspPostInit>

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000056c 	.word	0x2000056c
 8000b84:	40000400 	.word	0x40000400

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	@ (8000be4 <MX_USART1_UART_Init+0x5c>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bcc:	f004 ffd6 	bl	8005b7c <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 f96f 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200005b8 	.word	0x200005b8
 8000be4:	40013800 	.word	0x40013800

08000be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000bee:	4a15      	ldr	r2, [pc, #84]	@ (8000c44 <MX_USART2_UART_Init+0x5c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c14:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c18:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c2e:	f004 ffa5 	bl	8005b7c <HAL_UART_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000c38:	f000 f93e 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000640 	.word	0x20000640
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ca4 <MX_USART3_UART_Init+0x5c>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c52:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c74:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c78:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c8e:	f004 ff75 	bl	8005b7c <HAL_UART_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8000c98:	f000 f90e 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200006c8 	.word	0x200006c8
 8000ca4:	40004800 	.word	0x40004800

08000ca8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000cac:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <MX_USB_PCD_Init+0x48>)
 8000cae:	4a11      	ldr	r2, [pc, #68]	@ (8000cf4 <MX_USB_PCD_Init+0x4c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <MX_USB_PCD_Init+0x48>)
 8000cb4:	2208      	movs	r2, #8
 8000cb6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <MX_USB_PCD_Init+0x48>)
 8000cba:	2202      	movs	r2, #2
 8000cbc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_USB_PCD_Init+0x48>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <MX_USB_PCD_Init+0x48>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_USB_PCD_Init+0x48>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <MX_USB_PCD_Init+0x48>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <MX_USB_PCD_Init+0x48>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_USB_PCD_Init+0x48>)
 8000cde:	f002 f9df 	bl	80030a0 <HAL_PCD_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ce8:	f000 f8e6 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000750 	.word	0x20000750
 8000cf4:	40006800 	.word	0x40006800

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b50      	ldr	r3, [pc, #320]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	4a4f      	ldr	r2, [pc, #316]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b4a      	ldr	r3, [pc, #296]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	4a49      	ldr	r2, [pc, #292]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d32:	4b47      	ldr	r3, [pc, #284]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b44      	ldr	r3, [pc, #272]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a43      	ldr	r2, [pc, #268]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b41      	ldr	r3, [pc, #260]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	4b3e      	ldr	r3, [pc, #248]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b3b      	ldr	r3, [pc, #236]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	4b38      	ldr	r3, [pc, #224]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	4a37      	ldr	r2, [pc, #220]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7a:	4b35      	ldr	r3, [pc, #212]	@ (8000e50 <MX_GPIO_Init+0x158>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MDM_PWR_EN_OUT_Pin|MDM_RST_OUT_Pin|LED2_Pin|LED3_Pin
 8000d86:	2200      	movs	r2, #0
 8000d88:	f24c 01c4 	movw	r1, #49348	@ 0xc0c4
 8000d8c:	4831      	ldr	r0, [pc, #196]	@ (8000e54 <MX_GPIO_Init+0x15c>)
 8000d8e:	f002 f80b 	bl	8002da8 <HAL_GPIO_WritePin>
                          |ST33_VCC_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|MDM_DTR_OUT_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000d98:	482f      	ldr	r0, [pc, #188]	@ (8000e58 <MX_GPIO_Init+0x160>)
 8000d9a:	f002 f805 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDM_PWR_EN_OUT_Pin MDM_RST_OUT_Pin LED2_Pin LED3_Pin
                           ST33_VCC_CTRL_Pin */
  GPIO_InitStruct.Pin = MDM_PWR_EN_OUT_Pin|MDM_RST_OUT_Pin|LED2_Pin|LED3_Pin
 8000d9e:	f24c 03c4 	movw	r3, #49348	@ 0xc0c4
 8000da2:	617b      	str	r3, [r7, #20]
                          |ST33_VCC_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4827      	ldr	r0, [pc, #156]	@ (8000e54 <MX_GPIO_Init+0x15c>)
 8000db8:	f001 fe7c 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dc2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4821      	ldr	r0, [pc, #132]	@ (8000e58 <MX_GPIO_Init+0x160>)
 8000dd4:	f001 fe6e 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000dd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f001 fe5c 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin MDM_DTR_OUT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|MDM_DTR_OUT_Pin;
 8000dfc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4810      	ldr	r0, [pc, #64]	@ (8000e58 <MX_GPIO_Init+0x160>)
 8000e16:	f001 fe4d 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MDM_RING_Pin */
  GPIO_InitStruct.Pin = MDM_RING_Pin;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MDM_RING_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <MX_GPIO_Init+0x15c>)
 8000e32:	f001 fe3f 	bl	8002ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2105      	movs	r1, #5
 8000e3a:	2028      	movs	r0, #40	@ 0x28
 8000e3c:	f001 fd90 	bl	8002960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e40:	2028      	movs	r0, #40	@ 0x28
 8000e42:	f001 fda9 	bl	8002998 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	@ 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000400 	.word	0x48000400
 8000e58:	48000800 	.word	0x48000800

08000e5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  //LED ON
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e6a:	4809      	ldr	r0, [pc, #36]	@ (8000e90 <StartDefaultTask+0x34>)
 8000e6c:	f001 ff9c 	bl	8002da8 <HAL_GPIO_WritePin>
	HAL_Delay(1000); //Delay between On and Off
 8000e70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e74:	f000 fdb6 	bl	80019e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  //LED OFF
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e7e:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <StartDefaultTask+0x34>)
 8000e80:	f001 ff92 	bl	8002da8 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8000e84:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000e88:	f000 fdac 	bl	80019e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  //LED ON
 8000e8c:	bf00      	nop
 8000e8e:	e7e9      	b.n	8000e64 <StartDefaultTask+0x8>
 8000e90:	48000400 	.word	0x48000400

08000e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ea6:	f000 fd7d 	bl	80019a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40012c00 	.word	0x40012c00

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <Error_Handler+0x8>

08000ec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_MspInit+0x4c>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ece:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_MspInit+0x4c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_MspInit+0x4c>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <HAL_MspInit+0x4c>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eee:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <HAL_MspInit+0x4c>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	210f      	movs	r1, #15
 8000efe:	f06f 0001 	mvn.w	r0, #1
 8000f02:	f001 fd2d 	bl	8002960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <HAL_ADC_MspInit+0x74>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d123      	bne.n	8000f7e <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_ADC_MspInit+0x78>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <HAL_ADC_MspInit+0x78>)
 8000f3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_ADC_MspInit+0x78>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_ADC_MspInit+0x78>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_ADC_MspInit+0x78>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_ADC_MspInit+0x78>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC0     ------> ADC1_IN1
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A2_Pin|ARD_A5_Pin|ARD_A3_Pin;
 8000f66:	230f      	movs	r3, #15
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <HAL_ADC_MspInit+0x7c>)
 8000f7a:	f001 fd9b 	bl	8002ab4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	@ 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	50040000 	.word	0x50040000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	48000800 	.word	0x48000800

08000f94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0a4      	sub	sp, #144	@ 0x90
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2268      	movs	r2, #104	@ 0x68
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 f84d 	bl	8008054 <memset>
  if(hi2c->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <HAL_I2C_MspInit+0xb0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d13a      	bne.n	800103a <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc4:	2340      	movs	r3, #64	@ 0x40
 8000fc6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 f971 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fdc:	f7ff ff6c 	bl	8000eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe4:	4a18      	ldr	r2, [pc, #96]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ff8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ffc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffe:	2312      	movs	r3, #18
 8001000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001004:	2301      	movs	r3, #1
 8001006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001010:	2304      	movs	r3, #4
 8001012:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800101a:	4619      	mov	r1, r3
 800101c:	480b      	ldr	r0, [pc, #44]	@ (800104c <HAL_I2C_MspInit+0xb8>)
 800101e:	f001 fd49 	bl	8002ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	4a08      	ldr	r2, [pc, #32]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8001028:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800102c:	6593      	str	r3, [r2, #88]	@ 0x58
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800103a:	bf00      	nop
 800103c:	3790      	adds	r7, #144	@ 0x90
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40005400 	.word	0x40005400
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400

08001050 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a26      	ldr	r2, [pc, #152]	@ (8001108 <HAL_QSPI_MspInit+0xb8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d145      	bne.n	80010fe <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001072:	4b26      	ldr	r3, [pc, #152]	@ (800110c <HAL_QSPI_MspInit+0xbc>)
 8001074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001076:	4a25      	ldr	r2, [pc, #148]	@ (800110c <HAL_QSPI_MspInit+0xbc>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107c:	6513      	str	r3, [r2, #80]	@ 0x50
 800107e:	4b23      	ldr	r3, [pc, #140]	@ (800110c <HAL_QSPI_MspInit+0xbc>)
 8001080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b20      	ldr	r3, [pc, #128]	@ (800110c <HAL_QSPI_MspInit+0xbc>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a1f      	ldr	r2, [pc, #124]	@ (800110c <HAL_QSPI_MspInit+0xbc>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_QSPI_MspInit+0xbc>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <HAL_QSPI_MspInit+0xbc>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a19      	ldr	r2, [pc, #100]	@ (800110c <HAL_QSPI_MspInit+0xbc>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_QSPI_MspInit+0xbc>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
    PB11     ------> QUADSPI_BK1_NCS
    PB10     ------> QUADSPI_CLK
    PB0     ------> QUADSPI_BK1_IO1
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80010ba:	23c0      	movs	r3, #192	@ 0xc0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010ca:	230a      	movs	r3, #10
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d8:	f001 fcec 	bl	8002ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0;
 80010dc:	f640 4303 	movw	r3, #3075	@ 0xc03
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010ee:	230a      	movs	r3, #10
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <HAL_QSPI_MspInit+0xc0>)
 80010fa:	f001 fcdb 	bl	8002ab4 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	a0001000 	.word	0xa0001000
 800110c:	40021000 	.word	0x40021000
 8001110:	48000400 	.word	0x48000400

08001114 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <HAL_RNG_MspInit+0x38>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10b      	bne.n	800113e <HAL_RNG_MspInit+0x2a>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_RNG_MspInit+0x3c>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <HAL_RNG_MspInit+0x3c>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <HAL_RNG_MspInit+0x3c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	50060800 	.word	0x50060800
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09c      	sub	sp, #112	@ 0x70
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2268      	movs	r2, #104	@ 0x68
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f006 ff75 	bl	8008054 <memset>
  if(hrtc->Instance==RTC)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <HAL_RTC_MspInit+0x58>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d117      	bne.n	80011a4 <HAL_RTC_MspInit+0x50>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001174:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800117a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800117e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	4618      	mov	r0, r3
 8001186:	f003 f897 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001190:	f7ff fe92 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_RTC_MspInit+0x5c>)
 8001196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <HAL_RTC_MspInit+0x5c>)
 800119c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80011a4:	bf00      	nop
 80011a6:	3770      	adds	r7, #112	@ 0x70
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40002800 	.word	0x40002800
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	@ 0x38
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001304 <HAL_SPI_MspInit+0x150>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d146      	bne.n	8001264 <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	4a4b      	ldr	r2, [pc, #300]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 80011dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e2:	4b49      	ldr	r3, [pc, #292]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ea:	623b      	str	r3, [r7, #32]
 80011ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b46      	ldr	r3, [pc, #280]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a45      	ldr	r2, [pc, #276]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b43      	ldr	r3, [pc, #268]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b40      	ldr	r3, [pc, #256]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a3f      	ldr	r2, [pc, #252]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b3d      	ldr	r3, [pc, #244]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 800121e:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001230:	2305      	movs	r3, #5
 8001232:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123e:	f001 fc39 	bl	8002ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001242:	2330      	movs	r3, #48	@ 0x30
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001252:	2305      	movs	r3, #5
 8001254:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	482b      	ldr	r0, [pc, #172]	@ (800130c <HAL_SPI_MspInit+0x158>)
 800125e:	f001 fc29 	bl	8002ab4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001262:	e04a      	b.n	80012fa <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a29      	ldr	r2, [pc, #164]	@ (8001310 <HAL_SPI_MspInit+0x15c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d145      	bne.n	80012fa <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 8001274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a1f      	ldr	r2, [pc, #124]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <HAL_SPI_MspInit+0x154>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST33_MOSI_Pin|ST33_MISO_Pin|ST33_SCK_Pin;
 80012b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c8:	2306      	movs	r3, #6
 80012ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4810      	ldr	r0, [pc, #64]	@ (8001314 <HAL_SPI_MspInit+0x160>)
 80012d4:	f001 fbee 	bl	8002ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ST33_CS_Pin;
 80012d8:	2310      	movs	r3, #16
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e8:	2306      	movs	r3, #6
 80012ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ST33_CS_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f6:	f001 fbdd 	bl	8002ab4 <HAL_GPIO_Init>
}
 80012fa:	bf00      	nop
 80012fc:	3738      	adds	r7, #56	@ 0x38
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40013000 	.word	0x40013000
 8001308:	40021000 	.word	0x40021000
 800130c:	48000400 	.word	0x48000400
 8001310:	40003c00 	.word	0x40003c00
 8001314:	48000800 	.word	0x48000800

08001318 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001328:	d10c      	bne.n	8001344 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_TIM_PWM_MspInit+0x5c>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	4a11      	ldr	r2, [pc, #68]	@ (8001374 <HAL_TIM_PWM_MspInit+0x5c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6593      	str	r3, [r2, #88]	@ 0x58
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <HAL_TIM_PWM_MspInit+0x5c>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001342:	e010      	b.n	8001366 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_TIM_PWM_MspInit+0x60>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10b      	bne.n	8001366 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_TIM_PWM_MspInit+0x5c>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_TIM_PWM_MspInit+0x5c>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6593      	str	r3, [r2, #88]	@ 0x58
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_TIM_PWM_MspInit+0x5c>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	40000400 	.word	0x40000400

0800137c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800139c:	d11c      	bne.n	80013d8 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <HAL_TIM_MspPostInit+0xa8>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a20      	ldr	r2, [pc, #128]	@ (8001424 <HAL_TIM_MspPostInit+0xa8>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <HAL_TIM_MspPostInit+0xa8>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 80013b6:	2308      	movs	r3, #8
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013c6:	2301      	movs	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4815      	ldr	r0, [pc, #84]	@ (8001428 <HAL_TIM_MspPostInit+0xac>)
 80013d2:	f001 fb6f 	bl	8002ab4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013d6:	e021      	b.n	800141c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a13      	ldr	r2, [pc, #76]	@ (800142c <HAL_TIM_MspPostInit+0xb0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d11c      	bne.n	800141c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_TIM_MspPostInit+0xa8>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <HAL_TIM_MspPostInit+0xa8>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <HAL_TIM_MspPostInit+0xa8>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 80013fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800140c:	2302      	movs	r3, #2
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	@ (8001430 <HAL_TIM_MspPostInit+0xb4>)
 8001418:	f001 fb4c 	bl	8002ab4 <HAL_GPIO_Init>
}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	@ 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400
 800142c:	40000400 	.word	0x40000400
 8001430:	48000800 	.word	0x48000800

08001434 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0aa      	sub	sp, #168	@ 0xa8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001450:	2268      	movs	r2, #104	@ 0x68
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f006 fdfd 	bl	8008054 <memset>
  if(huart->Instance==USART1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a91      	ldr	r2, [pc, #580]	@ (80016a4 <HAL_UART_MspInit+0x270>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d145      	bne.n	80014f0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001464:	2301      	movs	r3, #1
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001468:	2300      	movs	r3, #0
 800146a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001470:	4618      	mov	r0, r3
 8001472:	f002 ff21 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800147c:	f7ff fd1c 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001480:	4b89      	ldr	r3, [pc, #548]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 8001482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001484:	4a88      	ldr	r2, [pc, #544]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 8001486:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148a:	6613      	str	r3, [r2, #96]	@ 0x60
 800148c:	4b86      	ldr	r3, [pc, #536]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 800148e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001496:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b83      	ldr	r3, [pc, #524]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149c:	4a82      	ldr	r2, [pc, #520]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a4:	4b80      	ldr	r3, [pc, #512]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D2_Pin|ARD_D8_Pin;
 80014b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ca:	2307      	movs	r3, #7
 80014cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014da:	f001 faeb 	bl	8002ab4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2105      	movs	r1, #5
 80014e2:	2025      	movs	r0, #37	@ 0x25
 80014e4:	f001 fa3c 	bl	8002960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014e8:	2025      	movs	r0, #37	@ 0x25
 80014ea:	f001 fa55 	bl	8002998 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ee:	e0d5      	b.n	800169c <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6d      	ldr	r2, [pc, #436]	@ (80016ac <HAL_UART_MspInit+0x278>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d144      	bne.n	8001584 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014fe:	2300      	movs	r3, #0
 8001500:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001502:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fed6 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001512:	f7ff fcd1 	bl	8000eb8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001516:	4b64      	ldr	r3, [pc, #400]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	4a63      	ldr	r2, [pc, #396]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	6593      	str	r3, [r2, #88]	@ 0x58
 8001522:	4b61      	ldr	r3, [pc, #388]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b5e      	ldr	r3, [pc, #376]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a5d      	ldr	r2, [pc, #372]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b5b      	ldr	r3, [pc, #364]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_D0_Pin|ARD_D1_Pin|ARD_A0_Pin;
 8001546:	230f      	movs	r3, #15
 8001548:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156e:	f001 faa1 	bl	8002ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2105      	movs	r1, #5
 8001576:	2026      	movs	r0, #38	@ 0x26
 8001578:	f001 f9f2 	bl	8002960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800157c:	2026      	movs	r0, #38	@ 0x26
 800157e:	f001 fa0b 	bl	8002998 <HAL_NVIC_EnableIRQ>
}
 8001582:	e08b      	b.n	800169c <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a49      	ldr	r2, [pc, #292]	@ (80016b0 <HAL_UART_MspInit+0x27c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	f040 8086 	bne.w	800169c <HAL_UART_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001590:	2304      	movs	r3, #4
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fe8b 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x178>
      Error_Handler();
 80015a8:	f7ff fc86 	bl	8000eb8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ac:	4b3e      	ldr	r3, [pc, #248]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	4a3d      	ldr	r2, [pc, #244]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b8:	4b3b      	ldr	r3, [pc, #236]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c4:	4b38      	ldr	r3, [pc, #224]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	4a37      	ldr	r2, [pc, #220]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d0:	4b35      	ldr	r3, [pc, #212]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015dc:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	4a31      	ldr	r2, [pc, #196]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e8:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b2c      	ldr	r3, [pc, #176]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f8:	4a2b      	ldr	r2, [pc, #172]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 80015fa:	f043 0302 	orr.w	r3, r3, #2
 80015fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001600:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <HAL_UART_MspInit+0x274>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MDM_UART_RTS_Pin;
 800160c:	2304      	movs	r3, #4
 800160e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001624:	2307      	movs	r3, #7
 8001626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(MDM_UART_RTS_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800162e:	4619      	mov	r1, r3
 8001630:	4820      	ldr	r0, [pc, #128]	@ (80016b4 <HAL_UART_MspInit+0x280>)
 8001632:	f001 fa3f 	bl	8002ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MDM_UART_TX_Pin|MDM_UART_RX_Pin;
 8001636:	2330      	movs	r3, #48	@ 0x30
 8001638:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800164e:	2307      	movs	r3, #7
 8001650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001658:	4619      	mov	r1, r3
 800165a:	4817      	ldr	r0, [pc, #92]	@ (80016b8 <HAL_UART_MspInit+0x284>)
 800165c:	f001 fa2a 	bl	8002ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MDM_UART_CTS_Pin;
 8001660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001664:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800167a:	2307      	movs	r3, #7
 800167c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(MDM_UART_CTS_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001684:	4619      	mov	r1, r3
 8001686:	480d      	ldr	r0, [pc, #52]	@ (80016bc <HAL_UART_MspInit+0x288>)
 8001688:	f001 fa14 	bl	8002ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2105      	movs	r1, #5
 8001690:	2027      	movs	r0, #39	@ 0x27
 8001692:	f001 f965 	bl	8002960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001696:	2027      	movs	r0, #39	@ 0x27
 8001698:	f001 f97e 	bl	8002998 <HAL_NVIC_EnableIRQ>
}
 800169c:	bf00      	nop
 800169e:	37a8      	adds	r7, #168	@ 0xa8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40004400 	.word	0x40004400
 80016b0:	40004800 	.word	0x40004800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	48000800 	.word	0x48000800
 80016bc:	48000400 	.word	0x48000400

080016c0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a26      	ldr	r2, [pc, #152]	@ (8001778 <HAL_PCD_MspInit+0xb8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d146      	bne.n	8001770 <HAL_PCD_MspInit+0xb0>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b26      	ldr	r3, [pc, #152]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	4a25      	ldr	r2, [pc, #148]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ee:	4b23      	ldr	r3, [pc, #140]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800170c:	230a      	movs	r3, #10
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171a:	f001 f9cb 	bl	8002ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	4a16      	ldr	r2, [pc, #88]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 8001724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001728:	6593      	str	r3, [r2, #88]	@ 0x58
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d114      	bne.n	800176c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	6593      	str	r3, [r2, #88]	@ 0x58
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800175a:	f001 fe3d 	bl	80033d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	4a06      	ldr	r2, [pc, #24]	@ (800177c <HAL_PCD_MspInit+0xbc>)
 8001764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001768:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_MspInit 1 */

  }

}
 800176a:	e001      	b.n	8001770 <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 800176c:	f001 fe34 	bl	80033d8 <HAL_PWREx_EnableVddUSB>
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40006800 	.word	0x40006800
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	@ 0x30
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800178e:	4b2e      	ldr	r3, [pc, #184]	@ (8001848 <HAL_InitTick+0xc8>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001792:	4a2d      	ldr	r2, [pc, #180]	@ (8001848 <HAL_InitTick+0xc8>)
 8001794:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001798:	6613      	str	r3, [r2, #96]	@ 0x60
 800179a:	4b2b      	ldr	r3, [pc, #172]	@ (8001848 <HAL_InitTick+0xc8>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a6:	f107 020c 	add.w	r2, r7, #12
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fcef 	bl	8004194 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017b6:	f002 fcd7 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 80017ba:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017be:	4a23      	ldr	r2, [pc, #140]	@ (800184c <HAL_InitTick+0xcc>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	3b01      	subs	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_InitTick+0xd0>)
 80017cc:	4a21      	ldr	r2, [pc, #132]	@ (8001854 <HAL_InitTick+0xd4>)
 80017ce:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <HAL_InitTick+0xd0>)
 80017d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017d6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001850 <HAL_InitTick+0xd0>)
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <HAL_InitTick+0xd0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <HAL_InitTick+0xd0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_InitTick+0xd0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80017f0:	4817      	ldr	r0, [pc, #92]	@ (8001850 <HAL_InitTick+0xd0>)
 80017f2:	f003 fae8 	bl	8004dc6 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001800:	2b00      	cmp	r3, #0
 8001802:	d11b      	bne.n	800183c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001804:	4812      	ldr	r0, [pc, #72]	@ (8001850 <HAL_InitTick+0xd0>)
 8001806:	f003 fb3f 	bl	8004e88 <HAL_TIM_Base_Start_IT>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001810:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001814:	2b00      	cmp	r3, #0
 8001816:	d111      	bne.n	800183c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001818:	2019      	movs	r0, #25
 800181a:	f001 f8bd 	bl	8002998 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d808      	bhi.n	8001836 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001824:	2200      	movs	r2, #0
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	2019      	movs	r0, #25
 800182a:	f001 f899 	bl	8002960 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <HAL_InitTick+0xd8>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	e002      	b.n	800183c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800183c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001840:	4618      	mov	r0, r3
 8001842:	3730      	adds	r7, #48	@ 0x30
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000
 800184c:	431bde83 	.word	0x431bde83
 8001850:	20000a34 	.word	0x20000a34
 8001854:	40012c00 	.word	0x40012c00
 8001858:	20000004 	.word	0x20000004

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <NMI_Handler+0x4>

08001864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <MemManage_Handler+0x4>

08001874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <UsageFault_Handler+0x4>

08001884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800189a:	f003 fba8 	bl	8004fee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000a34 	.word	0x20000a34

080018a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <USART1_IRQHandler+0x10>)
 80018ae:	f004 f9b3 	bl	8005c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200005b8 	.word	0x200005b8

080018bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <USART2_IRQHandler+0x10>)
 80018c2:	f004 f9a9 	bl	8005c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000640 	.word	0x20000640

080018d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <USART3_IRQHandler+0x10>)
 80018d6:	f004 f99f 	bl	8005c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200006c8 	.word	0x200006c8

080018e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MDM_RING_Pin);
 80018e8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80018ec:	f001 fa8e 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80018f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018f4:	f001 fa8a 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001958 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff ffea 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <LoopForever+0x6>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	@ (8001960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <LoopForever+0xe>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	@ (800196c <LoopForever+0x16>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f006 fbe7 	bl	8008120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001952:	f7fe fe05 	bl	8000560 <main>

08001956 <LoopForever>:

LoopForever:
    b LoopForever
 8001956:	e7fe      	b.n	8001956 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001958:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001964:	080082b8 	.word	0x080082b8
  ldr r2, =_sbss
 8001968:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800196c:	200018d0 	.word	0x200018d0

08001970 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_IRQHandler>

08001972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 ffe4 	bl	800294a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fefc 	bl	8001780 <HAL_InitTick>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	e001      	b.n	8001998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001994:	f7ff fa96 	bl	8000ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001998:	79fb      	ldrb	r3, [r7, #7]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000a80 	.word	0x20000a80

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000a80 	.word	0x20000a80

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_Delay+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008

08001a2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	609a      	str	r2, [r3, #8]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3360      	adds	r3, #96	@ 0x60
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <LL_ADC_SetOffset+0x44>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001acc:	bf00      	nop
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	03fff000 	.word	0x03fff000

08001adc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3360      	adds	r3, #96	@ 0x60
 8001aea:	461a      	mov	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3360      	adds	r3, #96	@ 0x60
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	615a      	str	r2, [r3, #20]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3330      	adds	r3, #48	@ 0x30
 8001b74:	461a      	mov	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	4413      	add	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	211f      	movs	r1, #31
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	0e9b      	lsrs	r3, r3, #26
 8001b9c:	f003 011f 	and.w	r1, r3, #31
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3314      	adds	r3, #20
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	0e5b      	lsrs	r3, r3, #25
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0d1b      	lsrs	r3, r3, #20
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2107      	movs	r1, #7
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	0d1b      	lsrs	r3, r3, #20
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	431a      	orrs	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0318 	and.w	r3, r3, #24
 8001c36:	4908      	ldr	r1, [pc, #32]	@ (8001c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c38:	40d9      	lsrs	r1, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c42:	431a      	orrs	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	0007ffff 	.word	0x0007ffff

08001c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6093      	str	r3, [r2, #8]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c94:	d101      	bne.n	8001c9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ce4:	d101      	bne.n	8001cea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <LL_ADC_IsEnabled+0x18>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <LL_ADC_IsEnabled+0x1a>
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d101      	bne.n	8001d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e129      	b.n	8001fda <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff f8bd 	bl	8000f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff67 	bl	8001c80 <LL_ADC_IsDeepPowerDownEnabled>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d004      	beq.n	8001dc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff4d 	bl	8001c5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff82 	bl	8001cd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d115      	bne.n	8001dfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff66 	bl	8001ca8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ddc:	4b81      	ldr	r3, [pc, #516]	@ (8001fe4 <HAL_ADC_Init+0x278>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	4a81      	ldr	r2, [pc, #516]	@ (8001fe8 <HAL_ADC_Init+0x27c>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001df0:	e002      	b.n	8001df8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f9      	bne.n	8001df2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff64 	bl	8001cd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10d      	bne.n	8001e2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e12:	f043 0210 	orr.w	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff75 	bl	8001d1e <LL_ADC_REG_IsConversionOngoing>
 8001e34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 80c2 	bne.w	8001fc8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 80be 	bne.w	8001fc8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e54:	f043 0202 	orr.w	r2, r3, #2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff49 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e6c:	485f      	ldr	r0, [pc, #380]	@ (8001fec <HAL_ADC_Init+0x280>)
 8001e6e:	f7ff ff43 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	485c      	ldr	r0, [pc, #368]	@ (8001ff0 <HAL_ADC_Init+0x284>)
 8001e80:	f7ff fdd4 	bl	8001a2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e5b      	ldrb	r3, [r3, #25]
 8001e88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d106      	bne.n	8001ec0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	045b      	lsls	r3, r3, #17
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b44      	ldr	r3, [pc, #272]	@ (8001ff4 <HAL_ADC_Init+0x288>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff25 	bl	8001d44 <LL_ADC_INJ_IsConversionOngoing>
 8001efa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d140      	bne.n	8001f84 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d13d      	bne.n	8001f84 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7e1b      	ldrb	r3, [r3, #24]
 8001f10:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f12:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f2a:	f023 0306 	bic.w	r3, r3, #6
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d118      	bne.n	8001f74 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f58:	4311      	orrs	r1, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f64:	430a      	orrs	r2, r1
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	e007      	b.n	8001f84 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f023 010f 	bic.w	r1, r3, #15
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	1e5a      	subs	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fa4:	e007      	b.n	8001fb6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020f 	bic.w	r2, r2, #15
 8001fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	f023 0303 	bic.w	r3, r3, #3
 8001fbe:	f043 0201 	orr.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fc6:	e007      	b.n	8001fd8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	f043 0210 	orr.w	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	053e2d63 	.word	0x053e2d63
 8001fec:	50040000 	.word	0x50040000
 8001ff0:	50040300 	.word	0x50040300
 8001ff4:	fff0c007 	.word	0xfff0c007

08001ff8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0b6      	sub	sp, #216	@ 0xd8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADC_ConfigChannel+0x22>
 8002016:	2302      	movs	r3, #2
 8002018:	e3d5      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x7ce>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fe79 	bl	8001d1e <LL_ADC_REG_IsConversionOngoing>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 83ba 	bne.w	80027a8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d824      	bhi.n	800208e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	3b02      	subs	r3, #2
 800204a:	2b03      	cmp	r3, #3
 800204c:	d81b      	bhi.n	8002086 <HAL_ADC_ConfigChannel+0x8e>
 800204e:	a201      	add	r2, pc, #4	@ (adr r2, 8002054 <HAL_ADC_ConfigChannel+0x5c>)
 8002050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002054:	08002065 	.word	0x08002065
 8002058:	0800206d 	.word	0x0800206d
 800205c:	08002075 	.word	0x08002075
 8002060:	0800207d 	.word	0x0800207d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002064:	230c      	movs	r3, #12
 8002066:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800206a:	e010      	b.n	800208e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800206c:	2312      	movs	r3, #18
 800206e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002072:	e00c      	b.n	800208e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002074:	2318      	movs	r3, #24
 8002076:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800207a:	e008      	b.n	800208e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800207c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002080:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002084:	e003      	b.n	800208e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002086:	2306      	movs	r3, #6
 8002088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800208c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800209c:	f7ff fd62 	bl	8001b64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fe3a 	bl	8001d1e <LL_ADC_REG_IsConversionOngoing>
 80020aa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fe46 	bl	8001d44 <LL_ADC_INJ_IsConversionOngoing>
 80020b8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 81bf 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 81ba 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020d8:	d10f      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7ff fd69 	bl	8001bbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fd23 	bl	8001b3e <LL_ADC_SetSamplingTimeCommonConfig>
 80020f8:	e00e      	b.n	8002118 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	461a      	mov	r2, r3
 8002108:	f7ff fd58 	bl	8001bbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fd13 	bl	8001b3e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b04      	cmp	r3, #4
 8002138:	d00a      	beq.n	8002150 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6919      	ldr	r1, [r3, #16]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800214a:	f7ff fca3 	bl	8001a94 <LL_ADC_SetOffset>
 800214e:	e179      	b.n	8002444 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fcc0 	bl	8001adc <LL_ADC_GetOffsetChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <HAL_ADC_ConfigChannel+0x184>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fcb5 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	0e9b      	lsrs	r3, r3, #26
 8002176:	f003 021f 	and.w	r2, r3, #31
 800217a:	e01e      	b.n	80021ba <HAL_ADC_ConfigChannel+0x1c2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fcaa 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800219a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800219e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80021aa:	2320      	movs	r3, #32
 80021ac:	e004      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80021ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x1da>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	e018      	b.n	8002204 <HAL_ADC_ConfigChannel+0x20c>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80021e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80021ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e004      	b.n	8002204 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80021fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002204:	429a      	cmp	r2, r3
 8002206:	d106      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fc79 	bl	8001b08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fc5d 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x24a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fc52 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	e01e      	b.n	8002280 <HAL_ADC_ConfigChannel+0x288>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2101      	movs	r1, #1
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fc47 	bl	8001adc <LL_ADC_GetOffsetChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002260:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002264:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e004      	b.n	800227e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002274:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x2a0>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	e018      	b.n	80022ca <HAL_ADC_ConfigChannel+0x2d2>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80022ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80022b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e004      	b.n	80022ca <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80022c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d106      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	2101      	movs	r1, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fc16 	bl	8001b08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2102      	movs	r1, #2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fbfa 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x310>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2102      	movs	r1, #2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fbef 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	f003 021f 	and.w	r2, r3, #31
 8002306:	e01e      	b.n	8002346 <HAL_ADC_ConfigChannel+0x34e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2102      	movs	r1, #2
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fbe4 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002326:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800232a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800232e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e004      	b.n	8002344 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800233a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <HAL_ADC_ConfigChannel+0x366>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	e014      	b.n	8002388 <HAL_ADC_ConfigChannel+0x390>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800236c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800236e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002372:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800237a:	2320      	movs	r3, #32
 800237c:	e004      	b.n	8002388 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800237e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002388:	429a      	cmp	r2, r3
 800238a:	d106      	bne.n	800239a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2200      	movs	r2, #0
 8002392:	2102      	movs	r1, #2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fbb7 	bl	8001b08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2103      	movs	r1, #3
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fb9b 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x3ce>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2103      	movs	r1, #3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fb90 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	e017      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x3fe>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2103      	movs	r1, #3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fb85 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80023de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023e0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80023e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e003      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80023ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d105      	bne.n	800240e <HAL_ADC_ConfigChannel+0x416>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	e011      	b.n	8002432 <HAL_ADC_ConfigChannel+0x43a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800241c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800241e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002426:	2320      	movs	r3, #32
 8002428:	e003      	b.n	8002432 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800242a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002432:	429a      	cmp	r2, r3
 8002434:	d106      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2200      	movs	r2, #0
 800243c:	2103      	movs	r1, #3
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fb62 	bl	8001b08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fc55 	bl	8001cf8 <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 813f 	bne.w	80026d4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	461a      	mov	r2, r3
 8002464:	f7ff fbd6 	bl	8001c14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a8e      	ldr	r2, [pc, #568]	@ (80026a8 <HAL_ADC_ConfigChannel+0x6b0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	f040 8130 	bne.w	80026d4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <HAL_ADC_ConfigChannel+0x4a4>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2b09      	cmp	r3, #9
 8002492:	bf94      	ite	ls
 8002494:	2301      	movls	r3, #1
 8002496:	2300      	movhi	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e019      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x4d8>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80024aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80024ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	e003      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80024b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2b09      	cmp	r3, #9
 80024c8:	bf94      	ite	ls
 80024ca:	2301      	movls	r3, #1
 80024cc:	2300      	movhi	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x4f8>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	3301      	adds	r3, #1
 80024e8:	069b      	lsls	r3, r3, #26
 80024ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ee:	e015      	b.n	800251c <HAL_ADC_ConfigChannel+0x524>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80024fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002500:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002508:	2320      	movs	r3, #32
 800250a:	e003      	b.n	8002514 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800250c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	069b      	lsls	r3, r3, #26
 8002518:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_ADC_ConfigChannel+0x544>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e9b      	lsrs	r3, r3, #26
 800252e:	3301      	adds	r3, #1
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	e017      	b.n	800256c <HAL_ADC_ConfigChannel+0x574>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800254a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800254e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e003      	b.n	8002560 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f303 	lsl.w	r3, r1, r3
 800256c:	ea42 0103 	orr.w	r1, r2, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x59a>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	3301      	adds	r3, #1
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	051b      	lsls	r3, r3, #20
 8002590:	e018      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x5cc>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80025aa:	2320      	movs	r3, #32
 80025ac:	e003      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80025ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c4:	430b      	orrs	r3, r1
 80025c6:	e080      	b.n	80026ca <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x5ec>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	3301      	adds	r3, #1
 80025dc:	069b      	lsls	r3, r3, #26
 80025de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025e2:	e015      	b.n	8002610 <HAL_ADC_ConfigChannel+0x618>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e003      	b.n	8002608 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	069b      	lsls	r3, r3, #26
 800260c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x638>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	3301      	adds	r3, #1
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	2101      	movs	r1, #1
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	e017      	b.n	8002660 <HAL_ADC_ConfigChannel+0x668>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	61bb      	str	r3, [r7, #24]
  return result;
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e003      	b.n	8002654 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	3301      	adds	r3, #1
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2101      	movs	r1, #1
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	ea42 0103 	orr.w	r1, r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_ADC_ConfigChannel+0x694>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	3301      	adds	r3, #1
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	3b1e      	subs	r3, #30
 8002684:	051b      	lsls	r3, r3, #20
 8002686:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800268a:	e01d      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x6d0>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	60fb      	str	r3, [r7, #12]
  return result;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e005      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x6bc>
 80026a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 021f 	and.w	r2, r3, #31
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	3b1e      	subs	r3, #30
 80026c2:	051b      	lsls	r3, r3, #20
 80026c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7ff fa74 	bl	8001bbc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b3d      	ldr	r3, [pc, #244]	@ (80027d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d06c      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e0:	483c      	ldr	r0, [pc, #240]	@ (80027d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80026e2:	f7ff f9c9 	bl	8001a78 <LL_ADC_GetCommonPathInternalCh>
 80026e6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a3a      	ldr	r2, [pc, #232]	@ (80027d8 <HAL_ADC_ConfigChannel+0x7e0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d127      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d121      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a35      	ldr	r2, [pc, #212]	@ (80027dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d157      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800270e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002712:	4619      	mov	r1, r3
 8002714:	482f      	ldr	r0, [pc, #188]	@ (80027d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002716:	f7ff f99c 	bl	8001a52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800271a:	4b31      	ldr	r3, [pc, #196]	@ (80027e0 <HAL_ADC_ConfigChannel+0x7e8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	4a30      	ldr	r2, [pc, #192]	@ (80027e4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002734:	e002      	b.n	800273c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3b01      	subs	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002742:	e03a      	b.n	80027ba <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a27      	ldr	r2, [pc, #156]	@ (80027e8 <HAL_ADC_ConfigChannel+0x7f0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d113      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800274e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002752:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10d      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1f      	ldr	r2, [pc, #124]	@ (80027dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d12a      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002764:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002768:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276c:	4619      	mov	r1, r3
 800276e:	4819      	ldr	r0, [pc, #100]	@ (80027d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002770:	f7ff f96f 	bl	8001a52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002774:	e021      	b.n	80027ba <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1c      	ldr	r2, [pc, #112]	@ (80027ec <HAL_ADC_ConfigChannel+0x7f4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d11c      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002780:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d116      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a12      	ldr	r2, [pc, #72]	@ (80027dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800279a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800279e:	4619      	mov	r1, r3
 80027a0:	480c      	ldr	r0, [pc, #48]	@ (80027d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80027a2:	f7ff f956 	bl	8001a52 <LL_ADC_SetCommonPathInternalCh>
 80027a6:	e008      	b.n	80027ba <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80027c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	37d8      	adds	r7, #216	@ 0xd8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	80080000 	.word	0x80080000
 80027d4:	50040300 	.word	0x50040300
 80027d8:	c7520000 	.word	0xc7520000
 80027dc:	50040000 	.word	0x50040000
 80027e0:	20000000 	.word	0x20000000
 80027e4:	053e2d63 	.word	0x053e2d63
 80027e8:	cb840000 	.word	0xcb840000
 80027ec:	80000001 	.word	0x80000001

080027f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4b0c      	ldr	r3, [pc, #48]	@ (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800281c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800283c:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <__NVIC_GetPriorityGrouping+0x18>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0b      	blt.n	800287e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4907      	ldr	r1, [pc, #28]	@ (800288c <__NVIC_EnableIRQ+0x38>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2001      	movs	r0, #1
 8002876:	fa00 f202 	lsl.w	r2, r0, r2
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000e100 	.word	0xe000e100

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	db0a      	blt.n	80028ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	490c      	ldr	r1, [pc, #48]	@ (80028dc <__NVIC_SetPriority+0x4c>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	440b      	add	r3, r1
 80028b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b8:	e00a      	b.n	80028d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4908      	ldr	r1, [pc, #32]	@ (80028e0 <__NVIC_SetPriority+0x50>)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3b04      	subs	r3, #4
 80028c8:	0112      	lsls	r2, r2, #4
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	440b      	add	r3, r1
 80028ce:	761a      	strb	r2, [r3, #24]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	@ 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f1c3 0307 	rsb	r3, r3, #7
 80028fe:	2b04      	cmp	r3, #4
 8002900:	bf28      	it	cs
 8002902:	2304      	movcs	r3, #4
 8002904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3304      	adds	r3, #4
 800290a:	2b06      	cmp	r3, #6
 800290c:	d902      	bls.n	8002914 <NVIC_EncodePriority+0x30>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3b03      	subs	r3, #3
 8002912:	e000      	b.n	8002916 <NVIC_EncodePriority+0x32>
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	f04f 32ff 	mov.w	r2, #4294967295
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800292c:	f04f 31ff 	mov.w	r1, #4294967295
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43d9      	mvns	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	4313      	orrs	r3, r2
         );
}
 800293e:	4618      	mov	r0, r3
 8002940:	3724      	adds	r7, #36	@ 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff4c 	bl	80027f0 <__NVIC_SetPriorityGrouping>
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002972:	f7ff ff61 	bl	8002838 <__NVIC_GetPriorityGrouping>
 8002976:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	6978      	ldr	r0, [r7, #20]
 800297e:	f7ff ffb1 	bl	80028e4 <NVIC_EncodePriority>
 8002982:	4602      	mov	r2, r0
 8002984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff80 	bl	8002890 <__NVIC_SetPriority>
}
 8002990:	bf00      	nop
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff54 	bl	8002854 <__NVIC_EnableIRQ>
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d008      	beq.n	80029de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2204      	movs	r2, #4
 80029d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e022      	b.n	8002a24 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 020e 	bic.w	r2, r2, #14
 80029ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f003 021c 	and.w	r2, r3, #28
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a10:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d005      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e029      	b.n	8002aa8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 020e 	bic.w	r2, r2, #14
 8002a62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a78:	f003 021c 	and.w	r2, r3, #28
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
    }
  }
  return status;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	e154      	b.n	8002d6e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8146 	beq.w	8002d68 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d005      	beq.n	8002af4 <HAL_GPIO_Init+0x40>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d130      	bne.n	8002b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 0201 	and.w	r2, r3, #1
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d017      	beq.n	8002b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d123      	bne.n	8002be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	08da      	lsrs	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	6939      	ldr	r1, [r7, #16]
 8002be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0203 	and.w	r2, r3, #3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80a0 	beq.w	8002d68 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c28:	4b58      	ldr	r3, [pc, #352]	@ (8002d8c <HAL_GPIO_Init+0x2d8>)
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2c:	4a57      	ldr	r2, [pc, #348]	@ (8002d8c <HAL_GPIO_Init+0x2d8>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c34:	4b55      	ldr	r3, [pc, #340]	@ (8002d8c <HAL_GPIO_Init+0x2d8>)
 8002c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c40:	4a53      	ldr	r2, [pc, #332]	@ (8002d90 <HAL_GPIO_Init+0x2dc>)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	3302      	adds	r3, #2
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	220f      	movs	r2, #15
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c6a:	d019      	beq.n	8002ca0 <HAL_GPIO_Init+0x1ec>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a49      	ldr	r2, [pc, #292]	@ (8002d94 <HAL_GPIO_Init+0x2e0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_GPIO_Init+0x1e8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a48      	ldr	r2, [pc, #288]	@ (8002d98 <HAL_GPIO_Init+0x2e4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00d      	beq.n	8002c98 <HAL_GPIO_Init+0x1e4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a47      	ldr	r2, [pc, #284]	@ (8002d9c <HAL_GPIO_Init+0x2e8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <HAL_GPIO_Init+0x1e0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a46      	ldr	r2, [pc, #280]	@ (8002da0 <HAL_GPIO_Init+0x2ec>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_GPIO_Init+0x1dc>
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	e008      	b.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002c90:	2307      	movs	r3, #7
 8002c92:	e006      	b.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002c94:	2303      	movs	r3, #3
 8002c96:	e004      	b.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e002      	b.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	f002 0203 	and.w	r2, r2, #3
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	4093      	lsls	r3, r2
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cb2:	4937      	ldr	r1, [pc, #220]	@ (8002d90 <HAL_GPIO_Init+0x2dc>)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cc0:	4b38      	ldr	r3, [pc, #224]	@ (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cea:	4b2e      	ldr	r3, [pc, #184]	@ (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d0e:	4a25      	ldr	r2, [pc, #148]	@ (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d14:	4b23      	ldr	r3, [pc, #140]	@ (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d38:	4a1a      	ldr	r2, [pc, #104]	@ (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d3e:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d62:	4a10      	ldr	r2, [pc, #64]	@ (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f47f aea3 	bne.w	8002ac4 <HAL_GPIO_Init+0x10>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40010000 	.word	0x40010000
 8002d94:	48000400 	.word	0x48000400
 8002d98:	48000800 	.word	0x48000800
 8002d9c:	48000c00 	.word	0x48000c00
 8002da0:	48001000 	.word	0x48001000
 8002da4:	40010400 	.word	0x40010400

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dc4:	e002      	b.n	8002dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	43d9      	mvns	r1, r3
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	400b      	ands	r3, r1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	619a      	str	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e16:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e22:	4a05      	ldr	r2, [pc, #20]	@ (8002e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fb88 	bl	8000540 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40010400 	.word	0x40010400

08002e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e08d      	b.n	8002f6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe f896 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	@ 0x24
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d107      	bne.n	8002eb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	e006      	b.n	8002ec4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d108      	bne.n	8002ede <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	e007      	b.n	8002eee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69d9      	ldr	r1, [r3, #28]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d138      	bne.n	8002ffa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e032      	b.n	8002ffc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2224      	movs	r2, #36	@ 0x24
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fc4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b20      	cmp	r3, #32
 800301c:	d139      	bne.n	8003092 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003028:	2302      	movs	r3, #2
 800302a:	e033      	b.n	8003094 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	@ 0x24
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800305a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0ef      	b.n	8003292 <HAL_PCD_Init+0x1f2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe fafa 	bl	80016c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2203      	movs	r2, #3
 80030d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fdb9 	bl	8006c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ee:	f003 fda4 	bl	8006c3a <USB_CoreInit>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0c6      	b.n	8003292 <HAL_PCD_Init+0x1f2>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fdbe 	bl	8006c8c <USB_SetCurrentMode>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0b7      	b.n	8003292 <HAL_PCD_Init+0x1f2>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e03e      	b.n	80031a6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	440b      	add	r3, r1
 8003136:	3311      	adds	r3, #17
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	440b      	add	r3, r1
 800314a:	3310      	adds	r3, #16
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	3313      	adds	r3, #19
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	3320      	adds	r3, #32
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	3324      	adds	r3, #36	@ 0x24
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	3301      	adds	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	791b      	ldrb	r3, [r3, #4]
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d3bb      	bcc.n	8003128 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e044      	b.n	8003240 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	3301      	adds	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	791b      	ldrb	r3, [r3, #4]
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	429a      	cmp	r2, r3
 8003248:	d3b5      	bcc.n	80031b6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003254:	f003 fd27 	bl	8006ca6 <USB_DevInit>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e013      	b.n	8003292 <HAL_PCD_Init+0x1f2>
  }

  hpcd->USB_Address = 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7adb      	ldrb	r3, [r3, #11]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d102      	bne.n	8003286 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f80a 	bl	800329a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fd29 	bl	8006ce2 <USB_DevDisconnect>

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a04      	ldr	r2, [pc, #16]	@ (800330c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40007000 	.word	0x40007000

08003310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <HAL_PWREx_GetVoltageRange+0x18>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000

0800332c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800333a:	d130      	bne.n	800339e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800333c:	4b23      	ldr	r3, [pc, #140]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003348:	d038      	beq.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800334a:	4b20      	ldr	r3, [pc, #128]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003352:	4a1e      	ldr	r2, [pc, #120]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003354:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800335a:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2232      	movs	r2, #50	@ 0x32
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	4a1b      	ldr	r2, [pc, #108]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0c9b      	lsrs	r3, r3, #18
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003370:	e002      	b.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3b01      	subs	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003378:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003384:	d102      	bne.n	800338c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f2      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003398:	d110      	bne.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00f      	b.n	80033be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033aa:	d007      	beq.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033ac:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033b4:	4a05      	ldr	r2, [pc, #20]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40007000 	.word	0x40007000
 80033d0:	20000000 	.word	0x20000000
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033e6:	6053      	str	r3, [r2, #4]
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40007000 	.word	0x40007000

080033f8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7fe fae4 	bl	80019cc <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e069      	b.n	80034e4 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10b      	bne.n	8003434 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7fd fe13 	bl	8001050 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800342a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f85e 	bl	80034f0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	3b01      	subs	r3, #1
 8003444:	021a      	lsls	r2, r3, #8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	2120      	movs	r1, #32
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f856 	bl	800350c <QSPI_WaitFlagStateUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003464:	7afb      	ldrb	r3, [r7, #11]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d137      	bne.n	80034da <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003474:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6852      	ldr	r2, [r2, #4]
 800347c:	0611      	lsls	r1, r2, #24
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68d2      	ldr	r2, [r2, #12]
 8003482:	4311      	orrs	r1, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	69d2      	ldr	r2, [r2, #28]
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6a12      	ldr	r2, [r2, #32]
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	430b      	orrs	r3, r1
 8003496:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	4b13      	ldr	r3, [pc, #76]	@ (80034ec <HAL_QSPI_Init+0xf4>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6912      	ldr	r2, [r2, #16]
 80034a6:	0411      	lsls	r1, r2, #16
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6952      	ldr	r2, [r2, #20]
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6992      	ldr	r2, [r2, #24]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80034e2:	7afb      	ldrb	r3, [r7, #11]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	ffe0f8fe 	.word	0xffe0f8fe

080034f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800351c:	e01a      	b.n	8003554 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d016      	beq.n	8003554 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fa51 	bl	80019cc <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2204      	movs	r2, #4
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e00e      	b.n	8003572 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d1d6      	bne.n	800351e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f000 bc02 	b.w	8003d94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003590:	4b96      	ldr	r3, [pc, #600]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800359a:	4b94      	ldr	r3, [pc, #592]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80e4 	beq.w	800377a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4c>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	f040 808b 	bne.w	80036d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	f040 8087 	bne.w	80036d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035c8:	4b88      	ldr	r3, [pc, #544]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_OscConfig+0x64>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e3d9      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	4b81      	ldr	r3, [pc, #516]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <HAL_RCC_OscConfig+0x7e>
 80035f0:	4b7e      	ldr	r3, [pc, #504]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035f8:	e005      	b.n	8003606 <HAL_RCC_OscConfig+0x8a>
 80035fa:	4b7c      	ldr	r3, [pc, #496]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003606:	4293      	cmp	r3, r2
 8003608:	d223      	bcs.n	8003652 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fdf2 	bl	80041f8 <RCC_SetFlashLatencyFromMSIRange>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e3ba      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800361e:	4b73      	ldr	r3, [pc, #460]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a72      	ldr	r2, [pc, #456]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003624:	f043 0308 	orr.w	r3, r3, #8
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b70      	ldr	r3, [pc, #448]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	496d      	ldr	r1, [pc, #436]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800363c:	4b6b      	ldr	r3, [pc, #428]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	4968      	ldr	r1, [pc, #416]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
 8003650:	e025      	b.n	800369e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003652:	4b66      	ldr	r3, [pc, #408]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a65      	ldr	r2, [pc, #404]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003658:	f043 0308 	orr.w	r3, r3, #8
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b63      	ldr	r3, [pc, #396]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4960      	ldr	r1, [pc, #384]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003670:	4b5e      	ldr	r3, [pc, #376]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	495b      	ldr	r1, [pc, #364]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fdb2 	bl	80041f8 <RCC_SetFlashLatencyFromMSIRange>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e37a      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800369e:	f000 fcb5 	bl	800400c <HAL_RCC_GetSysClockFreq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b51      	ldr	r3, [pc, #324]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	4950      	ldr	r1, [pc, #320]	@ (80037f0 <HAL_RCC_OscConfig+0x274>)
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ba:	4a4e      	ldr	r2, [pc, #312]	@ (80037f4 <HAL_RCC_OscConfig+0x278>)
 80036bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036be:	4b4e      	ldr	r3, [pc, #312]	@ (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe f85c 	bl	8001780 <HAL_InitTick>
 80036c8:	4603      	mov	r3, r0
 80036ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d052      	beq.n	8003778 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	e35e      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d032      	beq.n	8003744 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036de:	4b43      	ldr	r3, [pc, #268]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a42      	ldr	r2, [pc, #264]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ea:	f7fe f96f 	bl	80019cc <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036f2:	f7fe f96b 	bl	80019cc <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e347      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003704:	4b39      	ldr	r3, [pc, #228]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003710:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a35      	ldr	r2, [pc, #212]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b33      	ldr	r3, [pc, #204]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4930      	ldr	r1, [pc, #192]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800372e:	4b2f      	ldr	r3, [pc, #188]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	492b      	ldr	r1, [pc, #172]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
 8003742:	e01a      	b.n	800377a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003744:	4b29      	ldr	r3, [pc, #164]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a28      	ldr	r2, [pc, #160]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003750:	f7fe f93c 	bl	80019cc <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003758:	f7fe f938 	bl	80019cc <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e314      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800376a:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x1dc>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d073      	beq.n	800386e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d005      	beq.n	8003798 <HAL_RCC_OscConfig+0x21c>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d10e      	bne.n	80037b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d10b      	bne.n	80037b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	4b14      	ldr	r3, [pc, #80]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d063      	beq.n	800386c <HAL_RCC_OscConfig+0x2f0>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d15f      	bne.n	800386c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e2f1      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b8:	d106      	bne.n	80037c8 <HAL_RCC_OscConfig+0x24c>
 80037ba:	4b0c      	ldr	r3, [pc, #48]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a0b      	ldr	r2, [pc, #44]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e025      	b.n	8003814 <HAL_RCC_OscConfig+0x298>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d0:	d114      	bne.n	80037fc <HAL_RCC_OscConfig+0x280>
 80037d2:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a05      	ldr	r2, [pc, #20]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80037d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b03      	ldr	r3, [pc, #12]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a02      	ldr	r2, [pc, #8]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e013      	b.n	8003814 <HAL_RCC_OscConfig+0x298>
 80037ec:	40021000 	.word	0x40021000
 80037f0:	08008260 	.word	0x08008260
 80037f4:	20000000 	.word	0x20000000
 80037f8:	20000004 	.word	0x20000004
 80037fc:	4ba0      	ldr	r3, [pc, #640]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a9f      	ldr	r2, [pc, #636]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b9d      	ldr	r3, [pc, #628]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a9c      	ldr	r2, [pc, #624]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 800380e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fe f8d6 	bl	80019cc <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003824:	f7fe f8d2 	bl	80019cc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	@ 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e2ae      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003836:	4b92      	ldr	r3, [pc, #584]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x2a8>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fe f8c2 	bl	80019cc <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe f8be 	bl	80019cc <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	@ 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e29a      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800385e:	4b88      	ldr	r3, [pc, #544]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x2d0>
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d060      	beq.n	800393c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d005      	beq.n	800388c <HAL_RCC_OscConfig+0x310>
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d119      	bne.n	80038ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d116      	bne.n	80038ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800388c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_OscConfig+0x328>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e277      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a4:	4b76      	ldr	r3, [pc, #472]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	4973      	ldr	r1, [pc, #460]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b8:	e040      	b.n	800393c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d023      	beq.n	800390a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe f87d 	bl	80019cc <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fe f879 	bl	80019cc <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e255      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e8:	4b65      	ldr	r3, [pc, #404]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f4:	4b62      	ldr	r3, [pc, #392]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	495f      	ldr	r1, [pc, #380]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
 8003908:	e018      	b.n	800393c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800390a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5c      	ldr	r2, [pc, #368]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003916:	f7fe f859 	bl	80019cc <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391e:	f7fe f855 	bl	80019cc <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e231      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003930:	4b53      	ldr	r3, [pc, #332]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d03c      	beq.n	80039c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01c      	beq.n	800398a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003950:	4b4b      	ldr	r3, [pc, #300]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003956:	4a4a      	ldr	r2, [pc, #296]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fe f834 	bl	80019cc <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003968:	f7fe f830 	bl	80019cc <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e20c      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800397a:	4b41      	ldr	r3, [pc, #260]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 800397c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ef      	beq.n	8003968 <HAL_RCC_OscConfig+0x3ec>
 8003988:	e01b      	b.n	80039c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 800398c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003990:	4a3b      	ldr	r2, [pc, #236]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fe f817 	bl	80019cc <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a2:	f7fe f813 	bl	80019cc <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e1ef      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b4:	4b32      	ldr	r3, [pc, #200]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80039b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ef      	bne.n	80039a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80a6 	beq.w	8003b1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d0:	2300      	movs	r3, #0
 80039d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b27      	ldr	r3, [pc, #156]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	4a26      	ldr	r2, [pc, #152]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ec:	4b24      	ldr	r3, [pc, #144]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fc:	4b21      	ldr	r3, [pc, #132]	@ (8003a84 <HAL_RCC_OscConfig+0x508>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d118      	bne.n	8003a3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a08:	4b1e      	ldr	r3, [pc, #120]	@ (8003a84 <HAL_RCC_OscConfig+0x508>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <HAL_RCC_OscConfig+0x508>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a14:	f7fd ffda 	bl	80019cc <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fd ffd6 	bl	80019cc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1b2      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2e:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <HAL_RCC_OscConfig+0x508>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d108      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4d8>
 8003a42:	4b0f      	ldr	r3, [pc, #60]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a48:	4a0d      	ldr	r2, [pc, #52]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a52:	e029      	b.n	8003aa8 <HAL_RCC_OscConfig+0x52c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d115      	bne.n	8003a88 <HAL_RCC_OscConfig+0x50c>
 8003a5c:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	4a07      	ldr	r2, [pc, #28]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003a64:	f043 0304 	orr.w	r3, r3, #4
 8003a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a6c:	4b04      	ldr	r3, [pc, #16]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	4a03      	ldr	r2, [pc, #12]	@ (8003a80 <HAL_RCC_OscConfig+0x504>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a7c:	e014      	b.n	8003aa8 <HAL_RCC_OscConfig+0x52c>
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40007000 	.word	0x40007000
 8003a88:	4b9a      	ldr	r3, [pc, #616]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	4a99      	ldr	r2, [pc, #612]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a98:	4b96      	ldr	r3, [pc, #600]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	4a95      	ldr	r2, [pc, #596]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003aa0:	f023 0304 	bic.w	r3, r3, #4
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d016      	beq.n	8003ade <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7fd ff8c 	bl	80019cc <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fd ff88 	bl	80019cc <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e162      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ace:	4b89      	ldr	r3, [pc, #548]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ed      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x53c>
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fd ff75 	bl	80019cc <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd ff71 	bl	80019cc <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e14b      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003afc:	4b7d      	ldr	r3, [pc, #500]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1ed      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0a:	7ffb      	ldrb	r3, [r7, #31]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b10:	4b78      	ldr	r3, [pc, #480]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b14:	4a77      	ldr	r2, [pc, #476]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d03c      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01c      	beq.n	8003b6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b30:	4b70      	ldr	r3, [pc, #448]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b36:	4a6f      	ldr	r2, [pc, #444]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd ff44 	bl	80019cc <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b48:	f7fd ff40 	bl	80019cc <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e11c      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b5a:	4b66      	ldr	r3, [pc, #408]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ef      	beq.n	8003b48 <HAL_RCC_OscConfig+0x5cc>
 8003b68:	e01b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b6a:	4b62      	ldr	r3, [pc, #392]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b70:	4a60      	ldr	r2, [pc, #384]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fd ff27 	bl	80019cc <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b82:	f7fd ff23 	bl	80019cc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0ff      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b94:	4b57      	ldr	r3, [pc, #348]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ef      	bne.n	8003b82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80f3 	beq.w	8003d92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	f040 80c9 	bne.w	8003d48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bb6:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0203 	and.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d12c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d123      	bne.n	8003c24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d11b      	bne.n	8003c24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d113      	bne.n	8003c24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d109      	bne.n	8003c24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d06b      	beq.n	8003cfc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b0c      	cmp	r3, #12
 8003c28:	d062      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c2a:	4b32      	ldr	r3, [pc, #200]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0ac      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003c40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c46:	f7fd fec1 	bl	80019cc <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fd febd 	bl	80019cc <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e099      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c60:	4b24      	ldr	r3, [pc, #144]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c6c:	4b21      	ldr	r3, [pc, #132]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c7c:	3a01      	subs	r2, #1
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	4311      	orrs	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c86:	0212      	lsls	r2, r2, #8
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c8e:	0852      	lsrs	r2, r2, #1
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0552      	lsls	r2, r2, #21
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c9a:	0852      	lsrs	r2, r2, #1
 8003c9c:	3a01      	subs	r2, #1
 8003c9e:	0652      	lsls	r2, r2, #25
 8003ca0:	4311      	orrs	r1, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ca6:	06d2      	lsls	r2, r2, #27
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	4912      	ldr	r1, [pc, #72]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cb0:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cc8:	f7fd fe80 	bl	80019cc <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fd fe7c 	bl	80019cc <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e058      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce2:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <HAL_RCC_OscConfig+0x778>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cee:	e050      	b.n	8003d92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e04f      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfc:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d144      	bne.n	8003d92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d08:	4b24      	ldr	r3, [pc, #144]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a23      	ldr	r2, [pc, #140]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d14:	4b21      	ldr	r3, [pc, #132]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a20      	ldr	r2, [pc, #128]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d20:	f7fd fe54 	bl	80019cc <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fd fe50 	bl	80019cc <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e02c      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3a:	4b18      	ldr	r3, [pc, #96]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x7ac>
 8003d46:	e024      	b.n	8003d92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	d01f      	beq.n	8003d8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	4b13      	ldr	r3, [pc, #76]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a12      	ldr	r2, [pc, #72]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fe37 	bl	80019cc <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fd fe33 	bl	80019cc <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e00f      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d74:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d80:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	4905      	ldr	r1, [pc, #20]	@ (8003d9c <HAL_RCC_OscConfig+0x820>)
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_RCC_OscConfig+0x824>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60cb      	str	r3, [r1, #12]
 8003d8c:	e001      	b.n	8003d92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	feeefffc 	.word	0xfeeefffc

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0e7      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b75      	ldr	r3, [pc, #468]	@ (8003f90 <HAL_RCC_ClockConfig+0x1ec>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d910      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b72      	ldr	r3, [pc, #456]	@ (8003f90 <HAL_RCC_ClockConfig+0x1ec>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 0207 	bic.w	r2, r3, #7
 8003dce:	4970      	ldr	r1, [pc, #448]	@ (8003f90 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8003f90 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0cf      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d010      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	4b66      	ldr	r3, [pc, #408]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d908      	bls.n	8003e16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e04:	4b63      	ldr	r3, [pc, #396]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4960      	ldr	r1, [pc, #384]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d04c      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d121      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0a6      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e42:	4b54      	ldr	r3, [pc, #336]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d115      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e09a      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e08e      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e086      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b46      	ldr	r3, [pc, #280]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4943      	ldr	r1, [pc, #268]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8c:	f7fd fd9e 	bl	80019cc <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fd fd9a 	bl	80019cc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e06e      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d010      	beq.n	8003eea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	4b31      	ldr	r3, [pc, #196]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d208      	bcs.n	8003eea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	492b      	ldr	r1, [pc, #172]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eea:	4b29      	ldr	r3, [pc, #164]	@ (8003f90 <HAL_RCC_ClockConfig+0x1ec>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d210      	bcs.n	8003f1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef8:	4b25      	ldr	r3, [pc, #148]	@ (8003f90 <HAL_RCC_ClockConfig+0x1ec>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f023 0207 	bic.w	r2, r3, #7
 8003f00:	4923      	ldr	r1, [pc, #140]	@ (8003f90 <HAL_RCC_ClockConfig+0x1ec>)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f08:	4b21      	ldr	r3, [pc, #132]	@ (8003f90 <HAL_RCC_ClockConfig+0x1ec>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d001      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e036      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f26:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	4918      	ldr	r1, [pc, #96]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f44:	4b13      	ldr	r3, [pc, #76]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4910      	ldr	r1, [pc, #64]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f58:	f000 f858 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	490b      	ldr	r1, [pc, #44]	@ (8003f98 <HAL_RCC_ClockConfig+0x1f4>)
 8003f6a:	5ccb      	ldrb	r3, [r1, r3]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	4a09      	ldr	r2, [pc, #36]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003f76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f78:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1fc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fd fbff 	bl	8001780 <HAL_InitTick>
 8003f82:	4603      	mov	r3, r0
 8003f84:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f86:	7afb      	ldrb	r3, [r7, #11]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40022000 	.word	0x40022000
 8003f94:	40021000 	.word	0x40021000
 8003f98:	08008260 	.word	0x08008260
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	20000004 	.word	0x20000004

08003fa4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	@ 0x28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8003fb0:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <HAL_RCC_MCOConfig+0x64>)
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb4:	4a14      	ldr	r2, [pc, #80]	@ (8004008 <HAL_RCC_MCOConfig+0x64>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fbc:	4b12      	ldr	r3, [pc, #72]	@ (8004008 <HAL_RCC_MCOConfig+0x64>)
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8003fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fe8:	f7fe fd64 	bl	8002ab4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8003fec:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <HAL_RCC_MCOConfig+0x64>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	4903      	ldr	r1, [pc, #12]	@ (8004008 <HAL_RCC_MCOConfig+0x64>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]
}
 8004000:	bf00      	nop
 8004002:	3728      	adds	r7, #40	@ 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000

0800400c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	@ 0x24
 8004010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401a:	4b3e      	ldr	r3, [pc, #248]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004024:	4b3b      	ldr	r3, [pc, #236]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x34>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d121      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11e      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004040:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800404c:	4b31      	ldr	r3, [pc, #196]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e005      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800405c:	4b2d      	ldr	r3, [pc, #180]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004068:	4a2b      	ldr	r2, [pc, #172]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x10c>)
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004070:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10d      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d102      	bne.n	800408a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004084:	4b25      	ldr	r3, [pc, #148]	@ (800411c <HAL_RCC_GetSysClockFreq+0x110>)
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	e004      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d101      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004090:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x114>)
 8004092:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d134      	bne.n	8004104 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800409a:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0xac>
 80040b0:	e005      	b.n	80040be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040b2:	4b1a      	ldr	r3, [pc, #104]	@ (800411c <HAL_RCC_GetSysClockFreq+0x110>)
 80040b4:	617b      	str	r3, [r7, #20]
      break;
 80040b6:	e005      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040b8:	4b19      	ldr	r3, [pc, #100]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x114>)
 80040ba:	617b      	str	r3, [r7, #20]
      break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	617b      	str	r3, [r7, #20]
      break;
 80040c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040c4:	4b13      	ldr	r3, [pc, #76]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	3301      	adds	r3, #1
 80040d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040d2:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	fb03 f202 	mul.w	r2, r3, r2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	0e5b      	lsrs	r3, r3, #25
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	3301      	adds	r3, #1
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004104:	69bb      	ldr	r3, [r7, #24]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	@ 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	08008278 	.word	0x08008278
 800411c:	00f42400 	.word	0x00f42400
 8004120:	007a1200 	.word	0x007a1200

08004124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004128:	4b03      	ldr	r3, [pc, #12]	@ (8004138 <HAL_RCC_GetHCLKFreq+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000000 	.word	0x20000000

0800413c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004140:	f7ff fff0 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4904      	ldr	r1, [pc, #16]	@ (8004164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	08008270 	.word	0x08008270

08004168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800416c:	f7ff ffda 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b06      	ldr	r3, [pc, #24]	@ (800418c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0adb      	lsrs	r3, r3, #11
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4904      	ldr	r1, [pc, #16]	@ (8004190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	08008270 	.word	0x08008270

08004194 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	220f      	movs	r2, #15
 80041a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80041a4:	4b12      	ldr	r3, [pc, #72]	@ (80041f0 <HAL_RCC_GetClockConfig+0x5c>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0203 	and.w	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80041b0:	4b0f      	ldr	r3, [pc, #60]	@ (80041f0 <HAL_RCC_GetClockConfig+0x5c>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80041bc:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <HAL_RCC_GetClockConfig+0x5c>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80041c8:	4b09      	ldr	r3, [pc, #36]	@ (80041f0 <HAL_RCC_GetClockConfig+0x5c>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	08db      	lsrs	r3, r3, #3
 80041ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041d6:	4b07      	ldr	r3, [pc, #28]	@ (80041f4 <HAL_RCC_GetClockConfig+0x60>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0207 	and.w	r2, r3, #7
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	601a      	str	r2, [r3, #0]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40022000 	.word	0x40022000

080041f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004204:	4b2a      	ldr	r3, [pc, #168]	@ (80042b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004210:	f7ff f87e 	bl	8003310 <HAL_PWREx_GetVoltageRange>
 8004214:	6178      	str	r0, [r7, #20]
 8004216:	e014      	b.n	8004242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004218:	4b25      	ldr	r3, [pc, #148]	@ (80042b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800421a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421c:	4a24      	ldr	r2, [pc, #144]	@ (80042b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004222:	6593      	str	r3, [r2, #88]	@ 0x58
 8004224:	4b22      	ldr	r3, [pc, #136]	@ (80042b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004230:	f7ff f86e 	bl	8003310 <HAL_PWREx_GetVoltageRange>
 8004234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004236:	4b1e      	ldr	r3, [pc, #120]	@ (80042b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	4a1d      	ldr	r2, [pc, #116]	@ (80042b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004240:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004248:	d10b      	bne.n	8004262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b80      	cmp	r3, #128	@ 0x80
 800424e:	d919      	bls.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2ba0      	cmp	r3, #160	@ 0xa0
 8004254:	d902      	bls.n	800425c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004256:	2302      	movs	r3, #2
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e013      	b.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800425c:	2301      	movs	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	e010      	b.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b80      	cmp	r3, #128	@ 0x80
 8004266:	d902      	bls.n	800426e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004268:	2303      	movs	r3, #3
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	e00a      	b.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b80      	cmp	r3, #128	@ 0x80
 8004272:	d102      	bne.n	800427a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004274:	2302      	movs	r3, #2
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	e004      	b.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b70      	cmp	r3, #112	@ 0x70
 800427e:	d101      	bne.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004280:	2301      	movs	r3, #1
 8004282:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004284:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 0207 	bic.w	r2, r3, #7
 800428c:	4909      	ldr	r1, [pc, #36]	@ (80042b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004294:	4b07      	ldr	r3, [pc, #28]	@ (80042b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d001      	beq.n	80042a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40022000 	.word	0x40022000

080042b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042c0:	2300      	movs	r3, #0
 80042c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042c4:	2300      	movs	r3, #0
 80042c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d031      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042dc:	d01a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80042de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042e2:	d814      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042ec:	d10f      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80042ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042fa:	e00c      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fa54 	bl	80047b0 <RCCEx_PLLSAI1_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800430c:	e003      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	74fb      	strb	r3, [r7, #19]
      break;
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004316:	7cfb      	ldrb	r3, [r7, #19]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10b      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800431c:	4b51      	ldr	r3, [pc, #324]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432a:	494e      	ldr	r1, [pc, #312]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004332:	e001      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 809e 	beq.w	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004346:	2300      	movs	r3, #0
 8004348:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800434a:	4b46      	ldr	r3, [pc, #280]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00d      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004360:	4b40      	ldr	r3, [pc, #256]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	4a3f      	ldr	r2, [pc, #252]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800436a:	6593      	str	r3, [r2, #88]	@ 0x58
 800436c:	4b3d      	ldr	r3, [pc, #244]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004378:	2301      	movs	r3, #1
 800437a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800437c:	4b3a      	ldr	r3, [pc, #232]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a39      	ldr	r2, [pc, #228]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004386:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004388:	f7fd fb20 	bl	80019cc <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800438e:	e009      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004390:	f7fd fb1c 	bl	80019cc <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d902      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	74fb      	strb	r3, [r7, #19]
        break;
 80043a2:	e005      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043a4:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ef      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d15a      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01e      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d019      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043d2:	4b24      	ldr	r3, [pc, #144]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043de:	4b21      	ldr	r3, [pc, #132]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043fe:	4a19      	ldr	r2, [pc, #100]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d016      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd fadc 	bl	80019cc <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004416:	e00b      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004418:	f7fd fad8 	bl	80019cc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d902      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	74fb      	strb	r3, [r7, #19]
            break;
 800442e:	e006      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0ec      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004444:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004452:	4904      	ldr	r1, [pc, #16]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800445a:	e009      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	74bb      	strb	r3, [r7, #18]
 8004460:	e006      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004470:	7c7b      	ldrb	r3, [r7, #17]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004476:	4b9e      	ldr	r3, [pc, #632]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447a:	4a9d      	ldr	r2, [pc, #628]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800447c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004480:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800448e:	4b98      	ldr	r3, [pc, #608]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004494:	f023 0203 	bic.w	r2, r3, #3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4994      	ldr	r1, [pc, #592]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044b0:	4b8f      	ldr	r3, [pc, #572]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	f023 020c 	bic.w	r2, r3, #12
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	498c      	ldr	r1, [pc, #560]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044d2:	4b87      	ldr	r3, [pc, #540]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	4983      	ldr	r1, [pc, #524]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044f4:	4b7e      	ldr	r3, [pc, #504]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004502:	497b      	ldr	r1, [pc, #492]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004516:	4b76      	ldr	r3, [pc, #472]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	4972      	ldr	r1, [pc, #456]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004538:	4b6d      	ldr	r3, [pc, #436]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004546:	496a      	ldr	r1, [pc, #424]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800455a:	4b65      	ldr	r3, [pc, #404]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004560:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004568:	4961      	ldr	r1, [pc, #388]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800457c:	4b5c      	ldr	r3, [pc, #368]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004582:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458a:	4959      	ldr	r1, [pc, #356]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800459e:	4b54      	ldr	r3, [pc, #336]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ac:	4950      	ldr	r1, [pc, #320]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045c0:	4b4b      	ldr	r3, [pc, #300]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ce:	4948      	ldr	r1, [pc, #288]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045e2:	4b43      	ldr	r3, [pc, #268]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045e8:	f023 0203 	bic.w	r2, r3, #3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	493f      	ldr	r1, [pc, #252]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d028      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004604:	4b3a      	ldr	r3, [pc, #232]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004612:	4937      	ldr	r1, [pc, #220]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004622:	d106      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004624:	4b32      	ldr	r3, [pc, #200]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a31      	ldr	r2, [pc, #196]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800462a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800462e:	60d3      	str	r3, [r2, #12]
 8004630:	e011      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004636:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800463a:	d10c      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	2101      	movs	r1, #1
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f8b4 	bl	80047b0 <RCCEx_PLLSAI1_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d028      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004662:	4b23      	ldr	r3, [pc, #140]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004668:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004670:	491f      	ldr	r1, [pc, #124]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004680:	d106      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004682:	4b1b      	ldr	r3, [pc, #108]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4a1a      	ldr	r2, [pc, #104]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004688:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800468c:	60d3      	str	r3, [r2, #12]
 800468e:	e011      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 f885 	bl	80047b0 <RCCEx_PLLSAI1_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d02b      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046c0:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ce:	4908      	ldr	r1, [pc, #32]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046de:	d109      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e0:	4b03      	ldr	r3, [pc, #12]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a02      	ldr	r2, [pc, #8]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ea:	60d3      	str	r3, [r2, #12]
 80046ec:	e014      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046fc:	d10c      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	2101      	movs	r1, #1
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f853 	bl	80047b0 <RCCEx_PLLSAI1_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800470e:	7cfb      	ldrb	r3, [r7, #19]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01c      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004724:	4b19      	ldr	r3, [pc, #100]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004732:	4916      	ldr	r1, [pc, #88]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004742:	d10c      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f830 	bl	80047b0 <RCCEx_PLLSAI1_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800476a:	4b08      	ldr	r3, [pc, #32]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004770:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004778:	4904      	ldr	r1, [pc, #16]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004780:	7cbb      	ldrb	r3, [r7, #18]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000

08004790 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004794:	4b05      	ldr	r3, [pc, #20]	@ (80047ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a04      	ldr	r2, [pc, #16]	@ (80047ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800479a:	f043 0304 	orr.w	r3, r3, #4
 800479e:	6013      	str	r3, [r2, #0]
}
 80047a0:	bf00      	nop
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000

080047b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047be:	4b74      	ldr	r3, [pc, #464]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d018      	beq.n	80047fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047ca:	4b71      	ldr	r3, [pc, #452]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0203 	and.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d10d      	bne.n	80047f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
       ||
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047e2:	4b6b      	ldr	r3, [pc, #428]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
       ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d047      	beq.n	8004886 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
 80047fa:	e044      	b.n	8004886 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d018      	beq.n	8004836 <RCCEx_PLLSAI1_Config+0x86>
 8004804:	2b03      	cmp	r3, #3
 8004806:	d825      	bhi.n	8004854 <RCCEx_PLLSAI1_Config+0xa4>
 8004808:	2b01      	cmp	r3, #1
 800480a:	d002      	beq.n	8004812 <RCCEx_PLLSAI1_Config+0x62>
 800480c:	2b02      	cmp	r3, #2
 800480e:	d009      	beq.n	8004824 <RCCEx_PLLSAI1_Config+0x74>
 8004810:	e020      	b.n	8004854 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004812:	4b5f      	ldr	r3, [pc, #380]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d11d      	bne.n	800485a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004822:	e01a      	b.n	800485a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004824:	4b5a      	ldr	r3, [pc, #360]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482c:	2b00      	cmp	r3, #0
 800482e:	d116      	bne.n	800485e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004834:	e013      	b.n	800485e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004836:	4b56      	ldr	r3, [pc, #344]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10f      	bne.n	8004862 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004842:	4b53      	ldr	r3, [pc, #332]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004852:	e006      	b.n	8004862 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      break;
 8004858:	e004      	b.n	8004864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800485a:	bf00      	nop
 800485c:	e002      	b.n	8004864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800485e:	bf00      	nop
 8004860:	e000      	b.n	8004864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004862:	bf00      	nop
    }

    if(status == HAL_OK)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10d      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800486a:	4b49      	ldr	r3, [pc, #292]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	3b01      	subs	r3, #1
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	430b      	orrs	r3, r1
 8004880:	4943      	ldr	r1, [pc, #268]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004882:	4313      	orrs	r3, r2
 8004884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d17c      	bne.n	8004986 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800488c:	4b40      	ldr	r3, [pc, #256]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a3f      	ldr	r2, [pc, #252]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004892:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004898:	f7fd f898 	bl	80019cc <HAL_GetTick>
 800489c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800489e:	e009      	b.n	80048b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a0:	f7fd f894 	bl	80019cc <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d902      	bls.n	80048b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	73fb      	strb	r3, [r7, #15]
        break;
 80048b2:	e005      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048b4:	4b36      	ldr	r3, [pc, #216]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1ef      	bne.n	80048a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d15f      	bne.n	8004986 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d110      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048cc:	4b30      	ldr	r3, [pc, #192]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80048d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6892      	ldr	r2, [r2, #8]
 80048dc:	0211      	lsls	r1, r2, #8
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68d2      	ldr	r2, [r2, #12]
 80048e2:	06d2      	lsls	r2, r2, #27
 80048e4:	430a      	orrs	r2, r1
 80048e6:	492a      	ldr	r1, [pc, #168]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	610b      	str	r3, [r1, #16]
 80048ec:	e027      	b.n	800493e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d112      	bne.n	800491a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048f4:	4b26      	ldr	r3, [pc, #152]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80048fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6892      	ldr	r2, [r2, #8]
 8004904:	0211      	lsls	r1, r2, #8
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6912      	ldr	r2, [r2, #16]
 800490a:	0852      	lsrs	r2, r2, #1
 800490c:	3a01      	subs	r2, #1
 800490e:	0552      	lsls	r2, r2, #21
 8004910:	430a      	orrs	r2, r1
 8004912:	491f      	ldr	r1, [pc, #124]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004914:	4313      	orrs	r3, r2
 8004916:	610b      	str	r3, [r1, #16]
 8004918:	e011      	b.n	800493e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800491a:	4b1d      	ldr	r3, [pc, #116]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004922:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6892      	ldr	r2, [r2, #8]
 800492a:	0211      	lsls	r1, r2, #8
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6952      	ldr	r2, [r2, #20]
 8004930:	0852      	lsrs	r2, r2, #1
 8004932:	3a01      	subs	r2, #1
 8004934:	0652      	lsls	r2, r2, #25
 8004936:	430a      	orrs	r2, r1
 8004938:	4915      	ldr	r1, [pc, #84]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 800493a:	4313      	orrs	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800493e:	4b14      	ldr	r3, [pc, #80]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a13      	ldr	r2, [pc, #76]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004944:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004948:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fd f83f 	bl	80019cc <HAL_GetTick>
 800494e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004950:	e009      	b.n	8004966 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004952:	f7fd f83b 	bl	80019cc <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d902      	bls.n	8004966 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	73fb      	strb	r3, [r7, #15]
          break;
 8004964:	e005      	b.n	8004972 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004966:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ef      	beq.n	8004952 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	4903      	ldr	r1, [pc, #12]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000

08004994 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e049      	b.n	8004a3a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	795b      	ldrb	r3, [r3, #5]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fbac 	bl	8001114 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0204 	orr.w	r2, r2, #4
 80049d0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049dc:	2b40      	cmp	r3, #64	@ 0x40
 80049de:	d104      	bne.n	80049ea <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2204      	movs	r2, #4
 80049e4:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e027      	b.n	8004a3a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80049ea:	f7fc ffef 	bl	80019cc <HAL_GetTick>
 80049ee:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80049f0:	e015      	b.n	8004a1e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80049f2:	f7fc ffeb 	bl	80019cc <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d90e      	bls.n	8004a1e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d007      	beq.n	8004a1e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2204      	movs	r2, #4
 8004a12:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e00d      	b.n	8004a3a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d1e2      	bne.n	80049f2 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d079      	beq.n	8004b48 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc fb73 	bl	8001154 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d058      	beq.n	8004b36 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	22ca      	movs	r2, #202	@ 0xca
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2253      	movs	r2, #83	@ 0x53
 8004a92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f881 	bl	8004b9c <RTC_EnterInitMode>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d127      	bne.n	8004af4 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ab6:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6899      	ldr	r1, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6919      	ldr	r1, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	041a      	lsls	r2, r3, #16
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f885 	bl	8004c04 <RTC_ExitInitMode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d113      	bne.n	8004b2c <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0203 	bic.w	r2, r2, #3
 8004b12:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	22ff      	movs	r2, #255	@ 0xff
 8004b32:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b34:	e001      	b.n	8004b3a <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a0d      	ldr	r2, [pc, #52]	@ (8004b98 <HAL_RTC_WaitForSynchro+0x44>)
 8004b62:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004b64:	f7fc ff32 	bl	80019cc <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b6a:	e009      	b.n	8004b80 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b6c:	f7fc ff2e 	bl	80019cc <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b7a:	d901      	bls.n	8004b80 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e007      	b.n	8004b90 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ee      	beq.n	8004b6c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	0003ff5f 	.word	0x0003ff5f

08004b9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d120      	bne.n	8004bf8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004bc0:	f7fc ff04 	bl	80019cc <HAL_GetTick>
 8004bc4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004bc6:	e00d      	b.n	8004be4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004bc8:	f7fc ff00 	bl	80019cc <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bd6:	d905      	bls.n	8004be4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2203      	movs	r2, #3
 8004be0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <RTC_EnterInitMode+0x5c>
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d1e7      	bne.n	8004bc8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004c10:	4b1a      	ldr	r3, [pc, #104]	@ (8004c7c <RTC_ExitInitMode+0x78>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4a19      	ldr	r2, [pc, #100]	@ (8004c7c <RTC_ExitInitMode+0x78>)
 8004c16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c1a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004c1c:	4b17      	ldr	r3, [pc, #92]	@ (8004c7c <RTC_ExitInitMode+0x78>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10c      	bne.n	8004c42 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ff93 	bl	8004b54 <HAL_RTC_WaitForSynchro>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01e      	beq.n	8004c72 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2203      	movs	r2, #3
 8004c38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	e017      	b.n	8004c72 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c42:	4b0e      	ldr	r3, [pc, #56]	@ (8004c7c <RTC_ExitInitMode+0x78>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a0d      	ldr	r2, [pc, #52]	@ (8004c7c <RTC_ExitInitMode+0x78>)
 8004c48:	f023 0320 	bic.w	r3, r3, #32
 8004c4c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff ff80 	bl	8004b54 <HAL_RTC_WaitForSynchro>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c66:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <RTC_ExitInitMode+0x78>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	4a04      	ldr	r2, [pc, #16]	@ (8004c7c <RTC_ExitInitMode+0x78>)
 8004c6c:	f043 0320 	orr.w	r3, r3, #32
 8004c70:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40002800 	.word	0x40002800

08004c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e095      	b.n	8004dbe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d108      	bne.n	8004cac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ca2:	d009      	beq.n	8004cb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	61da      	str	r2, [r3, #28]
 8004caa:	e005      	b.n	8004cb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fc fa6e 	bl	80011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cf8:	d902      	bls.n	8004d00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	e002      	b.n	8004d06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d0e:	d007      	beq.n	8004d20 <HAL_SPI_Init+0xa0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d18:	d002      	beq.n	8004d20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d62:	ea42 0103 	orr.w	r1, r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	0c1b      	lsrs	r3, r3, #16
 8004d7c:	f003 0204 	and.w	r2, r3, #4
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d9c:	ea42 0103 	orr.w	r1, r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e049      	b.n	8004e6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f841 	bl	8004e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3304      	adds	r3, #4
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f000 fb35 	bl	8005474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d001      	beq.n	8004ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e040      	b.n	8004f22 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f30 <HAL_TIM_Base_Start_IT+0xa8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x58>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eca:	d009      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x58>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a18      	ldr	r2, [pc, #96]	@ (8004f34 <HAL_TIM_Base_Start_IT+0xac>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x58>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a17      	ldr	r2, [pc, #92]	@ (8004f38 <HAL_TIM_Base_Start_IT+0xb0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d115      	bne.n	8004f0c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	4b15      	ldr	r3, [pc, #84]	@ (8004f3c <HAL_TIM_Base_Start_IT+0xb4>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d015      	beq.n	8004f1e <HAL_TIM_Base_Start_IT+0x96>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef8:	d011      	beq.n	8004f1e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0a:	e008      	b.n	8004f1e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e000      	b.n	8004f20 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40014000 	.word	0x40014000
 8004f3c:	00010007 	.word	0x00010007

08004f40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e049      	b.n	8004fe6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc f9d6 	bl	8001318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f000 fa78 	bl	8005474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d020      	beq.n	8005052 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d01b      	beq.n	8005052 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0202 	mvn.w	r2, #2
 8005022:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f9fd 	bl	8005438 <HAL_TIM_IC_CaptureCallback>
 800503e:	e005      	b.n	800504c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f9ef 	bl	8005424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fa00 	bl	800544c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01b      	beq.n	800509e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f06f 0204 	mvn.w	r2, #4
 800506e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f9d7 	bl	8005438 <HAL_TIM_IC_CaptureCallback>
 800508a:	e005      	b.n	8005098 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f9c9 	bl	8005424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f9da 	bl	800544c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d020      	beq.n	80050ea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01b      	beq.n	80050ea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f06f 0208 	mvn.w	r2, #8
 80050ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2204      	movs	r2, #4
 80050c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f9b1 	bl	8005438 <HAL_TIM_IC_CaptureCallback>
 80050d6:	e005      	b.n	80050e4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f9a3 	bl	8005424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f9b4 	bl	800544c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01b      	beq.n	8005136 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f06f 0210 	mvn.w	r2, #16
 8005106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2208      	movs	r2, #8
 800510c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f98b 	bl	8005438 <HAL_TIM_IC_CaptureCallback>
 8005122:	e005      	b.n	8005130 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f97d 	bl	8005424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f98e 	bl	800544c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f06f 0201 	mvn.w	r2, #1
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7fb fe9d 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fce6 	bl	8005b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fcde 	bl	8005b68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f948 	bl	8005460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0220 	mvn.w	r2, #32
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fca6 	bl	8005b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005216:	2302      	movs	r3, #2
 8005218:	e0ff      	b.n	800541a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b14      	cmp	r3, #20
 8005226:	f200 80f0 	bhi.w	800540a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800522a:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005285 	.word	0x08005285
 8005234:	0800540b 	.word	0x0800540b
 8005238:	0800540b 	.word	0x0800540b
 800523c:	0800540b 	.word	0x0800540b
 8005240:	080052c5 	.word	0x080052c5
 8005244:	0800540b 	.word	0x0800540b
 8005248:	0800540b 	.word	0x0800540b
 800524c:	0800540b 	.word	0x0800540b
 8005250:	08005307 	.word	0x08005307
 8005254:	0800540b 	.word	0x0800540b
 8005258:	0800540b 	.word	0x0800540b
 800525c:	0800540b 	.word	0x0800540b
 8005260:	08005347 	.word	0x08005347
 8005264:	0800540b 	.word	0x0800540b
 8005268:	0800540b 	.word	0x0800540b
 800526c:	0800540b 	.word	0x0800540b
 8005270:	08005389 	.word	0x08005389
 8005274:	0800540b 	.word	0x0800540b
 8005278:	0800540b 	.word	0x0800540b
 800527c:	0800540b 	.word	0x0800540b
 8005280:	080053c9 	.word	0x080053c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f96c 	bl	8005568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0208 	orr.w	r2, r2, #8
 800529e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0204 	bic.w	r2, r2, #4
 80052ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6999      	ldr	r1, [r3, #24]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	619a      	str	r2, [r3, #24]
      break;
 80052c2:	e0a5      	b.n	8005410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f9c8 	bl	8005660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6999      	ldr	r1, [r3, #24]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	021a      	lsls	r2, r3, #8
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	619a      	str	r2, [r3, #24]
      break;
 8005304:	e084      	b.n	8005410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fa21 	bl	8005754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0208 	orr.w	r2, r2, #8
 8005320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0204 	bic.w	r2, r2, #4
 8005330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69d9      	ldr	r1, [r3, #28]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	61da      	str	r2, [r3, #28]
      break;
 8005344:	e064      	b.n	8005410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fa79 	bl	8005844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69d9      	ldr	r1, [r3, #28]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	021a      	lsls	r2, r3, #8
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	61da      	str	r2, [r3, #28]
      break;
 8005386:	e043      	b.n	8005410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fab6 	bl	8005900 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0208 	orr.w	r2, r2, #8
 80053a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0204 	bic.w	r2, r2, #4
 80053b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053c6:	e023      	b.n	8005410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 faee 	bl	80059b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	021a      	lsls	r2, r3, #8
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005408:	e002      	b.n	8005410 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	75fb      	strb	r3, [r7, #23]
      break;
 800540e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop

08005424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a34      	ldr	r2, [pc, #208]	@ (8005558 <TIM_Base_SetConfig+0xe4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_Base_SetConfig+0x28>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005492:	d003      	beq.n	800549c <TIM_Base_SetConfig+0x28>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a31      	ldr	r2, [pc, #196]	@ (800555c <TIM_Base_SetConfig+0xe8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d108      	bne.n	80054ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a29      	ldr	r2, [pc, #164]	@ (8005558 <TIM_Base_SetConfig+0xe4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00f      	beq.n	80054d6 <TIM_Base_SetConfig+0x62>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054bc:	d00b      	beq.n	80054d6 <TIM_Base_SetConfig+0x62>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a26      	ldr	r2, [pc, #152]	@ (800555c <TIM_Base_SetConfig+0xe8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_Base_SetConfig+0x62>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a25      	ldr	r2, [pc, #148]	@ (8005560 <TIM_Base_SetConfig+0xec>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_Base_SetConfig+0x62>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a24      	ldr	r2, [pc, #144]	@ (8005564 <TIM_Base_SetConfig+0xf0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d108      	bne.n	80054e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a12      	ldr	r2, [pc, #72]	@ (8005558 <TIM_Base_SetConfig+0xe4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_Base_SetConfig+0xb0>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a12      	ldr	r2, [pc, #72]	@ (8005560 <TIM_Base_SetConfig+0xec>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_Base_SetConfig+0xb0>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a11      	ldr	r2, [pc, #68]	@ (8005564 <TIM_Base_SetConfig+0xf0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d103      	bne.n	800552c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b01      	cmp	r3, #1
 800553c:	d105      	bne.n	800554a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f023 0201 	bic.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]
  }
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40000400 	.word	0x40000400
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400

08005568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f023 0201 	bic.w	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 0302 	bic.w	r3, r3, #2
 80055b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a24      	ldr	r2, [pc, #144]	@ (8005654 <TIM_OC1_SetConfig+0xec>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <TIM_OC1_SetConfig+0x70>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a23      	ldr	r2, [pc, #140]	@ (8005658 <TIM_OC1_SetConfig+0xf0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_OC1_SetConfig+0x70>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a22      	ldr	r2, [pc, #136]	@ (800565c <TIM_OC1_SetConfig+0xf4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10c      	bne.n	80055f2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0308 	bic.w	r3, r3, #8
 80055de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 0304 	bic.w	r3, r3, #4
 80055f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <TIM_OC1_SetConfig+0xec>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d007      	beq.n	800560a <TIM_OC1_SetConfig+0xa2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a16      	ldr	r2, [pc, #88]	@ (8005658 <TIM_OC1_SetConfig+0xf0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d003      	beq.n	800560a <TIM_OC1_SetConfig+0xa2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a15      	ldr	r2, [pc, #84]	@ (800565c <TIM_OC1_SetConfig+0xf4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d111      	bne.n	800562e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400

08005660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f023 0210 	bic.w	r2, r3, #16
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0320 	bic.w	r3, r3, #32
 80056ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a22      	ldr	r2, [pc, #136]	@ (8005748 <TIM_OC2_SetConfig+0xe8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d10d      	bne.n	80056e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a19      	ldr	r2, [pc, #100]	@ (8005748 <TIM_OC2_SetConfig+0xe8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <TIM_OC2_SetConfig+0x98>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a18      	ldr	r2, [pc, #96]	@ (800574c <TIM_OC2_SetConfig+0xec>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_OC2_SetConfig+0x98>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <TIM_OC2_SetConfig+0xf0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d113      	bne.n	8005720 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400

08005754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a21      	ldr	r2, [pc, #132]	@ (8005838 <TIM_OC3_SetConfig+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10d      	bne.n	80057d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a18      	ldr	r2, [pc, #96]	@ (8005838 <TIM_OC3_SetConfig+0xe4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d007      	beq.n	80057ea <TIM_OC3_SetConfig+0x96>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a17      	ldr	r2, [pc, #92]	@ (800583c <TIM_OC3_SetConfig+0xe8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <TIM_OC3_SetConfig+0x96>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <TIM_OC3_SetConfig+0xec>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d113      	bne.n	8005812 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400

08005844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	031b      	lsls	r3, r3, #12
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a14      	ldr	r2, [pc, #80]	@ (80058f4 <TIM_OC4_SetConfig+0xb0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_OC4_SetConfig+0x74>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a13      	ldr	r2, [pc, #76]	@ (80058f8 <TIM_OC4_SetConfig+0xb4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC4_SetConfig+0x74>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a12      	ldr	r2, [pc, #72]	@ (80058fc <TIM_OC4_SetConfig+0xb8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d109      	bne.n	80058cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	019b      	lsls	r3, r3, #6
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40014000 	.word	0x40014000
 80058fc:	40014400 	.word	0x40014400

08005900 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800592e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005944:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a13      	ldr	r2, [pc, #76]	@ (80059a4 <TIM_OC5_SetConfig+0xa4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <TIM_OC5_SetConfig+0x6a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a12      	ldr	r2, [pc, #72]	@ (80059a8 <TIM_OC5_SetConfig+0xa8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_OC5_SetConfig+0x6a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a11      	ldr	r2, [pc, #68]	@ (80059ac <TIM_OC5_SetConfig+0xac>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d109      	bne.n	800597e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005970:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	621a      	str	r2, [r3, #32]
}
 8005998:	bf00      	nop
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400

080059b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	021b      	lsls	r3, r3, #8
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	051b      	lsls	r3, r3, #20
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a14      	ldr	r2, [pc, #80]	@ (8005a58 <TIM_OC6_SetConfig+0xa8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_OC6_SetConfig+0x6c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a13      	ldr	r2, [pc, #76]	@ (8005a5c <TIM_OC6_SetConfig+0xac>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_OC6_SetConfig+0x6c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a12      	ldr	r2, [pc, #72]	@ (8005a60 <TIM_OC6_SetConfig+0xb0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d109      	bne.n	8005a30 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	029b      	lsls	r3, r3, #10
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400

08005a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e054      	b.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a24      	ldr	r2, [pc, #144]	@ (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d108      	bne.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005aac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a17      	ldr	r2, [pc, #92]	@ (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00e      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae4:	d009      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a13      	ldr	r2, [pc, #76]	@ (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d004      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a11      	ldr	r2, [pc, #68]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d10c      	bne.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40014000 	.word	0x40014000

08005b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e040      	b.n	8005c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fc48 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2224      	movs	r2, #36	@ 0x24
 8005ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fdd4 	bl	8006770 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fb4b 	bl	8006264 <UART_SetConfig>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e01b      	b.n	8005c10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fe53 	bl	80068b4 <UART_CheckIdleState>
 8005c0e:	4603      	mov	r3, r0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b0ba      	sub	sp, #232	@ 0xe8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005c42:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005c46:	4013      	ands	r3, r2
 8005c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d115      	bne.n	8005c80 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00f      	beq.n	8005c80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d009      	beq.n	8005c80 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 82ca 	beq.w	800620a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
      }
      return;
 8005c7e:	e2c4      	b.n	800620a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005c80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8117 	beq.w	8005eb8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c9a:	4b85      	ldr	r3, [pc, #532]	@ (8005eb0 <HAL_UART_IRQHandler+0x298>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 810a 	beq.w	8005eb8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d011      	beq.n	8005cd4 <HAL_UART_IRQHandler+0xbc>
 8005cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cca:	f043 0201 	orr.w	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d011      	beq.n	8005d04 <HAL_UART_IRQHandler+0xec>
 8005ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cfa:	f043 0204 	orr.w	r2, r3, #4
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d011      	beq.n	8005d34 <HAL_UART_IRQHandler+0x11c>
 8005d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2204      	movs	r2, #4
 8005d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d2a:	f043 0202 	orr.w	r2, r3, #2
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d017      	beq.n	8005d70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d66:	f043 0208 	orr.w	r2, r3, #8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d012      	beq.n	8005da2 <HAL_UART_IRQHandler+0x18a>
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00c      	beq.n	8005da2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8230 	beq.w	800620e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dea:	2b40      	cmp	r3, #64	@ 0x40
 8005dec:	d005      	beq.n	8005dfa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005df2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d04f      	beq.n	8005e9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fe6f 	bl	8006ade <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0a:	2b40      	cmp	r3, #64	@ 0x40
 8005e0c:	d141      	bne.n	8005e92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3308      	adds	r3, #8
 8005e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1d9      	bne.n	8005e0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d013      	beq.n	8005e8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e66:	4a13      	ldr	r2, [pc, #76]	@ (8005eb4 <HAL_UART_IRQHandler+0x29c>)
 8005e68:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fc fdde 	bl	8002a30 <HAL_DMA_Abort_IT>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d017      	beq.n	8005eaa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e84:	4610      	mov	r0, r2
 8005e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e88:	e00f      	b.n	8005eaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f9d4 	bl	8006238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e90:	e00b      	b.n	8005eaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9d0 	bl	8006238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e98:	e007      	b.n	8005eaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9cc 	bl	8006238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005ea8:	e1b1      	b.n	800620e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eaa:	bf00      	nop
    return;
 8005eac:	e1af      	b.n	800620e <HAL_UART_IRQHandler+0x5f6>
 8005eae:	bf00      	nop
 8005eb0:	04000120 	.word	0x04000120
 8005eb4:	08006ba7 	.word	0x08006ba7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	f040 816a 	bne.w	8006196 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8163 	beq.w	8006196 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 815c 	beq.w	8006196 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2210      	movs	r2, #16
 8005ee4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef0:	2b40      	cmp	r3, #64	@ 0x40
 8005ef2:	f040 80d4 	bne.w	800609e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80ad 	beq.w	8006066 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f16:	429a      	cmp	r2, r3
 8005f18:	f080 80a5 	bcs.w	8006066 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 8086 	bne.w	8006044 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1da      	bne.n	8005f38 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005fa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e1      	bne.n	8005f82 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e3      	bne.n	8005fbe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006014:	f023 0310 	bic.w	r3, r3, #16
 8006018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006026:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006028:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800602c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e4      	bne.n	8006004 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603e:	4618      	mov	r0, r3
 8006040:	f7fc fcb8 	bl	80029b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006056:	b29b      	uxth	r3, r3
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	b29b      	uxth	r3, r3
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f8f4 	bl	800624c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006064:	e0d5      	b.n	8006212 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800606c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006070:	429a      	cmp	r2, r3
 8006072:	f040 80ce 	bne.w	8006212 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b20      	cmp	r3, #32
 8006084:	f040 80c5 	bne.w	8006212 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f8d8 	bl	800624c <HAL_UARTEx_RxEventCallback>
      return;
 800609c:	e0b9      	b.n	8006212 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80ab 	beq.w	8006216 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80060c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 80a6 	beq.w	8006216 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e4      	bne.n	80060ca <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3308      	adds	r3, #8
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	623b      	str	r3, [r7, #32]
   return(result);
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006124:	633a      	str	r2, [r7, #48]	@ 0x30
 8006126:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800612a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e3      	bne.n	8006100 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	60fb      	str	r3, [r7, #12]
   return(result);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	69b9      	ldr	r1, [r7, #24]
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	617b      	str	r3, [r7, #20]
   return(result);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e4      	bne.n	800614c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f85c 	bl	800624c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006194:	e03f      	b.n	8006216 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <HAL_UART_IRQHandler+0x5a8>
 80061a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80061b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fd34 	bl	8006c26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061be:	e02d      	b.n	800621c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01c      	beq.n	800621a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
    }
    return;
 80061e8:	e017      	b.n	800621a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d012      	beq.n	800621c <HAL_UART_IRQHandler+0x604>
 80061f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fce5 	bl	8006bd2 <UART_EndTransmit_IT>
    return;
 8006208:	e008      	b.n	800621c <HAL_UART_IRQHandler+0x604>
      return;
 800620a:	bf00      	nop
 800620c:	e006      	b.n	800621c <HAL_UART_IRQHandler+0x604>
    return;
 800620e:	bf00      	nop
 8006210:	e004      	b.n	800621c <HAL_UART_IRQHandler+0x604>
      return;
 8006212:	bf00      	nop
 8006214:	e002      	b.n	800621c <HAL_UART_IRQHandler+0x604>
      return;
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <HAL_UART_IRQHandler+0x604>
    return;
 800621a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800621c:	37e8      	adds	r7, #232	@ 0xe8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop

08006224 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006268:	b08a      	sub	sp, #40	@ 0x28
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	431a      	orrs	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	431a      	orrs	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	4313      	orrs	r3, r2
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4ba5      	ldr	r3, [pc, #660]	@ (8006528 <UART_SetConfig+0x2c4>)
 8006294:	4013      	ands	r3, r2
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800629c:	430b      	orrs	r3, r1
 800629e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a9a      	ldr	r2, [pc, #616]	@ (800652c <UART_SetConfig+0x2c8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062cc:	4313      	orrs	r3, r2
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e0:	430a      	orrs	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a91      	ldr	r2, [pc, #580]	@ (8006530 <UART_SetConfig+0x2cc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d126      	bne.n	800633c <UART_SetConfig+0xd8>
 80062ee:	4b91      	ldr	r3, [pc, #580]	@ (8006534 <UART_SetConfig+0x2d0>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d81b      	bhi.n	8006334 <UART_SetConfig+0xd0>
 80062fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <UART_SetConfig+0xa0>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006315 	.word	0x08006315
 8006308:	08006325 	.word	0x08006325
 800630c:	0800631d 	.word	0x0800631d
 8006310:	0800632d 	.word	0x0800632d
 8006314:	2301      	movs	r3, #1
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800631a:	e0d6      	b.n	80064ca <UART_SetConfig+0x266>
 800631c:	2302      	movs	r3, #2
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006322:	e0d2      	b.n	80064ca <UART_SetConfig+0x266>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800632a:	e0ce      	b.n	80064ca <UART_SetConfig+0x266>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006332:	e0ca      	b.n	80064ca <UART_SetConfig+0x266>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800633a:	e0c6      	b.n	80064ca <UART_SetConfig+0x266>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a7d      	ldr	r2, [pc, #500]	@ (8006538 <UART_SetConfig+0x2d4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d138      	bne.n	80063b8 <UART_SetConfig+0x154>
 8006346:	4b7b      	ldr	r3, [pc, #492]	@ (8006534 <UART_SetConfig+0x2d0>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634c:	f003 030c 	and.w	r3, r3, #12
 8006350:	2b0c      	cmp	r3, #12
 8006352:	d82d      	bhi.n	80063b0 <UART_SetConfig+0x14c>
 8006354:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <UART_SetConfig+0xf8>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	08006391 	.word	0x08006391
 8006360:	080063b1 	.word	0x080063b1
 8006364:	080063b1 	.word	0x080063b1
 8006368:	080063b1 	.word	0x080063b1
 800636c:	080063a1 	.word	0x080063a1
 8006370:	080063b1 	.word	0x080063b1
 8006374:	080063b1 	.word	0x080063b1
 8006378:	080063b1 	.word	0x080063b1
 800637c:	08006399 	.word	0x08006399
 8006380:	080063b1 	.word	0x080063b1
 8006384:	080063b1 	.word	0x080063b1
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063a9 	.word	0x080063a9
 8006390:	2300      	movs	r3, #0
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006396:	e098      	b.n	80064ca <UART_SetConfig+0x266>
 8006398:	2302      	movs	r3, #2
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800639e:	e094      	b.n	80064ca <UART_SetConfig+0x266>
 80063a0:	2304      	movs	r3, #4
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063a6:	e090      	b.n	80064ca <UART_SetConfig+0x266>
 80063a8:	2308      	movs	r3, #8
 80063aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ae:	e08c      	b.n	80064ca <UART_SetConfig+0x266>
 80063b0:	2310      	movs	r3, #16
 80063b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b6:	e088      	b.n	80064ca <UART_SetConfig+0x266>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5f      	ldr	r2, [pc, #380]	@ (800653c <UART_SetConfig+0x2d8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d125      	bne.n	800640e <UART_SetConfig+0x1aa>
 80063c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006534 <UART_SetConfig+0x2d0>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063cc:	2b30      	cmp	r3, #48	@ 0x30
 80063ce:	d016      	beq.n	80063fe <UART_SetConfig+0x19a>
 80063d0:	2b30      	cmp	r3, #48	@ 0x30
 80063d2:	d818      	bhi.n	8006406 <UART_SetConfig+0x1a2>
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d00a      	beq.n	80063ee <UART_SetConfig+0x18a>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d814      	bhi.n	8006406 <UART_SetConfig+0x1a2>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <UART_SetConfig+0x182>
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d008      	beq.n	80063f6 <UART_SetConfig+0x192>
 80063e4:	e00f      	b.n	8006406 <UART_SetConfig+0x1a2>
 80063e6:	2300      	movs	r3, #0
 80063e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ec:	e06d      	b.n	80064ca <UART_SetConfig+0x266>
 80063ee:	2302      	movs	r3, #2
 80063f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f4:	e069      	b.n	80064ca <UART_SetConfig+0x266>
 80063f6:	2304      	movs	r3, #4
 80063f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063fc:	e065      	b.n	80064ca <UART_SetConfig+0x266>
 80063fe:	2308      	movs	r3, #8
 8006400:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006404:	e061      	b.n	80064ca <UART_SetConfig+0x266>
 8006406:	2310      	movs	r3, #16
 8006408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800640c:	e05d      	b.n	80064ca <UART_SetConfig+0x266>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a4b      	ldr	r2, [pc, #300]	@ (8006540 <UART_SetConfig+0x2dc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d125      	bne.n	8006464 <UART_SetConfig+0x200>
 8006418:	4b46      	ldr	r3, [pc, #280]	@ (8006534 <UART_SetConfig+0x2d0>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006422:	2bc0      	cmp	r3, #192	@ 0xc0
 8006424:	d016      	beq.n	8006454 <UART_SetConfig+0x1f0>
 8006426:	2bc0      	cmp	r3, #192	@ 0xc0
 8006428:	d818      	bhi.n	800645c <UART_SetConfig+0x1f8>
 800642a:	2b80      	cmp	r3, #128	@ 0x80
 800642c:	d00a      	beq.n	8006444 <UART_SetConfig+0x1e0>
 800642e:	2b80      	cmp	r3, #128	@ 0x80
 8006430:	d814      	bhi.n	800645c <UART_SetConfig+0x1f8>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <UART_SetConfig+0x1d8>
 8006436:	2b40      	cmp	r3, #64	@ 0x40
 8006438:	d008      	beq.n	800644c <UART_SetConfig+0x1e8>
 800643a:	e00f      	b.n	800645c <UART_SetConfig+0x1f8>
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006442:	e042      	b.n	80064ca <UART_SetConfig+0x266>
 8006444:	2302      	movs	r3, #2
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644a:	e03e      	b.n	80064ca <UART_SetConfig+0x266>
 800644c:	2304      	movs	r3, #4
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006452:	e03a      	b.n	80064ca <UART_SetConfig+0x266>
 8006454:	2308      	movs	r3, #8
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645a:	e036      	b.n	80064ca <UART_SetConfig+0x266>
 800645c:	2310      	movs	r3, #16
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006462:	e032      	b.n	80064ca <UART_SetConfig+0x266>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a30      	ldr	r2, [pc, #192]	@ (800652c <UART_SetConfig+0x2c8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d12a      	bne.n	80064c4 <UART_SetConfig+0x260>
 800646e:	4b31      	ldr	r3, [pc, #196]	@ (8006534 <UART_SetConfig+0x2d0>)
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006474:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006478:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800647c:	d01a      	beq.n	80064b4 <UART_SetConfig+0x250>
 800647e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006482:	d81b      	bhi.n	80064bc <UART_SetConfig+0x258>
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006488:	d00c      	beq.n	80064a4 <UART_SetConfig+0x240>
 800648a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800648e:	d815      	bhi.n	80064bc <UART_SetConfig+0x258>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <UART_SetConfig+0x238>
 8006494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006498:	d008      	beq.n	80064ac <UART_SetConfig+0x248>
 800649a:	e00f      	b.n	80064bc <UART_SetConfig+0x258>
 800649c:	2300      	movs	r3, #0
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a2:	e012      	b.n	80064ca <UART_SetConfig+0x266>
 80064a4:	2302      	movs	r3, #2
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064aa:	e00e      	b.n	80064ca <UART_SetConfig+0x266>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b2:	e00a      	b.n	80064ca <UART_SetConfig+0x266>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ba:	e006      	b.n	80064ca <UART_SetConfig+0x266>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c2:	e002      	b.n	80064ca <UART_SetConfig+0x266>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a17      	ldr	r2, [pc, #92]	@ (800652c <UART_SetConfig+0x2c8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	f040 808b 	bne.w	80065ec <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d834      	bhi.n	8006548 <UART_SetConfig+0x2e4>
 80064de:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <UART_SetConfig+0x280>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006509 	.word	0x08006509
 80064e8:	08006549 	.word	0x08006549
 80064ec:	08006511 	.word	0x08006511
 80064f0:	08006549 	.word	0x08006549
 80064f4:	08006517 	.word	0x08006517
 80064f8:	08006549 	.word	0x08006549
 80064fc:	08006549 	.word	0x08006549
 8006500:	08006549 	.word	0x08006549
 8006504:	0800651f 	.word	0x0800651f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006508:	f7fd fe18 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 800650c:	61f8      	str	r0, [r7, #28]
        break;
 800650e:	e021      	b.n	8006554 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006510:	4b0c      	ldr	r3, [pc, #48]	@ (8006544 <UART_SetConfig+0x2e0>)
 8006512:	61fb      	str	r3, [r7, #28]
        break;
 8006514:	e01e      	b.n	8006554 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006516:	f7fd fd79 	bl	800400c <HAL_RCC_GetSysClockFreq>
 800651a:	61f8      	str	r0, [r7, #28]
        break;
 800651c:	e01a      	b.n	8006554 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800651e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006522:	61fb      	str	r3, [r7, #28]
        break;
 8006524:	e016      	b.n	8006554 <UART_SetConfig+0x2f0>
 8006526:	bf00      	nop
 8006528:	efff69f3 	.word	0xefff69f3
 800652c:	40008000 	.word	0x40008000
 8006530:	40013800 	.word	0x40013800
 8006534:	40021000 	.word	0x40021000
 8006538:	40004400 	.word	0x40004400
 800653c:	40004800 	.word	0x40004800
 8006540:	40004c00 	.word	0x40004c00
 8006544:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006552:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80fa 	beq.w	8006750 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	4413      	add	r3, r2
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	429a      	cmp	r2, r3
 800656a:	d305      	bcc.n	8006578 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	429a      	cmp	r2, r3
 8006576:	d903      	bls.n	8006580 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800657e:	e0e7      	b.n	8006750 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	2200      	movs	r2, #0
 8006584:	461c      	mov	r4, r3
 8006586:	4615      	mov	r5, r2
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	022b      	lsls	r3, r5, #8
 8006592:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006596:	0222      	lsls	r2, r4, #8
 8006598:	68f9      	ldr	r1, [r7, #12]
 800659a:	6849      	ldr	r1, [r1, #4]
 800659c:	0849      	lsrs	r1, r1, #1
 800659e:	2000      	movs	r0, #0
 80065a0:	4688      	mov	r8, r1
 80065a2:	4681      	mov	r9, r0
 80065a4:	eb12 0a08 	adds.w	sl, r2, r8
 80065a8:	eb43 0b09 	adc.w	fp, r3, r9
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	607a      	str	r2, [r7, #4]
 80065b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ba:	4650      	mov	r0, sl
 80065bc:	4659      	mov	r1, fp
 80065be:	f7f9 fe0f 	bl	80001e0 <__aeabi_uldivmod>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4613      	mov	r3, r2
 80065c8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065d0:	d308      	bcc.n	80065e4 <UART_SetConfig+0x380>
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065d8:	d204      	bcs.n	80065e4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	e0b5      	b.n	8006750 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065ea:	e0b1      	b.n	8006750 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f4:	d15d      	bne.n	80066b2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80065f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d827      	bhi.n	800664e <UART_SetConfig+0x3ea>
 80065fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006604 <UART_SetConfig+0x3a0>)
 8006600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006604:	08006629 	.word	0x08006629
 8006608:	08006631 	.word	0x08006631
 800660c:	08006639 	.word	0x08006639
 8006610:	0800664f 	.word	0x0800664f
 8006614:	0800663f 	.word	0x0800663f
 8006618:	0800664f 	.word	0x0800664f
 800661c:	0800664f 	.word	0x0800664f
 8006620:	0800664f 	.word	0x0800664f
 8006624:	08006647 	.word	0x08006647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006628:	f7fd fd88 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 800662c:	61f8      	str	r0, [r7, #28]
        break;
 800662e:	e014      	b.n	800665a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006630:	f7fd fd9a 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 8006634:	61f8      	str	r0, [r7, #28]
        break;
 8006636:	e010      	b.n	800665a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006638:	4b4c      	ldr	r3, [pc, #304]	@ (800676c <UART_SetConfig+0x508>)
 800663a:	61fb      	str	r3, [r7, #28]
        break;
 800663c:	e00d      	b.n	800665a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800663e:	f7fd fce5 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8006642:	61f8      	str	r0, [r7, #28]
        break;
 8006644:	e009      	b.n	800665a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800664a:	61fb      	str	r3, [r7, #28]
        break;
 800664c:	e005      	b.n	800665a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d077      	beq.n	8006750 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	005a      	lsls	r2, r3, #1
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	085b      	lsrs	r3, r3, #1
 800666a:	441a      	add	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	fbb2 f3f3 	udiv	r3, r2, r3
 8006674:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b0f      	cmp	r3, #15
 800667a:	d916      	bls.n	80066aa <UART_SetConfig+0x446>
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006682:	d212      	bcs.n	80066aa <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f023 030f 	bic.w	r3, r3, #15
 800668c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	b29b      	uxth	r3, r3
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	b29a      	uxth	r2, r3
 800669a:	8afb      	ldrh	r3, [r7, #22]
 800669c:	4313      	orrs	r3, r2
 800669e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	8afa      	ldrh	r2, [r7, #22]
 80066a6:	60da      	str	r2, [r3, #12]
 80066a8:	e052      	b.n	8006750 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066b0:	e04e      	b.n	8006750 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d827      	bhi.n	800670a <UART_SetConfig+0x4a6>
 80066ba:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <UART_SetConfig+0x45c>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	0800670b 	.word	0x0800670b
 80066d0:	080066fb 	.word	0x080066fb
 80066d4:	0800670b 	.word	0x0800670b
 80066d8:	0800670b 	.word	0x0800670b
 80066dc:	0800670b 	.word	0x0800670b
 80066e0:	08006703 	.word	0x08006703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7fd fd2a 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 80066e8:	61f8      	str	r0, [r7, #28]
        break;
 80066ea:	e014      	b.n	8006716 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ec:	f7fd fd3c 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 80066f0:	61f8      	str	r0, [r7, #28]
        break;
 80066f2:	e010      	b.n	8006716 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f4:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <UART_SetConfig+0x508>)
 80066f6:	61fb      	str	r3, [r7, #28]
        break;
 80066f8:	e00d      	b.n	8006716 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fa:	f7fd fc87 	bl	800400c <HAL_RCC_GetSysClockFreq>
 80066fe:	61f8      	str	r0, [r7, #28]
        break;
 8006700:	e009      	b.n	8006716 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006706:	61fb      	str	r3, [r7, #28]
        break;
 8006708:	e005      	b.n	8006716 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006714:	bf00      	nop
    }

    if (pclk != 0U)
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d019      	beq.n	8006750 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	085a      	lsrs	r2, r3, #1
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	fbb2 f3f3 	udiv	r3, r2, r3
 800672e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b0f      	cmp	r3, #15
 8006734:	d909      	bls.n	800674a <UART_SetConfig+0x4e6>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800673c:	d205      	bcs.n	800674a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60da      	str	r2, [r3, #12]
 8006748:	e002      	b.n	8006750 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800675c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006760:	4618      	mov	r0, r3
 8006762:	3728      	adds	r7, #40	@ 0x28
 8006764:	46bd      	mov	sp, r7
 8006766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800676a:	bf00      	nop
 800676c:	00f42400 	.word	0x00f42400

08006770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01a      	beq.n	8006886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800686e:	d10a      	bne.n	8006886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	605a      	str	r2, [r3, #4]
  }
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b098      	sub	sp, #96	@ 0x60
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068c4:	f7fb f882 	bl	80019cc <HAL_GetTick>
 80068c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d12e      	bne.n	8006936 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068e0:	2200      	movs	r2, #0
 80068e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f88c 	bl	8006a04 <UART_WaitOnFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d021      	beq.n	8006936 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006906:	653b      	str	r3, [r7, #80]	@ 0x50
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006910:	647b      	str	r3, [r7, #68]	@ 0x44
 8006912:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800691e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e6      	bne.n	80068f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e062      	b.n	80069fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b04      	cmp	r3, #4
 8006942:	d149      	bne.n	80069d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006944:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800694c:	2200      	movs	r2, #0
 800694e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f856 	bl	8006a04 <UART_WaitOnFlagUntilTimeout>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d03c      	beq.n	80069d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	623b      	str	r3, [r7, #32]
   return(result);
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800697c:	633b      	str	r3, [r7, #48]	@ 0x30
 800697e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800698a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e6      	bne.n	800695e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3308      	adds	r3, #8
 8006996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3308      	adds	r3, #8
 80069ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069b0:	61fa      	str	r2, [r7, #28]
 80069b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	69b9      	ldr	r1, [r7, #24]
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	617b      	str	r3, [r7, #20]
   return(result);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e5      	bne.n	8006990 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e011      	b.n	80069fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3758      	adds	r7, #88	@ 0x58
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a14:	e04f      	b.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d04b      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1e:	f7fa ffd5 	bl	80019cc <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d302      	bcc.n	8006a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e04e      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d037      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b80      	cmp	r3, #128	@ 0x80
 8006a4a:	d034      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b40      	cmp	r3, #64	@ 0x40
 8006a50:	d031      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d110      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2208      	movs	r2, #8
 8006a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f838 	bl	8006ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2208      	movs	r2, #8
 8006a72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e029      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a90:	d111      	bne.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 f81e 	bl	8006ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e00f      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d0a0      	beq.n	8006a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b095      	sub	sp, #84	@ 0x54
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b04:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e6      	bne.n	8006ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f023 0301 	bic.w	r3, r3, #1
 8006b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3308      	adds	r3, #8
 8006b36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e5      	bne.n	8006b18 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d118      	bne.n	8006b86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f023 0310 	bic.w	r3, r3, #16
 8006b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6979      	ldr	r1, [r7, #20]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e6      	bne.n	8006b54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b9a:	bf00      	nop
 8006b9c:	3754      	adds	r7, #84	@ 0x54
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff fb37 	bl	8006238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b088      	sub	sp, #32
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6979      	ldr	r1, [r7, #20]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	613b      	str	r3, [r7, #16]
   return(result);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e6      	bne.n	8006bda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff fb03 	bl	8006224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c1e:	bf00      	nop
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	4638      	mov	r0, r7
 8006c44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c5e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006c62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	43db      	mvns	r3, r3
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	4013      	ands	r3, r2
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	4638      	mov	r0, r7
 8006cb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d1e:	2b84      	cmp	r3, #132	@ 0x84
 8006d20:	d005      	beq.n	8006d2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006d22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	3303      	adds	r3, #3
 8006d2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d40:	f000 fa7a 	bl	8007238 <vTaskStartScheduler>
  
  return osOK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d4c:	b089      	sub	sp, #36	@ 0x24
 8006d4e:	af04      	add	r7, sp, #16
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d020      	beq.n	8006d9e <osThreadCreate+0x54>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01c      	beq.n	8006d9e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685c      	ldr	r4, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691e      	ldr	r6, [r3, #16]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff ffc8 	bl	8006d0c <makeFreeRtosPriority>
 8006d7c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d86:	9202      	str	r2, [sp, #8]
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	9100      	str	r1, [sp, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	4632      	mov	r2, r6
 8006d90:	4629      	mov	r1, r5
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 f8a0 	bl	8006ed8 <xTaskCreateStatic>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e01c      	b.n	8006dd8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685c      	ldr	r4, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006daa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff ffaa 	bl	8006d0c <makeFreeRtosPriority>
 8006db8:	4602      	mov	r2, r0
 8006dba:	f107 030c 	add.w	r3, r7, #12
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	9200      	str	r2, [sp, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 f8e5 	bl	8006f98 <xTaskCreate>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d001      	beq.n	8006dd8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e000      	b.n	8006dda <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006de2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f103 0208 	add.w	r2, r3, #8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f103 0208 	add.w	r2, r3, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f103 0208 	add.w	r2, r3, #8
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	601a      	str	r2, [r3, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6892      	ldr	r2, [r2, #8]
 8006e9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6852      	ldr	r2, [r2, #4]
 8006ea4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d103      	bne.n	8006eb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	1e5a      	subs	r2, r3, #1
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08e      	sub	sp, #56	@ 0x38
 8006edc:	af04      	add	r7, sp, #16
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	61fb      	str	r3, [r7, #28]
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f22:	23a0      	movs	r3, #160	@ 0xa0
 8006f24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f2a:	d00b      	beq.n	8006f44 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	61bb      	str	r3, [r7, #24]
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01e      	beq.n	8006f8a <xTaskCreateStatic+0xb2>
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01b      	beq.n	8006f8a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f5a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f64:	2300      	movs	r3, #0
 8006f66:	9303      	str	r3, [sp, #12]
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	9302      	str	r3, [sp, #8]
 8006f6c:	f107 0314 	add.w	r3, r7, #20
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68b9      	ldr	r1, [r7, #8]
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f851 	bl	8007024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f84:	f000 f8ee 	bl	8007164 <prvAddNewTaskToReadyList>
 8006f88:	e001      	b.n	8006f8e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f8e:	697b      	ldr	r3, [r7, #20]
	}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3728      	adds	r7, #40	@ 0x28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08c      	sub	sp, #48	@ 0x30
 8006f9c:	af04      	add	r7, sp, #16
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fe63 	bl	8007c78 <pvPortMalloc>
 8006fb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00e      	beq.n	8006fd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fba:	20a0      	movs	r0, #160	@ 0xa0
 8006fbc:	f000 fe5c 	bl	8007c78 <pvPortMalloc>
 8006fc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fce:	e005      	b.n	8006fdc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fd0:	6978      	ldr	r0, [r7, #20]
 8006fd2:	f000 ff1f 	bl	8007e14 <vPortFree>
 8006fd6:	e001      	b.n	8006fdc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d017      	beq.n	8007012 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	2300      	movs	r3, #0
 8006fee:	9303      	str	r3, [sp, #12]
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	9302      	str	r3, [sp, #8]
 8006ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f80f 	bl	8007024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007006:	69f8      	ldr	r0, [r7, #28]
 8007008:	f000 f8ac 	bl	8007164 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800700c:	2301      	movs	r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	e002      	b.n	8007018 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007012:	f04f 33ff 	mov.w	r3, #4294967295
 8007016:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007018:	69bb      	ldr	r3, [r7, #24]
	}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800703c:	3b01      	subs	r3, #1
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	f023 0307 	bic.w	r3, r3, #7
 800704a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	617b      	str	r3, [r7, #20]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01f      	beq.n	80070b4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
 8007078:	e012      	b.n	80070a0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	7819      	ldrb	r1, [r3, #0]
 8007082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	3334      	adds	r3, #52	@ 0x34
 800708a:	460a      	mov	r2, r1
 800708c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d006      	beq.n	80070a8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	3301      	adds	r3, #1
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	2b0f      	cmp	r3, #15
 80070a4:	d9e9      	bls.n	800707a <prvInitialiseNewTask+0x56>
 80070a6:	e000      	b.n	80070aa <prvInitialiseNewTask+0x86>
			{
				break;
 80070a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070b2:	e003      	b.n	80070bc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	2b06      	cmp	r3, #6
 80070c0:	d901      	bls.n	80070c6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070c2:	2306      	movs	r3, #6
 80070c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070d0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	2200      	movs	r2, #0
 80070d6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fea0 	bl	8006e22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	3318      	adds	r3, #24
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff fe9b 	bl	8006e22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	f1c3 0207 	rsb	r2, r3, #7
 80070f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007100:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	2200      	movs	r2, #0
 8007106:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	2200      	movs	r2, #0
 800710e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	334c      	adds	r3, #76	@ 0x4c
 8007116:	224c      	movs	r2, #76	@ 0x4c
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f000 ff9a 	bl	8008054 <memset>
 8007120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007122:	4a0d      	ldr	r2, [pc, #52]	@ (8007158 <prvInitialiseNewTask+0x134>)
 8007124:	651a      	str	r2, [r3, #80]	@ 0x50
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	4a0c      	ldr	r2, [pc, #48]	@ (800715c <prvInitialiseNewTask+0x138>)
 800712a:	655a      	str	r2, [r3, #84]	@ 0x54
 800712c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712e:	4a0c      	ldr	r2, [pc, #48]	@ (8007160 <prvInitialiseNewTask+0x13c>)
 8007130:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	68f9      	ldr	r1, [r7, #12]
 8007136:	69b8      	ldr	r0, [r7, #24]
 8007138:	f000 fb8e 	bl	8007858 <pxPortInitialiseStack>
 800713c:	4602      	mov	r2, r0
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800714c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800714e:	bf00      	nop
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20001790 	.word	0x20001790
 800715c:	200017f8 	.word	0x200017f8
 8007160:	20001860 	.word	0x20001860

08007164 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800716c:	f000 fca4 	bl	8007ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007170:	4b2a      	ldr	r3, [pc, #168]	@ (800721c <prvAddNewTaskToReadyList+0xb8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	4a29      	ldr	r2, [pc, #164]	@ (800721c <prvAddNewTaskToReadyList+0xb8>)
 8007178:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800717a:	4b29      	ldr	r3, [pc, #164]	@ (8007220 <prvAddNewTaskToReadyList+0xbc>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007182:	4a27      	ldr	r2, [pc, #156]	@ (8007220 <prvAddNewTaskToReadyList+0xbc>)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007188:	4b24      	ldr	r3, [pc, #144]	@ (800721c <prvAddNewTaskToReadyList+0xb8>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d110      	bne.n	80071b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007190:	f000 fa9e 	bl	80076d0 <prvInitialiseTaskLists>
 8007194:	e00d      	b.n	80071b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007196:	4b23      	ldr	r3, [pc, #140]	@ (8007224 <prvAddNewTaskToReadyList+0xc0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800719e:	4b20      	ldr	r3, [pc, #128]	@ (8007220 <prvAddNewTaskToReadyList+0xbc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d802      	bhi.n	80071b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007220 <prvAddNewTaskToReadyList+0xbc>)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007228 <prvAddNewTaskToReadyList+0xc4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007228 <prvAddNewTaskToReadyList+0xc4>)
 80071ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	2201      	movs	r2, #1
 80071c2:	409a      	lsls	r2, r3
 80071c4:	4b19      	ldr	r3, [pc, #100]	@ (800722c <prvAddNewTaskToReadyList+0xc8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	4a18      	ldr	r2, [pc, #96]	@ (800722c <prvAddNewTaskToReadyList+0xc8>)
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4a15      	ldr	r2, [pc, #84]	@ (8007230 <prvAddNewTaskToReadyList+0xcc>)
 80071dc:	441a      	add	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3304      	adds	r3, #4
 80071e2:	4619      	mov	r1, r3
 80071e4:	4610      	mov	r0, r2
 80071e6:	f7ff fe29 	bl	8006e3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071ea:	f000 fc97 	bl	8007b1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007224 <prvAddNewTaskToReadyList+0xc0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00e      	beq.n	8007214 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007220 <prvAddNewTaskToReadyList+0xbc>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007200:	429a      	cmp	r2, r3
 8007202:	d207      	bcs.n	8007214 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007204:	4b0b      	ldr	r3, [pc, #44]	@ (8007234 <prvAddNewTaskToReadyList+0xd0>)
 8007206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000b84 	.word	0x20000b84
 8007220:	20000a84 	.word	0x20000a84
 8007224:	20000b90 	.word	0x20000b90
 8007228:	20000ba0 	.word	0x20000ba0
 800722c:	20000b8c 	.word	0x20000b8c
 8007230:	20000a88 	.word	0x20000a88
 8007234:	e000ed04 	.word	0xe000ed04

08007238 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08a      	sub	sp, #40	@ 0x28
 800723c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007242:	2300      	movs	r3, #0
 8007244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007246:	463a      	mov	r2, r7
 8007248:	1d39      	adds	r1, r7, #4
 800724a:	f107 0308 	add.w	r3, r7, #8
 800724e:	4618      	mov	r0, r3
 8007250:	f7f9 f95c 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	9202      	str	r2, [sp, #8]
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	2300      	movs	r3, #0
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	2300      	movs	r3, #0
 8007264:	460a      	mov	r2, r1
 8007266:	4921      	ldr	r1, [pc, #132]	@ (80072ec <vTaskStartScheduler+0xb4>)
 8007268:	4821      	ldr	r0, [pc, #132]	@ (80072f0 <vTaskStartScheduler+0xb8>)
 800726a:	f7ff fe35 	bl	8006ed8 <xTaskCreateStatic>
 800726e:	4603      	mov	r3, r0
 8007270:	4a20      	ldr	r2, [pc, #128]	@ (80072f4 <vTaskStartScheduler+0xbc>)
 8007272:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007274:	4b1f      	ldr	r3, [pc, #124]	@ (80072f4 <vTaskStartScheduler+0xbc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	e001      	b.n	8007286 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d11b      	bne.n	80072c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	613b      	str	r3, [r7, #16]
}
 800729e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072a0:	4b15      	ldr	r3, [pc, #84]	@ (80072f8 <vTaskStartScheduler+0xc0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	334c      	adds	r3, #76	@ 0x4c
 80072a6:	4a15      	ldr	r2, [pc, #84]	@ (80072fc <vTaskStartScheduler+0xc4>)
 80072a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072aa:	4b15      	ldr	r3, [pc, #84]	@ (8007300 <vTaskStartScheduler+0xc8>)
 80072ac:	f04f 32ff 	mov.w	r2, #4294967295
 80072b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072b2:	4b14      	ldr	r3, [pc, #80]	@ (8007304 <vTaskStartScheduler+0xcc>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072b8:	4b13      	ldr	r3, [pc, #76]	@ (8007308 <vTaskStartScheduler+0xd0>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072be:	f000 fb57 	bl	8007970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072c2:	e00f      	b.n	80072e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d10b      	bne.n	80072e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	60fb      	str	r3, [r7, #12]
}
 80072de:	bf00      	nop
 80072e0:	bf00      	nop
 80072e2:	e7fd      	b.n	80072e0 <vTaskStartScheduler+0xa8>
}
 80072e4:	bf00      	nop
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	08008258 	.word	0x08008258
 80072f0:	080076a1 	.word	0x080076a1
 80072f4:	20000ba8 	.word	0x20000ba8
 80072f8:	20000a84 	.word	0x20000a84
 80072fc:	20000010 	.word	0x20000010
 8007300:	20000ba4 	.word	0x20000ba4
 8007304:	20000b90 	.word	0x20000b90
 8007308:	20000b88 	.word	0x20000b88

0800730c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007310:	4b04      	ldr	r3, [pc, #16]	@ (8007324 <vTaskSuspendAll+0x18>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3301      	adds	r3, #1
 8007316:	4a03      	ldr	r2, [pc, #12]	@ (8007324 <vTaskSuspendAll+0x18>)
 8007318:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800731a:	bf00      	nop
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	20000bac 	.word	0x20000bac

08007328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007332:	2300      	movs	r3, #0
 8007334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007336:	4b42      	ldr	r3, [pc, #264]	@ (8007440 <xTaskResumeAll+0x118>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10b      	bne.n	8007356 <xTaskResumeAll+0x2e>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	603b      	str	r3, [r7, #0]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007356:	f000 fbaf 	bl	8007ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800735a:	4b39      	ldr	r3, [pc, #228]	@ (8007440 <xTaskResumeAll+0x118>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3b01      	subs	r3, #1
 8007360:	4a37      	ldr	r2, [pc, #220]	@ (8007440 <xTaskResumeAll+0x118>)
 8007362:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007364:	4b36      	ldr	r3, [pc, #216]	@ (8007440 <xTaskResumeAll+0x118>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d161      	bne.n	8007430 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800736c:	4b35      	ldr	r3, [pc, #212]	@ (8007444 <xTaskResumeAll+0x11c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d05d      	beq.n	8007430 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007374:	e02e      	b.n	80073d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007376:	4b34      	ldr	r3, [pc, #208]	@ (8007448 <xTaskResumeAll+0x120>)
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3318      	adds	r3, #24
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fd7e 	bl	8006e84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3304      	adds	r3, #4
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fd79 	bl	8006e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	2201      	movs	r2, #1
 8007398:	409a      	lsls	r2, r3
 800739a:	4b2c      	ldr	r3, [pc, #176]	@ (800744c <xTaskResumeAll+0x124>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4313      	orrs	r3, r2
 80073a0:	4a2a      	ldr	r2, [pc, #168]	@ (800744c <xTaskResumeAll+0x124>)
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4a27      	ldr	r2, [pc, #156]	@ (8007450 <xTaskResumeAll+0x128>)
 80073b2:	441a      	add	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f7ff fd3e 	bl	8006e3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c4:	4b23      	ldr	r3, [pc, #140]	@ (8007454 <xTaskResumeAll+0x12c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d302      	bcc.n	80073d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80073ce:	4b22      	ldr	r3, [pc, #136]	@ (8007458 <xTaskResumeAll+0x130>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007448 <xTaskResumeAll+0x120>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1cc      	bne.n	8007376 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073e2:	f000 fa19 	bl	8007818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073e6:	4b1d      	ldr	r3, [pc, #116]	@ (800745c <xTaskResumeAll+0x134>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d010      	beq.n	8007414 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073f2:	f000 f837 	bl	8007464 <xTaskIncrementTick>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80073fc:	4b16      	ldr	r3, [pc, #88]	@ (8007458 <xTaskResumeAll+0x130>)
 80073fe:	2201      	movs	r2, #1
 8007400:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3b01      	subs	r3, #1
 8007406:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f1      	bne.n	80073f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800740e:	4b13      	ldr	r3, [pc, #76]	@ (800745c <xTaskResumeAll+0x134>)
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007414:	4b10      	ldr	r3, [pc, #64]	@ (8007458 <xTaskResumeAll+0x130>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d009      	beq.n	8007430 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800741c:	2301      	movs	r3, #1
 800741e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007420:	4b0f      	ldr	r3, [pc, #60]	@ (8007460 <xTaskResumeAll+0x138>)
 8007422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007430:	f000 fb74 	bl	8007b1c <vPortExitCritical>

	return xAlreadyYielded;
 8007434:	68bb      	ldr	r3, [r7, #8]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000bac 	.word	0x20000bac
 8007444:	20000b84 	.word	0x20000b84
 8007448:	20000b44 	.word	0x20000b44
 800744c:	20000b8c 	.word	0x20000b8c
 8007450:	20000a88 	.word	0x20000a88
 8007454:	20000a84 	.word	0x20000a84
 8007458:	20000b98 	.word	0x20000b98
 800745c:	20000b94 	.word	0x20000b94
 8007460:	e000ed04 	.word	0xe000ed04

08007464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800746e:	4b4f      	ldr	r3, [pc, #316]	@ (80075ac <xTaskIncrementTick+0x148>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f040 808f 	bne.w	8007596 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007478:	4b4d      	ldr	r3, [pc, #308]	@ (80075b0 <xTaskIncrementTick+0x14c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3301      	adds	r3, #1
 800747e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007480:	4a4b      	ldr	r2, [pc, #300]	@ (80075b0 <xTaskIncrementTick+0x14c>)
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d121      	bne.n	80074d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800748c:	4b49      	ldr	r3, [pc, #292]	@ (80075b4 <xTaskIncrementTick+0x150>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	603b      	str	r3, [r7, #0]
}
 80074a8:	bf00      	nop
 80074aa:	bf00      	nop
 80074ac:	e7fd      	b.n	80074aa <xTaskIncrementTick+0x46>
 80074ae:	4b41      	ldr	r3, [pc, #260]	@ (80075b4 <xTaskIncrementTick+0x150>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	4b40      	ldr	r3, [pc, #256]	@ (80075b8 <xTaskIncrementTick+0x154>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a3e      	ldr	r2, [pc, #248]	@ (80075b4 <xTaskIncrementTick+0x150>)
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	4a3e      	ldr	r2, [pc, #248]	@ (80075b8 <xTaskIncrementTick+0x154>)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	4b3e      	ldr	r3, [pc, #248]	@ (80075bc <xTaskIncrementTick+0x158>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3301      	adds	r3, #1
 80074c8:	4a3c      	ldr	r2, [pc, #240]	@ (80075bc <xTaskIncrementTick+0x158>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	f000 f9a4 	bl	8007818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074d0:	4b3b      	ldr	r3, [pc, #236]	@ (80075c0 <xTaskIncrementTick+0x15c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d348      	bcc.n	800756c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074da:	4b36      	ldr	r3, [pc, #216]	@ (80075b4 <xTaskIncrementTick+0x150>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e4:	4b36      	ldr	r3, [pc, #216]	@ (80075c0 <xTaskIncrementTick+0x15c>)
 80074e6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ea:	601a      	str	r2, [r3, #0]
					break;
 80074ec:	e03e      	b.n	800756c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ee:	4b31      	ldr	r3, [pc, #196]	@ (80075b4 <xTaskIncrementTick+0x150>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	429a      	cmp	r2, r3
 8007504:	d203      	bcs.n	800750e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007506:	4a2e      	ldr	r2, [pc, #184]	@ (80075c0 <xTaskIncrementTick+0x15c>)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800750c:	e02e      	b.n	800756c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	3304      	adds	r3, #4
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff fcb6 	bl	8006e84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d004      	beq.n	800752a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	3318      	adds	r3, #24
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fcad 	bl	8006e84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752e:	2201      	movs	r2, #1
 8007530:	409a      	lsls	r2, r3
 8007532:	4b24      	ldr	r3, [pc, #144]	@ (80075c4 <xTaskIncrementTick+0x160>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4313      	orrs	r3, r2
 8007538:	4a22      	ldr	r2, [pc, #136]	@ (80075c4 <xTaskIncrementTick+0x160>)
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4a1f      	ldr	r2, [pc, #124]	@ (80075c8 <xTaskIncrementTick+0x164>)
 800754a:	441a      	add	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	3304      	adds	r3, #4
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f7ff fc72 	bl	8006e3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800755c:	4b1b      	ldr	r3, [pc, #108]	@ (80075cc <xTaskIncrementTick+0x168>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	429a      	cmp	r2, r3
 8007564:	d3b9      	bcc.n	80074da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007566:	2301      	movs	r3, #1
 8007568:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800756a:	e7b6      	b.n	80074da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800756c:	4b17      	ldr	r3, [pc, #92]	@ (80075cc <xTaskIncrementTick+0x168>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007572:	4915      	ldr	r1, [pc, #84]	@ (80075c8 <xTaskIncrementTick+0x164>)
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d901      	bls.n	8007588 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007584:	2301      	movs	r3, #1
 8007586:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007588:	4b11      	ldr	r3, [pc, #68]	@ (80075d0 <xTaskIncrementTick+0x16c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007590:	2301      	movs	r3, #1
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	e004      	b.n	80075a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007596:	4b0f      	ldr	r3, [pc, #60]	@ (80075d4 <xTaskIncrementTick+0x170>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3301      	adds	r3, #1
 800759c:	4a0d      	ldr	r2, [pc, #52]	@ (80075d4 <xTaskIncrementTick+0x170>)
 800759e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075a0:	697b      	ldr	r3, [r7, #20]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000bac 	.word	0x20000bac
 80075b0:	20000b88 	.word	0x20000b88
 80075b4:	20000b3c 	.word	0x20000b3c
 80075b8:	20000b40 	.word	0x20000b40
 80075bc:	20000b9c 	.word	0x20000b9c
 80075c0:	20000ba4 	.word	0x20000ba4
 80075c4:	20000b8c 	.word	0x20000b8c
 80075c8:	20000a88 	.word	0x20000a88
 80075cc:	20000a84 	.word	0x20000a84
 80075d0:	20000b98 	.word	0x20000b98
 80075d4:	20000b94 	.word	0x20000b94

080075d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075de:	4b2a      	ldr	r3, [pc, #168]	@ (8007688 <vTaskSwitchContext+0xb0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075e6:	4b29      	ldr	r3, [pc, #164]	@ (800768c <vTaskSwitchContext+0xb4>)
 80075e8:	2201      	movs	r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075ec:	e045      	b.n	800767a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80075ee:	4b27      	ldr	r3, [pc, #156]	@ (800768c <vTaskSwitchContext+0xb4>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f4:	4b26      	ldr	r3, [pc, #152]	@ (8007690 <vTaskSwitchContext+0xb8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	fab3 f383 	clz	r3, r3
 8007600:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007602:	7afb      	ldrb	r3, [r7, #11]
 8007604:	f1c3 031f 	rsb	r3, r3, #31
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	4922      	ldr	r1, [pc, #136]	@ (8007694 <vTaskSwitchContext+0xbc>)
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	4613      	mov	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <vTaskSwitchContext+0x5e>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <vTaskSwitchContext+0x5a>
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4a14      	ldr	r2, [pc, #80]	@ (8007694 <vTaskSwitchContext+0xbc>)
 8007642:	4413      	add	r3, r2
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	605a      	str	r2, [r3, #4]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	3308      	adds	r3, #8
 8007658:	429a      	cmp	r2, r3
 800765a:	d104      	bne.n	8007666 <vTaskSwitchContext+0x8e>
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	605a      	str	r2, [r3, #4]
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	4a0a      	ldr	r2, [pc, #40]	@ (8007698 <vTaskSwitchContext+0xc0>)
 800766e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007670:	4b09      	ldr	r3, [pc, #36]	@ (8007698 <vTaskSwitchContext+0xc0>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	334c      	adds	r3, #76	@ 0x4c
 8007676:	4a09      	ldr	r2, [pc, #36]	@ (800769c <vTaskSwitchContext+0xc4>)
 8007678:	6013      	str	r3, [r2, #0]
}
 800767a:	bf00      	nop
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000bac 	.word	0x20000bac
 800768c:	20000b98 	.word	0x20000b98
 8007690:	20000b8c 	.word	0x20000b8c
 8007694:	20000a88 	.word	0x20000a88
 8007698:	20000a84 	.word	0x20000a84
 800769c:	20000010 	.word	0x20000010

080076a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076a8:	f000 f852 	bl	8007750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <prvIdleTask+0x28>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d9f9      	bls.n	80076a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076b4:	4b05      	ldr	r3, [pc, #20]	@ (80076cc <prvIdleTask+0x2c>)
 80076b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076c4:	e7f0      	b.n	80076a8 <prvIdleTask+0x8>
 80076c6:	bf00      	nop
 80076c8:	20000a88 	.word	0x20000a88
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076d6:	2300      	movs	r3, #0
 80076d8:	607b      	str	r3, [r7, #4]
 80076da:	e00c      	b.n	80076f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4a12      	ldr	r2, [pc, #72]	@ (8007730 <prvInitialiseTaskLists+0x60>)
 80076e8:	4413      	add	r3, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff fb79 	bl	8006de2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3301      	adds	r3, #1
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b06      	cmp	r3, #6
 80076fa:	d9ef      	bls.n	80076dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076fc:	480d      	ldr	r0, [pc, #52]	@ (8007734 <prvInitialiseTaskLists+0x64>)
 80076fe:	f7ff fb70 	bl	8006de2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007702:	480d      	ldr	r0, [pc, #52]	@ (8007738 <prvInitialiseTaskLists+0x68>)
 8007704:	f7ff fb6d 	bl	8006de2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007708:	480c      	ldr	r0, [pc, #48]	@ (800773c <prvInitialiseTaskLists+0x6c>)
 800770a:	f7ff fb6a 	bl	8006de2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800770e:	480c      	ldr	r0, [pc, #48]	@ (8007740 <prvInitialiseTaskLists+0x70>)
 8007710:	f7ff fb67 	bl	8006de2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007714:	480b      	ldr	r0, [pc, #44]	@ (8007744 <prvInitialiseTaskLists+0x74>)
 8007716:	f7ff fb64 	bl	8006de2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800771a:	4b0b      	ldr	r3, [pc, #44]	@ (8007748 <prvInitialiseTaskLists+0x78>)
 800771c:	4a05      	ldr	r2, [pc, #20]	@ (8007734 <prvInitialiseTaskLists+0x64>)
 800771e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007720:	4b0a      	ldr	r3, [pc, #40]	@ (800774c <prvInitialiseTaskLists+0x7c>)
 8007722:	4a05      	ldr	r2, [pc, #20]	@ (8007738 <prvInitialiseTaskLists+0x68>)
 8007724:	601a      	str	r2, [r3, #0]
}
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000a88 	.word	0x20000a88
 8007734:	20000b14 	.word	0x20000b14
 8007738:	20000b28 	.word	0x20000b28
 800773c:	20000b44 	.word	0x20000b44
 8007740:	20000b58 	.word	0x20000b58
 8007744:	20000b70 	.word	0x20000b70
 8007748:	20000b3c 	.word	0x20000b3c
 800774c:	20000b40 	.word	0x20000b40

08007750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007756:	e019      	b.n	800778c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007758:	f000 f9ae 	bl	8007ab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775c:	4b10      	ldr	r3, [pc, #64]	@ (80077a0 <prvCheckTasksWaitingTermination+0x50>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3304      	adds	r3, #4
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fb8b 	bl	8006e84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800776e:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <prvCheckTasksWaitingTermination+0x54>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3b01      	subs	r3, #1
 8007774:	4a0b      	ldr	r2, [pc, #44]	@ (80077a4 <prvCheckTasksWaitingTermination+0x54>)
 8007776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007778:	4b0b      	ldr	r3, [pc, #44]	@ (80077a8 <prvCheckTasksWaitingTermination+0x58>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3b01      	subs	r3, #1
 800777e:	4a0a      	ldr	r2, [pc, #40]	@ (80077a8 <prvCheckTasksWaitingTermination+0x58>)
 8007780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007782:	f000 f9cb 	bl	8007b1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f810 	bl	80077ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800778c:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <prvCheckTasksWaitingTermination+0x58>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e1      	bne.n	8007758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000b58 	.word	0x20000b58
 80077a4:	20000b84 	.word	0x20000b84
 80077a8:	20000b6c 	.word	0x20000b6c

080077ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	334c      	adds	r3, #76	@ 0x4c
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fc53 	bl	8008064 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d108      	bne.n	80077da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fb21 	bl	8007e14 <vPortFree>
				vPortFree( pxTCB );
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fb1e 	bl	8007e14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077d8:	e019      	b.n	800780e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d103      	bne.n	80077ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fb15 	bl	8007e14 <vPortFree>
	}
 80077ea:	e010      	b.n	800780e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d00b      	beq.n	800780e <prvDeleteTCB+0x62>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	60fb      	str	r3, [r7, #12]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <prvDeleteTCB+0x5e>
	}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800781e:	4b0c      	ldr	r3, [pc, #48]	@ (8007850 <prvResetNextTaskUnblockTime+0x38>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007828:	4b0a      	ldr	r3, [pc, #40]	@ (8007854 <prvResetNextTaskUnblockTime+0x3c>)
 800782a:	f04f 32ff 	mov.w	r2, #4294967295
 800782e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007830:	e008      	b.n	8007844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007832:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <prvResetNextTaskUnblockTime+0x38>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4a04      	ldr	r2, [pc, #16]	@ (8007854 <prvResetNextTaskUnblockTime+0x3c>)
 8007842:	6013      	str	r3, [r2, #0]
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20000b3c 	.word	0x20000b3c
 8007854:	20000ba4 	.word	0x20000ba4

08007858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3b04      	subs	r3, #4
 8007868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3b04      	subs	r3, #4
 8007876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f023 0201 	bic.w	r2, r3, #1
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3b04      	subs	r3, #4
 8007886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007888:	4a0c      	ldr	r2, [pc, #48]	@ (80078bc <pxPortInitialiseStack+0x64>)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3b14      	subs	r3, #20
 8007892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3b04      	subs	r3, #4
 800789e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f06f 0202 	mvn.w	r2, #2
 80078a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3b20      	subs	r3, #32
 80078ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078ae:	68fb      	ldr	r3, [r7, #12]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	080078c1 	.word	0x080078c1

080078c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078ca:	4b13      	ldr	r3, [pc, #76]	@ (8007918 <prvTaskExitError+0x58>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d2:	d00b      	beq.n	80078ec <prvTaskExitError+0x2c>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	60fb      	str	r3, [r7, #12]
}
 80078e6:	bf00      	nop
 80078e8:	bf00      	nop
 80078ea:	e7fd      	b.n	80078e8 <prvTaskExitError+0x28>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	60bb      	str	r3, [r7, #8]
}
 80078fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007900:	bf00      	nop
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0fc      	beq.n	8007902 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	2000000c 	.word	0x2000000c
 800791c:	00000000 	.word	0x00000000

08007920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007920:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <pxCurrentTCBConst2>)
 8007922:	6819      	ldr	r1, [r3, #0]
 8007924:	6808      	ldr	r0, [r1, #0]
 8007926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792a:	f380 8809 	msr	PSP, r0
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f04f 0000 	mov.w	r0, #0
 8007936:	f380 8811 	msr	BASEPRI, r0
 800793a:	4770      	bx	lr
 800793c:	f3af 8000 	nop.w

08007940 <pxCurrentTCBConst2>:
 8007940:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007948:	4808      	ldr	r0, [pc, #32]	@ (800796c <prvPortStartFirstTask+0x24>)
 800794a:	6800      	ldr	r0, [r0, #0]
 800794c:	6800      	ldr	r0, [r0, #0]
 800794e:	f380 8808 	msr	MSP, r0
 8007952:	f04f 0000 	mov.w	r0, #0
 8007956:	f380 8814 	msr	CONTROL, r0
 800795a:	b662      	cpsie	i
 800795c:	b661      	cpsie	f
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	df00      	svc	0
 8007968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800796a:	bf00      	nop
 800796c:	e000ed08 	.word	0xe000ed08

08007970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007976:	4b47      	ldr	r3, [pc, #284]	@ (8007a94 <xPortStartScheduler+0x124>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a47      	ldr	r2, [pc, #284]	@ (8007a98 <xPortStartScheduler+0x128>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d10b      	bne.n	8007998 <xPortStartScheduler+0x28>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	60fb      	str	r3, [r7, #12]
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007998:	4b3e      	ldr	r3, [pc, #248]	@ (8007a94 <xPortStartScheduler+0x124>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a9c <xPortStartScheduler+0x12c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d10b      	bne.n	80079ba <xPortStartScheduler+0x4a>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	613b      	str	r3, [r7, #16]
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop
 80079b8:	e7fd      	b.n	80079b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079ba:	4b39      	ldr	r3, [pc, #228]	@ (8007aa0 <xPortStartScheduler+0x130>)
 80079bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	22ff      	movs	r2, #255	@ 0xff
 80079ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	4b31      	ldr	r3, [pc, #196]	@ (8007aa4 <xPortStartScheduler+0x134>)
 80079e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079e2:	4b31      	ldr	r3, [pc, #196]	@ (8007aa8 <xPortStartScheduler+0x138>)
 80079e4:	2207      	movs	r2, #7
 80079e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079e8:	e009      	b.n	80079fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80079ea:	4b2f      	ldr	r3, [pc, #188]	@ (8007aa8 <xPortStartScheduler+0x138>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	4a2d      	ldr	r2, [pc, #180]	@ (8007aa8 <xPortStartScheduler+0x138>)
 80079f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a06:	2b80      	cmp	r3, #128	@ 0x80
 8007a08:	d0ef      	beq.n	80079ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a0a:	4b27      	ldr	r3, [pc, #156]	@ (8007aa8 <xPortStartScheduler+0x138>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f1c3 0307 	rsb	r3, r3, #7
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d00b      	beq.n	8007a2e <xPortStartScheduler+0xbe>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	60bb      	str	r3, [r7, #8]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa8 <xPortStartScheduler+0x138>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	4a1c      	ldr	r2, [pc, #112]	@ (8007aa8 <xPortStartScheduler+0x138>)
 8007a36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a38:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa8 <xPortStartScheduler+0x138>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a40:	4a19      	ldr	r2, [pc, #100]	@ (8007aa8 <xPortStartScheduler+0x138>)
 8007a42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a4c:	4b17      	ldr	r3, [pc, #92]	@ (8007aac <xPortStartScheduler+0x13c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a16      	ldr	r2, [pc, #88]	@ (8007aac <xPortStartScheduler+0x13c>)
 8007a52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a58:	4b14      	ldr	r3, [pc, #80]	@ (8007aac <xPortStartScheduler+0x13c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a13      	ldr	r2, [pc, #76]	@ (8007aac <xPortStartScheduler+0x13c>)
 8007a5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a64:	f000 f8da 	bl	8007c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a68:	4b11      	ldr	r3, [pc, #68]	@ (8007ab0 <xPortStartScheduler+0x140>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a6e:	f000 f8f9 	bl	8007c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a72:	4b10      	ldr	r3, [pc, #64]	@ (8007ab4 <xPortStartScheduler+0x144>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a0f      	ldr	r2, [pc, #60]	@ (8007ab4 <xPortStartScheduler+0x144>)
 8007a78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a7e:	f7ff ff63 	bl	8007948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a82:	f7ff fda9 	bl	80075d8 <vTaskSwitchContext>
	prvTaskExitError();
 8007a86:	f7ff ff1b 	bl	80078c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	e000ed00 	.word	0xe000ed00
 8007a98:	410fc271 	.word	0x410fc271
 8007a9c:	410fc270 	.word	0x410fc270
 8007aa0:	e000e400 	.word	0xe000e400
 8007aa4:	20000bb0 	.word	0x20000bb0
 8007aa8:	20000bb4 	.word	0x20000bb4
 8007aac:	e000ed20 	.word	0xe000ed20
 8007ab0:	2000000c 	.word	0x2000000c
 8007ab4:	e000ef34 	.word	0xe000ef34

08007ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	607b      	str	r3, [r7, #4]
}
 8007ad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ad2:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <vPortEnterCritical+0x5c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8007b14 <vPortEnterCritical+0x5c>)
 8007ada:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007adc:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <vPortEnterCritical+0x5c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d110      	bne.n	8007b06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b18 <vPortEnterCritical+0x60>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <vPortEnterCritical+0x4e>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	603b      	str	r3, [r7, #0]
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	e7fd      	b.n	8007b02 <vPortEnterCritical+0x4a>
	}
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	2000000c 	.word	0x2000000c
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b22:	4b12      	ldr	r3, [pc, #72]	@ (8007b6c <vPortExitCritical+0x50>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10b      	bne.n	8007b42 <vPortExitCritical+0x26>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	607b      	str	r3, [r7, #4]
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	e7fd      	b.n	8007b3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b42:	4b0a      	ldr	r3, [pc, #40]	@ (8007b6c <vPortExitCritical+0x50>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	4a08      	ldr	r2, [pc, #32]	@ (8007b6c <vPortExitCritical+0x50>)
 8007b4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b4c:	4b07      	ldr	r3, [pc, #28]	@ (8007b6c <vPortExitCritical+0x50>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d105      	bne.n	8007b60 <vPortExitCritical+0x44>
 8007b54:	2300      	movs	r3, #0
 8007b56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	2000000c 	.word	0x2000000c

08007b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b70:	f3ef 8009 	mrs	r0, PSP
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	4b15      	ldr	r3, [pc, #84]	@ (8007bd0 <pxCurrentTCBConst>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	f01e 0f10 	tst.w	lr, #16
 8007b80:	bf08      	it	eq
 8007b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	6010      	str	r0, [r2, #0]
 8007b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b94:	f380 8811 	msr	BASEPRI, r0
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f7ff fd1a 	bl	80075d8 <vTaskSwitchContext>
 8007ba4:	f04f 0000 	mov.w	r0, #0
 8007ba8:	f380 8811 	msr	BASEPRI, r0
 8007bac:	bc09      	pop	{r0, r3}
 8007bae:	6819      	ldr	r1, [r3, #0]
 8007bb0:	6808      	ldr	r0, [r1, #0]
 8007bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb6:	f01e 0f10 	tst.w	lr, #16
 8007bba:	bf08      	it	eq
 8007bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bc0:	f380 8809 	msr	PSP, r0
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	f3af 8000 	nop.w

08007bd0 <pxCurrentTCBConst>:
 8007bd0:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop

08007bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bf2:	f7ff fc37 	bl	8007464 <xTaskIncrementTick>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bfc:	4b06      	ldr	r3, [pc, #24]	@ (8007c18 <SysTick_Handler+0x40>)
 8007bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	2300      	movs	r3, #0
 8007c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f383 8811 	msr	BASEPRI, r3
}
 8007c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	e000ed04 	.word	0xe000ed04

08007c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c20:	4b0b      	ldr	r3, [pc, #44]	@ (8007c50 <vPortSetupTimerInterrupt+0x34>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c26:	4b0b      	ldr	r3, [pc, #44]	@ (8007c54 <vPortSetupTimerInterrupt+0x38>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c58 <vPortSetupTimerInterrupt+0x3c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a0a      	ldr	r2, [pc, #40]	@ (8007c5c <vPortSetupTimerInterrupt+0x40>)
 8007c32:	fba2 2303 	umull	r2, r3, r2, r3
 8007c36:	099b      	lsrs	r3, r3, #6
 8007c38:	4a09      	ldr	r2, [pc, #36]	@ (8007c60 <vPortSetupTimerInterrupt+0x44>)
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c3e:	4b04      	ldr	r3, [pc, #16]	@ (8007c50 <vPortSetupTimerInterrupt+0x34>)
 8007c40:	2207      	movs	r2, #7
 8007c42:	601a      	str	r2, [r3, #0]
}
 8007c44:	bf00      	nop
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	e000e010 	.word	0xe000e010
 8007c54:	e000e018 	.word	0xe000e018
 8007c58:	20000000 	.word	0x20000000
 8007c5c:	10624dd3 	.word	0x10624dd3
 8007c60:	e000e014 	.word	0xe000e014

08007c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c74 <vPortEnableVFP+0x10>
 8007c68:	6801      	ldr	r1, [r0, #0]
 8007c6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c6e:	6001      	str	r1, [r0, #0]
 8007c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c72:	bf00      	nop
 8007c74:	e000ed88 	.word	0xe000ed88

08007c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	@ 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c84:	f7ff fb42 	bl	800730c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c88:	4b5c      	ldr	r3, [pc, #368]	@ (8007dfc <pvPortMalloc+0x184>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c90:	f000 f924 	bl	8007edc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c94:	4b5a      	ldr	r3, [pc, #360]	@ (8007e00 <pvPortMalloc+0x188>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 8095 	bne.w	8007dcc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01e      	beq.n	8007ce6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007ca8:	2208      	movs	r2, #8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d015      	beq.n	8007ce6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f023 0307 	bic.w	r3, r3, #7
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <pvPortMalloc+0x6e>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	617b      	str	r3, [r7, #20]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d06f      	beq.n	8007dcc <pvPortMalloc+0x154>
 8007cec:	4b45      	ldr	r3, [pc, #276]	@ (8007e04 <pvPortMalloc+0x18c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d86a      	bhi.n	8007dcc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cf6:	4b44      	ldr	r3, [pc, #272]	@ (8007e08 <pvPortMalloc+0x190>)
 8007cf8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cfa:	4b43      	ldr	r3, [pc, #268]	@ (8007e08 <pvPortMalloc+0x190>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d00:	e004      	b.n	8007d0c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d903      	bls.n	8007d1e <pvPortMalloc+0xa6>
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1f1      	bne.n	8007d02 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d1e:	4b37      	ldr	r3, [pc, #220]	@ (8007dfc <pvPortMalloc+0x184>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d051      	beq.n	8007dcc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	4413      	add	r3, r2
 8007d30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	1ad2      	subs	r2, r2, r3
 8007d42:	2308      	movs	r3, #8
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d920      	bls.n	8007d8c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4413      	add	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <pvPortMalloc+0xfc>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	613b      	str	r3, [r7, #16]
}
 8007d6e:	bf00      	nop
 8007d70:	bf00      	nop
 8007d72:	e7fd      	b.n	8007d70 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d86:	69b8      	ldr	r0, [r7, #24]
 8007d88:	f000 f90a 	bl	8007fa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8007e04 <pvPortMalloc+0x18c>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	4a1b      	ldr	r2, [pc, #108]	@ (8007e04 <pvPortMalloc+0x18c>)
 8007d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8007e04 <pvPortMalloc+0x18c>)
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8007e0c <pvPortMalloc+0x194>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d203      	bcs.n	8007dae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007da6:	4b17      	ldr	r3, [pc, #92]	@ (8007e04 <pvPortMalloc+0x18c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a18      	ldr	r2, [pc, #96]	@ (8007e0c <pvPortMalloc+0x194>)
 8007dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	4b13      	ldr	r3, [pc, #76]	@ (8007e00 <pvPortMalloc+0x188>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	431a      	orrs	r2, r3
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dc2:	4b13      	ldr	r3, [pc, #76]	@ (8007e10 <pvPortMalloc+0x198>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	4a11      	ldr	r2, [pc, #68]	@ (8007e10 <pvPortMalloc+0x198>)
 8007dca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007dcc:	f7ff faac 	bl	8007328 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <pvPortMalloc+0x17a>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	60fb      	str	r3, [r7, #12]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <pvPortMalloc+0x176>
	return pvReturn;
 8007df2:	69fb      	ldr	r3, [r7, #28]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3728      	adds	r7, #40	@ 0x28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20001778 	.word	0x20001778
 8007e00:	2000178c 	.word	0x2000178c
 8007e04:	2000177c 	.word	0x2000177c
 8007e08:	20001770 	.word	0x20001770
 8007e0c:	20001780 	.word	0x20001780
 8007e10:	20001784 	.word	0x20001784

08007e14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d04f      	beq.n	8007ec6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e26:	2308      	movs	r3, #8
 8007e28:	425b      	negs	r3, r3
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	4b25      	ldr	r3, [pc, #148]	@ (8007ed0 <vPortFree+0xbc>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10b      	bne.n	8007e5a <vPortFree+0x46>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60fb      	str	r3, [r7, #12]
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00b      	beq.n	8007e7a <vPortFree+0x66>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	60bb      	str	r3, [r7, #8]
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	e7fd      	b.n	8007e76 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	4b14      	ldr	r3, [pc, #80]	@ (8007ed0 <vPortFree+0xbc>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01e      	beq.n	8007ec6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11a      	bne.n	8007ec6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed0 <vPortFree+0xbc>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	401a      	ands	r2, r3
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ea0:	f7ff fa34 	bl	800730c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed4 <vPortFree+0xc0>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	4a09      	ldr	r2, [pc, #36]	@ (8007ed4 <vPortFree+0xc0>)
 8007eb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eb2:	6938      	ldr	r0, [r7, #16]
 8007eb4:	f000 f874 	bl	8007fa0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007eb8:	4b07      	ldr	r3, [pc, #28]	@ (8007ed8 <vPortFree+0xc4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	4a06      	ldr	r2, [pc, #24]	@ (8007ed8 <vPortFree+0xc4>)
 8007ec0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ec2:	f7ff fa31 	bl	8007328 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ec6:	bf00      	nop
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	2000178c 	.word	0x2000178c
 8007ed4:	2000177c 	.word	0x2000177c
 8007ed8:	20001788 	.word	0x20001788

08007edc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ee2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007ee6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ee8:	4b27      	ldr	r3, [pc, #156]	@ (8007f88 <prvHeapInit+0xac>)
 8007eea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00c      	beq.n	8007f10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3307      	adds	r3, #7
 8007efa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 0307 	bic.w	r3, r3, #7
 8007f02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8007f88 <prvHeapInit+0xac>)
 8007f0c:	4413      	add	r3, r2
 8007f0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f14:	4a1d      	ldr	r2, [pc, #116]	@ (8007f8c <prvHeapInit+0xb0>)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007f8c <prvHeapInit+0xb0>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	4413      	add	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f28:	2208      	movs	r2, #8
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 0307 	bic.w	r3, r3, #7
 8007f36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4a15      	ldr	r2, [pc, #84]	@ (8007f90 <prvHeapInit+0xb4>)
 8007f3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f3e:	4b14      	ldr	r3, [pc, #80]	@ (8007f90 <prvHeapInit+0xb4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2200      	movs	r2, #0
 8007f44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f46:	4b12      	ldr	r3, [pc, #72]	@ (8007f90 <prvHeapInit+0xb4>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	1ad2      	subs	r2, r2, r3
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f90 <prvHeapInit+0xb4>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	4a0a      	ldr	r2, [pc, #40]	@ (8007f94 <prvHeapInit+0xb8>)
 8007f6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	4a09      	ldr	r2, [pc, #36]	@ (8007f98 <prvHeapInit+0xbc>)
 8007f72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f74:	4b09      	ldr	r3, [pc, #36]	@ (8007f9c <prvHeapInit+0xc0>)
 8007f76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f7a:	601a      	str	r2, [r3, #0]
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	20000bb8 	.word	0x20000bb8
 8007f8c:	20001770 	.word	0x20001770
 8007f90:	20001778 	.word	0x20001778
 8007f94:	20001780 	.word	0x20001780
 8007f98:	2000177c 	.word	0x2000177c
 8007f9c:	2000178c 	.word	0x2000178c

08007fa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fa8:	4b28      	ldr	r3, [pc, #160]	@ (800804c <prvInsertBlockIntoFreeList+0xac>)
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	e002      	b.n	8007fb4 <prvInsertBlockIntoFreeList+0x14>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d8f7      	bhi.n	8007fae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	4413      	add	r3, r2
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d108      	bne.n	8007fe2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	441a      	add	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	441a      	add	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d118      	bne.n	8008028 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b15      	ldr	r3, [pc, #84]	@ (8008050 <prvInsertBlockIntoFreeList+0xb0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d00d      	beq.n	800801e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	441a      	add	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	e008      	b.n	8008030 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800801e:	4b0c      	ldr	r3, [pc, #48]	@ (8008050 <prvInsertBlockIntoFreeList+0xb0>)
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e003      	b.n	8008030 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	429a      	cmp	r2, r3
 8008036:	d002      	beq.n	800803e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20001770 	.word	0x20001770
 8008050:	20001778 	.word	0x20001778

08008054 <memset>:
 8008054:	4402      	add	r2, r0
 8008056:	4603      	mov	r3, r0
 8008058:	4293      	cmp	r3, r2
 800805a:	d100      	bne.n	800805e <memset+0xa>
 800805c:	4770      	bx	lr
 800805e:	f803 1b01 	strb.w	r1, [r3], #1
 8008062:	e7f9      	b.n	8008058 <memset+0x4>

08008064 <_reclaim_reent>:
 8008064:	4b2d      	ldr	r3, [pc, #180]	@ (800811c <_reclaim_reent+0xb8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4283      	cmp	r3, r0
 800806a:	b570      	push	{r4, r5, r6, lr}
 800806c:	4604      	mov	r4, r0
 800806e:	d053      	beq.n	8008118 <_reclaim_reent+0xb4>
 8008070:	69c3      	ldr	r3, [r0, #28]
 8008072:	b31b      	cbz	r3, 80080bc <_reclaim_reent+0x58>
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	b163      	cbz	r3, 8008092 <_reclaim_reent+0x2e>
 8008078:	2500      	movs	r5, #0
 800807a:	69e3      	ldr	r3, [r4, #28]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	5959      	ldr	r1, [r3, r5]
 8008080:	b9b1      	cbnz	r1, 80080b0 <_reclaim_reent+0x4c>
 8008082:	3504      	adds	r5, #4
 8008084:	2d80      	cmp	r5, #128	@ 0x80
 8008086:	d1f8      	bne.n	800807a <_reclaim_reent+0x16>
 8008088:	69e3      	ldr	r3, [r4, #28]
 800808a:	4620      	mov	r0, r4
 800808c:	68d9      	ldr	r1, [r3, #12]
 800808e:	f000 f86d 	bl	800816c <_free_r>
 8008092:	69e3      	ldr	r3, [r4, #28]
 8008094:	6819      	ldr	r1, [r3, #0]
 8008096:	b111      	cbz	r1, 800809e <_reclaim_reent+0x3a>
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f867 	bl	800816c <_free_r>
 800809e:	69e3      	ldr	r3, [r4, #28]
 80080a0:	689d      	ldr	r5, [r3, #8]
 80080a2:	b15d      	cbz	r5, 80080bc <_reclaim_reent+0x58>
 80080a4:	4629      	mov	r1, r5
 80080a6:	4620      	mov	r0, r4
 80080a8:	682d      	ldr	r5, [r5, #0]
 80080aa:	f000 f85f 	bl	800816c <_free_r>
 80080ae:	e7f8      	b.n	80080a2 <_reclaim_reent+0x3e>
 80080b0:	680e      	ldr	r6, [r1, #0]
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 f85a 	bl	800816c <_free_r>
 80080b8:	4631      	mov	r1, r6
 80080ba:	e7e1      	b.n	8008080 <_reclaim_reent+0x1c>
 80080bc:	6961      	ldr	r1, [r4, #20]
 80080be:	b111      	cbz	r1, 80080c6 <_reclaim_reent+0x62>
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 f853 	bl	800816c <_free_r>
 80080c6:	69e1      	ldr	r1, [r4, #28]
 80080c8:	b111      	cbz	r1, 80080d0 <_reclaim_reent+0x6c>
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 f84e 	bl	800816c <_free_r>
 80080d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80080d2:	b111      	cbz	r1, 80080da <_reclaim_reent+0x76>
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 f849 	bl	800816c <_free_r>
 80080da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080dc:	b111      	cbz	r1, 80080e4 <_reclaim_reent+0x80>
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 f844 	bl	800816c <_free_r>
 80080e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80080e6:	b111      	cbz	r1, 80080ee <_reclaim_reent+0x8a>
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 f83f 	bl	800816c <_free_r>
 80080ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80080f0:	b111      	cbz	r1, 80080f8 <_reclaim_reent+0x94>
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 f83a 	bl	800816c <_free_r>
 80080f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80080fa:	b111      	cbz	r1, 8008102 <_reclaim_reent+0x9e>
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 f835 	bl	800816c <_free_r>
 8008102:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008104:	b111      	cbz	r1, 800810c <_reclaim_reent+0xa8>
 8008106:	4620      	mov	r0, r4
 8008108:	f000 f830 	bl	800816c <_free_r>
 800810c:	6a23      	ldr	r3, [r4, #32]
 800810e:	b11b      	cbz	r3, 8008118 <_reclaim_reent+0xb4>
 8008110:	4620      	mov	r0, r4
 8008112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008116:	4718      	bx	r3
 8008118:	bd70      	pop	{r4, r5, r6, pc}
 800811a:	bf00      	nop
 800811c:	20000010 	.word	0x20000010

08008120 <__libc_init_array>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	4d0d      	ldr	r5, [pc, #52]	@ (8008158 <__libc_init_array+0x38>)
 8008124:	4c0d      	ldr	r4, [pc, #52]	@ (800815c <__libc_init_array+0x3c>)
 8008126:	1b64      	subs	r4, r4, r5
 8008128:	10a4      	asrs	r4, r4, #2
 800812a:	2600      	movs	r6, #0
 800812c:	42a6      	cmp	r6, r4
 800812e:	d109      	bne.n	8008144 <__libc_init_array+0x24>
 8008130:	4d0b      	ldr	r5, [pc, #44]	@ (8008160 <__libc_init_array+0x40>)
 8008132:	4c0c      	ldr	r4, [pc, #48]	@ (8008164 <__libc_init_array+0x44>)
 8008134:	f000 f870 	bl	8008218 <_init>
 8008138:	1b64      	subs	r4, r4, r5
 800813a:	10a4      	asrs	r4, r4, #2
 800813c:	2600      	movs	r6, #0
 800813e:	42a6      	cmp	r6, r4
 8008140:	d105      	bne.n	800814e <__libc_init_array+0x2e>
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	f855 3b04 	ldr.w	r3, [r5], #4
 8008148:	4798      	blx	r3
 800814a:	3601      	adds	r6, #1
 800814c:	e7ee      	b.n	800812c <__libc_init_array+0xc>
 800814e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008152:	4798      	blx	r3
 8008154:	3601      	adds	r6, #1
 8008156:	e7f2      	b.n	800813e <__libc_init_array+0x1e>
 8008158:	080082b0 	.word	0x080082b0
 800815c:	080082b0 	.word	0x080082b0
 8008160:	080082b0 	.word	0x080082b0
 8008164:	080082b4 	.word	0x080082b4

08008168 <__retarget_lock_acquire_recursive>:
 8008168:	4770      	bx	lr

0800816a <__retarget_lock_release_recursive>:
 800816a:	4770      	bx	lr

0800816c <_free_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4605      	mov	r5, r0
 8008170:	2900      	cmp	r1, #0
 8008172:	d041      	beq.n	80081f8 <_free_r+0x8c>
 8008174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008178:	1f0c      	subs	r4, r1, #4
 800817a:	2b00      	cmp	r3, #0
 800817c:	bfb8      	it	lt
 800817e:	18e4      	addlt	r4, r4, r3
 8008180:	f000 f83e 	bl	8008200 <__malloc_lock>
 8008184:	4a1d      	ldr	r2, [pc, #116]	@ (80081fc <_free_r+0x90>)
 8008186:	6813      	ldr	r3, [r2, #0]
 8008188:	b933      	cbnz	r3, 8008198 <_free_r+0x2c>
 800818a:	6063      	str	r3, [r4, #4]
 800818c:	6014      	str	r4, [r2, #0]
 800818e:	4628      	mov	r0, r5
 8008190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008194:	f000 b83a 	b.w	800820c <__malloc_unlock>
 8008198:	42a3      	cmp	r3, r4
 800819a:	d908      	bls.n	80081ae <_free_r+0x42>
 800819c:	6820      	ldr	r0, [r4, #0]
 800819e:	1821      	adds	r1, r4, r0
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf01      	itttt	eq
 80081a4:	6819      	ldreq	r1, [r3, #0]
 80081a6:	685b      	ldreq	r3, [r3, #4]
 80081a8:	1809      	addeq	r1, r1, r0
 80081aa:	6021      	streq	r1, [r4, #0]
 80081ac:	e7ed      	b.n	800818a <_free_r+0x1e>
 80081ae:	461a      	mov	r2, r3
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	b10b      	cbz	r3, 80081b8 <_free_r+0x4c>
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	d9fa      	bls.n	80081ae <_free_r+0x42>
 80081b8:	6811      	ldr	r1, [r2, #0]
 80081ba:	1850      	adds	r0, r2, r1
 80081bc:	42a0      	cmp	r0, r4
 80081be:	d10b      	bne.n	80081d8 <_free_r+0x6c>
 80081c0:	6820      	ldr	r0, [r4, #0]
 80081c2:	4401      	add	r1, r0
 80081c4:	1850      	adds	r0, r2, r1
 80081c6:	4283      	cmp	r3, r0
 80081c8:	6011      	str	r1, [r2, #0]
 80081ca:	d1e0      	bne.n	800818e <_free_r+0x22>
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	6053      	str	r3, [r2, #4]
 80081d2:	4408      	add	r0, r1
 80081d4:	6010      	str	r0, [r2, #0]
 80081d6:	e7da      	b.n	800818e <_free_r+0x22>
 80081d8:	d902      	bls.n	80081e0 <_free_r+0x74>
 80081da:	230c      	movs	r3, #12
 80081dc:	602b      	str	r3, [r5, #0]
 80081de:	e7d6      	b.n	800818e <_free_r+0x22>
 80081e0:	6820      	ldr	r0, [r4, #0]
 80081e2:	1821      	adds	r1, r4, r0
 80081e4:	428b      	cmp	r3, r1
 80081e6:	bf04      	itt	eq
 80081e8:	6819      	ldreq	r1, [r3, #0]
 80081ea:	685b      	ldreq	r3, [r3, #4]
 80081ec:	6063      	str	r3, [r4, #4]
 80081ee:	bf04      	itt	eq
 80081f0:	1809      	addeq	r1, r1, r0
 80081f2:	6021      	streq	r1, [r4, #0]
 80081f4:	6054      	str	r4, [r2, #4]
 80081f6:	e7ca      	b.n	800818e <_free_r+0x22>
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	200018cc 	.word	0x200018cc

08008200 <__malloc_lock>:
 8008200:	4801      	ldr	r0, [pc, #4]	@ (8008208 <__malloc_lock+0x8>)
 8008202:	f7ff bfb1 	b.w	8008168 <__retarget_lock_acquire_recursive>
 8008206:	bf00      	nop
 8008208:	200018c8 	.word	0x200018c8

0800820c <__malloc_unlock>:
 800820c:	4801      	ldr	r0, [pc, #4]	@ (8008214 <__malloc_unlock+0x8>)
 800820e:	f7ff bfac 	b.w	800816a <__retarget_lock_release_recursive>
 8008212:	bf00      	nop
 8008214:	200018c8 	.word	0x200018c8

08008218 <_init>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	bf00      	nop
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr

08008224 <_fini>:
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008226:	bf00      	nop
 8008228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822a:	bc08      	pop	{r3}
 800822c:	469e      	mov	lr, r3
 800822e:	4770      	bx	lr
